<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.AIModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.AI.OffMeshLink">
      <summary>Link allowing movement outside the planar navigation mesh.</summary>
    </member>
    <member name="T:UnityEngine.AI.OffMeshLinkData">
      <summary>State of OffMeshLink.</summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshBuildDebugFlags">
      <summary>
        <para>Bitmask used for operating with debug data from the NavMesh build process.</para>
        <para>Used in two situations: - within <see cref="UnityEngine.AI.NavMeshBuildSettings.debug"></see> to specify which debug data to retain after the build process has completed, preserving the world position and orientation; - as a parameter of <see cref="UnityEditor.AI.NavMeshEditorHelpers.DrawBuildDebug"></see> to control which of the available debug data types to display for a specified NavMesh.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshBuildSourceShape">
      <summary>Used with <see cref="UnityEngine.AI.NavMeshBuildSource"></see> to define the shape for building NavMesh.</summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshCollectGeometry">
      <summary>Used for specifying the type of geometry to collect. Used with <see cref="UnityEngine.AI.NavMeshBuilder.CollectSources"></see>.</summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshObstacleShape">
      <summary>Shape of the obstacle.</summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshPathStatus">
      <summary>Status of path.</summary>
    </member>
    <member name="T:UnityEngine.AI.ObstacleAvoidanceType">
      <summary>Level of obstacle avoidance.</summary>
    </member>
    <member name="T:UnityEngine.AI.OffMeshLinkType">
      <summary>Link type specifier.</summary>
    </member>
    <member name="T:UnityEngine.AI.NavMesh">
      <summary>
        <para>Singleton class to access the baked NavMesh.</para>
        <para>The <see cref="UnityEngine.AI.NavMesh"></see> is a class can be used to do spatial queries, like pathfinding and walkability tests, set the pathfinding cost for specific area types, and to tweak global behavior of pathfinding and avoidance. In order to use the spatial queries, you need to first bake NavMesh for your Scene.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshAgent">
      <summary>
        <para>Navigation mesh agent.</para>
        <para>This component is attached to a mobile character in the game to allow it to navigate the scene using the NavMesh.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshBuildDebugSettings">
      <summary>
        <para>Specify which of the temporary data generated while building the NavMesh should be retained in memory after the process has completed.</para>
        <para>It is possible to collect and display in the Editor the intermediate data used in the process of building the navigation mesh using the <see cref="UnityEngine.AI.NavMeshBuilder"></see>. This can help with diagnosing those situations when the resulting NavMesh isn’t of the expected shape. <c>Input Geometry, Regions, Polygonal Mesh Detail and Raw Contours shown after building the NavMesh with debug options</c> The process for computing a NavMesh comprises of several sequential steps: i. decomposing the scene's terrain and meshes into triangles; ii. rasterizing the input triangles into a 3D voxel representation and finding ledges; iii. partitioning the voxels lying at the surface into simpler horizontal regions; iv. finding a tight-fitting contour for each of these regions; v. simplifying the contours into polygonal shapes; vi. creating a mesh of convex polygons based on all the contours combined; vii. refining the polygonal mesh into a triangulated version that approximates better the scene's original geometry. Through the use of the debug functionality the results from each stage can be captured and displayed separately, whereas normally they would get discarded when the NavMesh construction is completed. Depending on the scene composition this debug data can be considerably large in size. It is stored in memory in a compressed manner but gets further expanded when being displayed. Notes: 1. Unity does not save Debug visualizations - they are only available during the session in which Unity is building the NavMesh. 2. Debug data is neither displayed nor collected for NavMeshes that are statically baked with the legacy system, nor for any patches recomputed locally due to the presence of NavMesh Obstacles.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshBuilder">
      <summary>Navigation mesh builder interface.</summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshBuildMarkup">
      <summary>
        <para>The NavMesh build markup allows you to control how certain objects are treated during the NavMesh build process, specifically when collecting sources for building.</para>
        <para>You can override the area type or specify that certain objects should be excluded from collected sources. The markup is applied hierarchically.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshBuildSettings">
      <summary>
        <para>The NavMeshBuildSettings struct allows you to specify a collection of settings which describe the dimensions and limitations of a particular agent type.</para>
        <para>You might want to define multiple NavMeshBuildSettings if your game involves characters with large differences in height, width or climbing ability. You can also use this struct to control the precision and granularity of the build process, by setting the voxel and tile sizes. Some of the values are coupled, meaning there are constraints on the values based on other values. For example, it’s not valid for <see cref="UnityEngine.AI.NavMeshBuildSettings.agentClimb"></see> to be larger than <see cref="UnityEngine.AI.NavMeshBuildSettings.agentHeight"></see>. To help diagnose violations of these rules, a special method <see cref="UnityEngine.AI.NavMeshBuildSettings.ValidationReport"></see> can be evaluated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshBuildSource">
      <summary>
        <para>The input to the NavMesh builder is a list of NavMesh build sources.</para>
        <para>Their shape can be one of the following: mesh, terrain, box, sphere, or capsule. Each of them is described by a NavMeshBuildSource struct. You can specify a build source by filling a NavMeshBuildSource struct and adding that to the list of sources that are passed to the bake function. Alternatively, you can use the collect API to quickly create NavMesh build sources from available render meshes or physics colliders. See <see cref="UnityEngine.AI.NavMeshBuilder.CollectSources"></see>. If you use this function at runtime, any meshes with read/write access disabled will not be processed or included in the final NavMesh. See <see cref="UnityEngine.Mesh.isReadable"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshData">
      <summary>
        <para>Contains and represents NavMesh data.</para>
        <para>An object of this class can be used for creating instances of NavMeshes. See <see cref="UnityEngine.AI.NavMesh.AddNavMeshData"></see>. The contained NavMesh can be built and updated using the build API. See <see cref="UnityEngine.AI.NavMeshBuilder"></see> and methods therein.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshDataInstance">
      <summary>
        <para>The instance is returned when adding NavMesh data.</para>
        <para>A valid NavMesh data instance is available to the navigation system. This means you can calculate paths etc. using that instance. You also need the instance if you want to remove the NavMesh data at a later time.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshHit">
      <summary>Result information for NavMesh queries.</summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshLinkData">
      <summary>
        <para>Used for runtime manipulation of links connecting polygons of the NavMesh.</para>
        <para>A typical use case is to connect different navigation meshes. The link is described by the NavMeshLinkData struct. The NavMesh Link is the scripting equivalent of the class-OffMeshLink component – but allows for wide links as opposed to just points.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshLinkInstance">
      <summary>
        <para>An instance representing a link available for pathfinding.</para>
        <para>It can also be used for removing NavMesh links from the navigation system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshObstacle">
      <summary>
        <para>An obstacle for NavMeshAgents to avoid.</para>
        <para>A NavMeshObstacle is cylindrical in shape and can move around the surface of the NavMesh with a specified velocity. By default, the obstacle will only affect the agent's <c>avoidance</c> behaviour rather than the pathfinding. This means that the agent will ignore the obstacle when plotting a path but will sidestep around it while moving along the path. If <c>carving</c> is enabled, the obstacle will create a temporary "hole" in the NavMesh. The hole will be recognised by the pathfinding, so paths will be plotted to avoid the obstacle. This means that if, say, an obstacle blocks a narrow gap, the pathfinding will seek an alternative route to the target. Without carving, the agent will head for the gap but won't be able to pass until the obstacle is clear.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshPath">
      <summary>
        <para>A path as calculated by the navigation system.</para>
        <para>The path is represented as a list of waypoints stored in the <see cref="UnityEngine.AI.NavMeshPath.corners"></see> array. These points are not set directly from user scripts but a NavMeshPath with points correctly assigned is returned by the <see cref="UnityEngine.AI.NavMesh.CalculatePath"></see> function and the <see cref="UnityEngine.AI.NavMeshAgent.path"></see> property.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshQueryFilter">
      <summary>
        <para>Specifies which agent type and areas to consider when searching the NavMesh.</para>
        <para>This struct is used with the NavMesh query methods overloaded with the query filter argument.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AI.NavMeshTriangulation">
      <summary>Contains data describing a triangulation of a navmesh.</summary>
    </member>
    <member name="F:UnityEngine.AI.OffMeshLinkType.LinkTypeManual">
      <summary>Manually specified type of link.</summary>
    </member>
    <member name="F:UnityEngine.AI.OffMeshLinkType.LinkTypeDropDown">
      <summary>Vertical drop.</summary>
    </member>
    <member name="F:UnityEngine.AI.OffMeshLinkType.LinkTypeJumpAcross">
      <summary>Horizontal jump.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildSourceShape.Sphere">
      <summary>Describes a sphere primitive for use with <see cref="UnityEngine.AI.NavMeshBuildSource"></see>.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildSourceShape.Capsule">
      <summary>Describes a capsule primitive for use with <see cref="UnityEngine.AI.NavMeshBuildSource"></see>.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildSourceShape.ModifierBox">
      <summary>
        <para>Describes a ModifierBox source for use with <see cref="UnityEngine.AI.NavMeshBuildSource"></see>.</para>
        <para>This shape changes the area type of the walkable surface inside the box, instead of making it an obstruction. Note, that the modification is done in voxel representation of the scene, which means that the outline of the box is not followed precisely.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshCollectGeometry.RenderMeshes">
      <summary>Collect meshes form the rendered geometry.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshCollectGeometry.PhysicsColliders">
      <summary>Collect geometry from the 3D physics collision representation.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshObstacleShape.Capsule">
      <summary>Capsule shaped obstacle.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshObstacleShape.Box">
      <summary>Box shaped obstacle.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshPathStatus.PathComplete">
      <summary>The path terminates at the destination.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshPathStatus.PathPartial">
      <summary>The path cannot reach the destination.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshPathStatus.PathInvalid">
      <summary>The path is invalid.</summary>
    </member>
    <member name="F:UnityEngine.AI.ObstacleAvoidanceType.NoObstacleAvoidance">
      <summary>Disable avoidance.</summary>
    </member>
    <member name="F:UnityEngine.AI.ObstacleAvoidanceType.LowQualityObstacleAvoidance">
      <summary>Enable simple avoidance. Low performance impact.</summary>
    </member>
    <member name="F:UnityEngine.AI.ObstacleAvoidanceType.MedQualityObstacleAvoidance">
      <summary>Medium avoidance. Medium performance impact.</summary>
    </member>
    <member name="F:UnityEngine.AI.ObstacleAvoidanceType.GoodQualityObstacleAvoidance">
      <summary>Good avoidance. High performance impact.</summary>
    </member>
    <member name="F:UnityEngine.AI.ObstacleAvoidanceType.HighQualityObstacleAvoidance">
      <summary>Enable highest precision. Highest performance impact.</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLinkData.activated">
      <summary>Is link active (Read Only).</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLinkData.endPos">
      <summary>Link end world position (Read Only).</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLinkData.linkType">
      <summary>Link type specifier (Read Only).</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLinkData.offMeshLink">
      <summary>
        <para>The <see cref="UnityEngine.AI.OffMeshLink"></see> if the link type is a manually placed Offmeshlink (Read Only).</para>
        <para>Automatically generated Jump and drop links will return null.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLinkData.startPos">
      <summary>Link start world position (Read Only).</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLinkData.valid">
      <summary>Is link valid (Read Only).</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildDebugFlags.None">
      <summary>No debug data from the NavMesh build process is taken into consideration.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildDebugFlags.InputGeometry">
      <summary>The triangles of all the geometry that is used as a base for computing the new NavMesh.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildDebugFlags.Voxels">
      <summary>The voxels produced by rasterizing the source geometry into walkable and unwalkable areas.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildDebugFlags.Regions">
      <summary>The segmentation of the traversable surfaces into smaller areas necessary for producing simple polygons.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildDebugFlags.RawContours">
      <summary>The contours that follow precisely the edges of each surface region.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildDebugFlags.SimplifiedContours">
      <summary>Contours bounding each of the surface regions, described through fewer vertices and straighter edges compared to <see cref="UnityEngine.AI.NavMeshBuildDebugFlags.RawContours"></see>.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildDebugFlags.PolygonMeshes">
      <summary>Meshes of convex polygons constructed within the unified contours of adjacent regions.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildDebugFlags.PolygonMeshesDetail">
      <summary>The triangulated meshes with height details that better approximate the source geometry.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildDebugFlags.All">
      <summary>All debug data from the NavMesh build process is taken into consideration.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildSourceShape.Mesh">
      <summary>Describes a Mesh source for use with <see cref="UnityEngine.AI.NavMeshBuildSource"></see>.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildSourceShape.Terrain">
      <summary>Describes a <see cref="UnityEngine.TerrainData"></see> source for use with <see cref="UnityEngine.AI.NavMeshBuildSource"></see>.</summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshBuildSourceShape.Box">
      <summary>Describes a box primitive for use with <see cref="UnityEngine.AI.NavMeshBuildSource"></see>.</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLink.activated">
      <summary>Is link active.</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLink.area">
      <summary>NavMesh area index for this OffMeshLink component.</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLink.autoUpdatePositions">
      <summary>
        <para>Automatically update endpoints.</para>
        <para>The OffMeshLink component will try to match endpoint transforms specified by <see cref="UnityEngine.AI.OffMeshLink.startTransform"></see> and <see cref="UnityEngine.AI.OffMeshLink.endTransform"></see> .</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLink.biDirectional">
      <summary>
        <para>Can link be traversed in both directions.</para>
        <para>When false the link can only be traversed from start to end.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLink.costOverride">
      <summary>
        <para>Modify pathfinding cost for the link.</para>
        <para>When the costOverride value is non-negative the cost of moving over the OffMeshLink is equivalent to the costOverride value times the Euclidean distance between OffMeshLink end points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLink.endTransform">
      <summary>The transform representing link end position.</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLink.occupied">
      <summary>Is link occupied. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.AI.OffMeshLink.startTransform">
      <summary>The transform representing link start position.</summary>
    </member>
    <member name="M:UnityEngine.AI.OffMeshLink.UpdatePositions">
      <summary>
        <para>Explicitly update the link endpoints.</para>
        <para>Updates the OffMeshLink endpoints to match the transforms specified by the start and end transforms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildMarkup.area">
      <summary>The area type to use when override area is enabled.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildMarkup.ignoreFromBuild">
      <summary>
        <para>Use this to specify whether the GameObject and its children should be ignored.</para>
        <para>If you set this to true, the GameObject and its children will not be included as part of the NavMesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildMarkup.overrideArea">
      <summary>Use this to specify whether the area type of the GameObject and its children should be overridden by the area type specified in this struct.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildMarkup.root">
      <summary>Use this to specify which GameObject (including the GameObject’s children) the markup should be applied to.</summary>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.CreateSettings">
      <summary>
        <para>Creates and returns a new entry of NavMesh build settings available for runtime NavMesh building.</para>
        <para>This is useful for creating and storing settings to use for building NavMeshes for different sized characters. The <see cref="UnityEngine.AI.NavMeshBuildSettings.agentTypeID"></see> will be positive and unique for the created settings.</para>
      </summary>
      <returns>The created settings.</returns>
      <seealso cref="T:UnityEngine.AI.NavMeshBuildSettings">
      </seealso>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.FindClosestEdge(UnityEngine.Vector3,UnityEngine.AI.NavMeshHit@,System.Int32)">
      <summary>
        <para>Locate the closest NavMesh edge from a point on the NavMesh.</para>
        <para>The returned <see cref="UnityEngine.AI.NavMeshHit"></see> object contains the position and details of the nearest point on the nearest edge of the navmesh. This can be used to query how much extra space there is around the agent.</para>
      </summary>
      <param name="sourcePosition">The origin of the distance query.</param>
      <param name="hit">Holds the properties of the resulting location.</param>
      <param name="areaMask">A bitfield mask specifying which NavMesh areas can be passed when finding the nearest edge.</param>
      <returns>True if a nearest edge is found.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.FindClosestEdge(UnityEngine.Vector3,UnityEngine.AI.NavMeshHit@,UnityEngine.AI.NavMeshQueryFilter)">
      <summary>
        <para>Locate the closest NavMesh edge from a point on the NavMesh, subject to the constraints of the filter argument.</para>
        <para>The returned NavMeshHit object contains the position and details of the nearest point on the nearest edge of the NavMesh. This can be used to query how much extra space there is around the agent.</para>
      </summary>
      <param name="sourcePosition">The origin of the distance query.</param>
      <param name="hit">Holds the properties of the resulting location.</param>
      <param name="filter">A filter specifying which NavMesh areas can be passed when finding the nearest edge.</param>
      <returns>True if a nearest edge is found.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.GetAreaCost(System.Int32)">
      <summary>
        <para>Gets the cost for path finding over geometry of the area type.</para>
        <para>The value applies to all agents unless you the value has been customized per agent by calling <see cref="UnityEngine.AI.NavMeshAgent.SetAreaCost"></see>. You can use <see cref="UnityEngine.AI.NavMesh.GetAreaFromName"></see> to find the area index based on the name of the <see cref="UnityEngine.AI.NavMesh"></see> area type.</para>
      </summary>
      <param name="areaIndex">Index of the area to get.</param>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.GetAreaFromName(System.String)">
      <summary>Returns the area index for a named NavMesh area type.</summary>
      <param name="areaName">Name of the area to look up.</param>
      <returns>Index if the specified are, or -1 if no area found.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.GetSettingsByID(System.Int32)">
      <summary>
        <para>Returns an existing entry of NavMesh build settings.</para>
        <para>If no previously-created settings match the provided agent type ID, the returned <see cref="UnityEngine.AI.NavMeshBuildSettings"></see> struct will have the agentTypeID set to -1. Note: A default entry will always exist for the agentTypeID being 0.</para>
      </summary>
      <param name="agentTypeID">The ID to look for.</param>
      <returns>The settings found.</returns>
      <seealso cref="T:UnityEngine.AI.NavMeshBuildSettings">
      </seealso>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.GetSettingsByIndex(System.Int32)">
      <summary>
        <para>Returns an existing entry of NavMesh build settings by its ordered index.</para>
        <para>If the index is outside the valid range (0, GetSettingsCount-1), the returned NavMeshBuildSettings struct will have the agentTypeID set to -1.</para>
      </summary>
      <param name="index">The index to retrieve from.</param>
      <returns>The found settings.</returns>
      <seealso cref="T:UnityEngine.AI.NavMeshBuildSettings">
      </seealso>
      <seealso cref="M:UnityEngine.AI.NavMesh.GetSettingsCount">
      </seealso>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.GetSettingsCount">
      <summary>
        <para>Returns the number of registered NavMesh build settings.</para>
        <para>This will always be at least one available, namely the default setting.</para>
      </summary>
      <returns>The number of registered entries.</returns>
      <seealso cref="T:UnityEngine.AI.NavMeshBuildSettings">
      </seealso>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.GetSettingsNameFromID(System.Int32)">
      <summary>
        <para>Returns the name associated with the NavMesh build settings matching the provided agent type ID.</para>
        <para>If no settings are found the result is an empty string.</para>
      </summary>
      <param name="agentTypeID">The ID to look for.</param>
      <returns>The name associated with the ID found.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMeshBuilder.Cancel(UnityEngine.AI.NavMeshData)">
      <summary>Cancels an asynchronous update of the specified NavMesh data.</summary>
      <param name="data">The data associated with asynchronous updating.</param>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.AI.NavMeshHit@,System.Int32)">
      <summary>
        <para>Trace a line between two points on the NavMesh.</para>
        <para>The source and destination points are first mapped on the NavMesh, then a ray is traced from the source point towards the target. If the ray hits a NavMesh boundary, the function returns true and the hit data is filled. If the path from the source to target is unobstructed, the function returns false. If the raycast terminates on an outer edge, <c>hit.mask</c> is 0; otherwise it contains the area mask of the blocking polygon. This function can be used to check if an agent can walk unobstructed between two points on the NavMesh. For example if you character has an evasive dodge move which needs space, you can shoot a ray from the characters location to multiple directions to find a spot where the character can dodge to. The <see cref="UnityEngine.AI.NavMesh.Raycast"></see> is different from physics ray cast because it works on “2.5D”, on the NavMesh. The difference to physics raycast is that the NavMesh version can detect all kind of navigation obstructions, such as holes in the ground, and it can also climb up slopes, if the area is navigable.</para>
        <para>If you are looking for to find the nearest point on the <see cref="UnityEngine.AI.NavMesh"></see> you should use physics raycast to find a point in the world, see Move to Click Point example.</para>
      </summary>
      <param name="sourcePosition">The origin of the ray.</param>
      <param name="targetPosition">The end of the ray.</param>
      <param name="hit">Holds the properties of the ray cast resulting location.</param>
      <param name="areaMask">A bitfield mask specifying which NavMesh areas can be passed when tracing the ray.</param>
      <returns>True if the ray is terminated before reaching target position. Otherwise returns false.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.AI.NavMeshHit@,UnityEngine.AI.NavMeshQueryFilter)">
      <summary>
        <para>Traces a line between two positions on the NavMesh, subject to the constraints defined by the filter argument.</para>
        <para>The line is terminated on outer edges or a non-passable area.</para>
      </summary>
      <param name="sourcePosition">The origin of the ray.</param>
      <param name="targetPosition">The end of the ray.</param>
      <param name="hit">Holds the properties of the ray cast resulting location.</param>
      <param name="filter">A filter specifying which NavMesh areas can be passed when tracing the ray.</param>
      <returns>True if the ray is terminated before reaching target position. Otherwise returns false.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.RemoveLink(UnityEngine.AI.NavMeshLinkInstance)">
      <summary>
        <para>Removes a link from the NavMesh.</para>
        <para>Use the instance returned by <see cref="UnityEngine.AI.NavMesh.AddLink"></see> to remove the corresponding link.</para>
      </summary>
      <param name="handle">The instance of a link to remove.</param>
      <seealso cref="M:UnityEngine.AI.NavMeshLinkInstance.Remove">
      </seealso>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.RemoveNavMeshData(UnityEngine.AI.NavMeshDataInstance)">
      <summary>
        <para>Removes the specified <see cref="UnityEngine.AI.NavMeshDataInstance"></see> from the game, making it unavailable for agents and queries.</para>
        <para>Use the instance returned by <see cref="UnityEngine.AI.NavMesh.AddNavMeshData"></see> to remove the corresponding NavMesh data.</para>
      </summary>
      <param name="handle">The instance of a NavMesh to remove.</param>
      <seealso cref="M:UnityEngine.AI.NavMeshDataInstance.Remove">
      </seealso>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.RemoveSettings(System.Int32)">
      <summary>
        <para>Removes the build settings matching the agent type ID.</para>
        <para>If no matching settings are found or the agentTypeID is the default value 0, nothing is removed.</para>
      </summary>
      <param name="agentTypeID">The ID of the entry to remove.</param>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.SamplePosition(UnityEngine.Vector3,UnityEngine.AI.NavMeshHit@,System.Single,System.Int32)">
      <summary>
        <para>Finds the closest point on NavMesh within specified range.</para>
        <para>The function samples the NavMesh to find the closest point on the NavMesh. The closest point is returned based on distance to the query point. The function does not check for obstruction in the world. For example, you the sourcePosition is on the ceiling, a point on the second floor will be returned (if there is NavMesh there), instead of floor position on the first floor. The function can get quite expensive if the search radius is really big. A good starting point for the maxDistance is 2 times the agent height. If you are trying to find a random point on the NavMesh, it is better to use recommended radius and do try multiple times instead of using one very large radius.</para>
      </summary>
      <param name="sourcePosition">The origin of the sample query.</param>
      <param name="hit">Holds the properties of the resulting location.</param>
      <param name="maxDistance">Sample within this distance from sourcePosition.</param>
      <param name="areaMask">A mask specifying which NavMesh areas are allowed when finding the nearest point.</param>
      <returns>True if a nearest point is found.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.SamplePosition(UnityEngine.Vector3,UnityEngine.AI.NavMeshHit@,System.Single,UnityEngine.AI.NavMeshQueryFilter)">
      <summary>
        <para>Samples the position closest to sourcePosition - on any NavMesh built for the agent type specified by the filter.</para>
        <para>Consider only positions on areas defined in the <see cref="UnityEngine.AI.NavMeshQueryFilter.areaMask"></see>. A maximum search radius is set by maxDistance. The information of any found position is returned in the hit argument.</para>
      </summary>
      <param name="sourcePosition">The origin of the sample query.</param>
      <param name="hit">Holds the properties of the resulting location.</param>
      <param name="maxDistance">Sample within this distance from sourcePosition.</param>
      <param name="filter">A filter specifying which NavMesh areas are allowed when finding the nearest point.</param>
      <returns>True if a nearest point is found.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.SetAreaCost(System.Int32,System.Single)">
      <summary>
        <para>Sets the cost for finding path over geometry of the area type on all agents.</para>
        <para>This will replace any custom area costs on all agents, and set the default cost for new agents that are created after calling the function. The cost must be larger than 1.0. You can use <see cref="UnityEngine.AI.NavMesh.GetAreaFromName"></see> to find the area index based on the name of the NavMesh area type.</para>
      </summary>
      <param name="areaIndex">Index of the area to set.</param>
      <param name="cost">New cost.</param>
    </member>
    <member name="P:UnityEngine.AI.NavMeshLinkData.agentTypeID">
      <summary>Specifies which agent type this link is available for.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshLinkData.area">
      <summary>Area type of the link.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshLinkData.bidirectional">
      <summary>If true, the link can be traversed in both directions, otherwise only from start to end position.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshLinkData.costModifier">
      <summary>
        <para>If positive, overrides the pathfinder cost to traverse the link.</para>
        <para>When searching for a path this cost multiplies the Euclidean distance between the link end points when scoring the link. If the value is negative, the default cost based on area type is used. The value must be &gt;= 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshLinkData.endPosition">
      <summary>
        <para>End position of the link.</para>
        <para>If the <see cref="UnityEngine.AI.NavMeshLinkData.width"></see> is positive, this position specifies the midpoint of the ending edge.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshLinkData.startPosition">
      <summary>
        <para>Start position of the link.</para>
        <para>If the <see cref="UnityEngine.AI.NavMeshLinkData.width"></see> is positive, this position specifies the midpoint of the starting edge.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshLinkData.width">
      <summary>
        <para>If positive, the link will be rectangle aligned along the line from start to end.</para>
        <para>This allows paths to enter the link at any location along the end sides. If not positive, the link endpoints will be represented as points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshData.position">
      <summary>
        <para>Gets or sets the world space position of the NavMesh data.</para>
        <para>The default value is zero - that is, the world space origin.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshData.rotation">
      <summary>
        <para>Gets or sets the orientation of the NavMesh data.</para>
        <para>The default value is <see cref="UnityEngine.Quaternion.identity"></see> - that is, the NavMesh up axis is the same as the world space y-axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshData.sourceBounds">
      <summary>
        <para>Returns the bounding volume of the input geometry used to build this NavMesh (Read Only).</para>
        <para>If the NavMesh data has not been built, the bounds will have zero values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.SetPath(UnityEngine.AI.NavMeshPath)">
      <summary>
        <para>Assign a new path to this agent.</para>
        <para>If the path is succesfully assigned the agent will resume movement toward the new target. If the path cannot be assigned the path will be cleared (see <see cref="UnityEngine.AI.NavMeshAgent.ResetPath"></see>).</para>
      </summary>
      <param name="path">New path to follow.</param>
      <returns>True if the path is succesfully assigned.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.Warp(UnityEngine.Vector3)">
      <summary>
        <para>Warps agent to the provided position.</para>
        <para>Returns true if successful, otherwise returns false.</para>
      </summary>
      <param name="newPosition">New position to warp the agent to.</param>
      <returns>True if agent is successfully warped, otherwise false.</returns>
    </member>
    <member name="F:UnityEngine.AI.NavMesh.AllAreas">
      <summary>
        <para>Area mask constant that includes all NavMesh areas.</para>
        <para>The mask can be used in query functions, such as <see cref="UnityEngine.AI.NavMesh.Raycast"></see>, to indicate that all NavMesh area types are accepted.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMesh.avoidancePredictionTime">
      <summary>
        <para>Describes how far in the future the agents predict collisions for avoidance.</para>
        <para>The larger the value, the earlier the agents will start to avoid each other if they are on collision course. The value is measured in seconds. Default value is 2.0, a good range for tuning is between 0.5 and 5.0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AI.NavMesh.onPreUpdate">
      <summary>
        <para>Set a function to be called before the NavMesh is updated during the frame update execution.</para>
        <para>This lets you set a delegate function to be called every frame, right before the NavMesh system gets updated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshDataInstance.owner">
      <summary>
        <para>Get or set the owning Object.</para>
        <para>If the instance is invalid: setting the owner has no effect and getting it will return null.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMesh.pathfindingIterationsPerFrame">
      <summary>
        <para>The maximum amount of nodes processed each frame in the asynchronous pathfinding process.</para>
        <para>The pathfinder expands only a certain amount of nodes (NavMesh polygons) each frame while doing path finding. This allows the game to run smoothly without hiccups when long paths or large number of request are being processed at the same time, the flip side is that it can take number of frames for a path request to complete. The iteration count only affects asyncronous pathfinding which used when setting NavMesh Agent destination using <see cref="UnityEngine.AI.NavMeshAgent.SetDestination"></see> or <see cref="UnityEngine.AI.NavMeshAgent.destination"></see>. Increasing this value will cause the paths to be processed faster, but can cause some hiccups in frame rate. Default value is 100, a good range for tuning is between 50 and 500.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshDataInstance.valid">
      <summary>True if the NavMesh data is added to the navigation system - otherwise false (Read Only).</summary>
    </member>
    <member name="M:UnityEngine.AI.NavMeshDataInstance.Remove">
      <summary>
        <para>Removes this instance from the NavMesh system.</para>
        <para>An identical but convenient alternative to calling <see cref="UnityEngine.AI.NavMesh.RemoveNavMeshData"></see>. If the instance is not valid, e.g. has been removed before, the call has no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshHit.distance">
      <summary>Distance to the point of hit.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshHit.hit">
      <summary>Flag set when hit.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshHit.mask">
      <summary>Mask specifying NavMesh area at point of hit.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshHit.normal">
      <summary>Normal at the point of hit.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshHit.position">
      <summary>Position of hit.</summary>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.AddLink(UnityEngine.AI.NavMeshLinkData)">
      <summary>
        <para>Adds a link to the NavMesh. The link is described by the NavMeshLinkData struct.</para>
        <para>Returns an instance for the added link. The returned instance is valid if the link was successfully added. The instance can be used to later remove the link using RemoveLink(). Note: If the area is set to Not Walkable, or if adding a link would exceed the maximum number of active links (65535) the link will fail to be added – and the valid property will be false.</para>
      </summary>
      <param name="link">Describing the properties of the link.</param>
      <returns>Representing the added link.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.AddLink(UnityEngine.AI.NavMeshLinkData,UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Adds a link to the NavMesh. The link is described by the NavMeshLinkData struct.</para>
        <para>Returns an instance for the added link. This function is similar to AddLink above, but the position and rotation specified is applied to the start and end positions of the link. The rotation also specifies the local up-axis of the link.</para>
      </summary>
      <param name="link">Describing the properties of the link.</param>
      <param name="position">Translate the link to this position.</param>
      <param name="rotation">Rotate the link to this orientation.</param>
      <returns>Representing the added link.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.AddNavMeshData(UnityEngine.AI.NavMeshData)">
      <summary>
        <para>Adds the specified NavMeshData to the game.</para>
        <para>This makes the NavMesh data available for agents and NavMesh queries. Returns an instance for later removing the NavMesh data from the runtime. The instance returned will be valid unless the NavMesh data could not be added - e.g. due to running out of memory or navmesh data being loaded from a corrupted file.</para>
      </summary>
      <param name="navMeshData">Contains the data for the navmesh.</param>
      <returns>Representing the added navmesh.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.AddNavMeshData(UnityEngine.AI.NavMeshData,UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Adds the specified NavMeshData to the game.</para>
        <para>This function is similar to <see cref="UnityEngine.AI.NavMesh.AddNavMeshData"></see> above, but the position and rotation specified is applied in addition to the position and rotation where the NavMesh data was baked.</para>
      </summary>
      <param name="navMeshData">Contains the data for the navmesh.</param>
      <param name="position">Translate the navmesh to this position.</param>
      <param name="rotation">Rotate the navmesh to this orientation.</param>
      <returns>Representing the added navmesh.</returns>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.agentClimb">
      <summary>
        <para>The maximum vertical step size an agent can take.</para>
        <para>Must be less than agent height. This parameter is used to detect sharp discontinuities in the level (i.e. stairs, steps), and allow the agent to pass them.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.agentHeight">
      <summary>
        <para>The height of the agent for baking in world units.</para>
        <para>NavMesh will be removed from areas with a ceiling lower than this height. The build process does some quantization, so make sure that spaces you intend to be walkable have some extra head room.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.agentRadius">
      <summary>
        <para>The radius of the agent for baking in world units.</para>
        <para>The resulting NavMesh will be shrunk by this radius to make sure that agents do not clip to walls when close to obstacles, in some scenarios it can be useful to reduce this radius.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.agentSlope">
      <summary>
        <para>The maximum slope angle which is walkable (angle in degrees).</para>
        <para>The valid range is 0–60 degrees. Steep slopes will be excluded from the resulting NavMesh. Please note that setting the slope higher than 45 can give artifacts due to the voxelization process - i.e. a steep slope cannot be distinguished from a wall.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.agentTypeID">
      <summary>
        <para>The agent type ID the NavMesh will be baked for.</para>
        <para>Each <see cref="UnityEngine.AI.NavMeshAgent"></see> or <see cref="UnityEngine.AI.NavMeshQueryFilter"></see> can only use a NavMesh which is build for its agent type; it is the ID that is matched.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.debug">
      <summary>Options for collecting debug data during the build process.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.minRegionArea">
      <summary>
        <para>The approximate minimum area of individual NavMesh regions.</para>
        <para>This property allows you to cull away small non-connected NavMesh regions. NavMesh regions whose surface area is smaller than the specified value, will be removed. Note: some regions may not get removed. The NavMesh is built in parallel as a grid of tiles. If a region straddles a tile boundary, the region is not removed. The reason for this is that the region pruning happens at a stage in the build process where surrounding tiles are not available.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.overrideTileSize">
      <summary>Enables overriding the default tile size.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.overrideVoxelSize">
      <summary>Enables overriding the default voxel size.</summary>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.CalculatePath(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,UnityEngine.AI.NavMeshPath)">
      <summary>
        <para>Calculate a path between two points and store the resulting path.</para>
        <para>This function can be used to plan a path ahead of time to avoid a delay in gameplay when the path is needed. Another use is to check if a target position is reachable before moving the agent. In contrast to <see cref="UnityEngine.AI.NavMeshAgent.SetDestination"></see>, which is asyncronous call, this function calculates the path immeditely. This can be costly operation for very long paths and can cause hiccup in the frame rate. It is recommended to do only a few path finds per frame, for example when evaluating distances to cover points. The returned path can be used to set the path for an agent using <see cref="UnityEngine.AI.NavMeshAgent.SetPath"></see>. The agent needs to be close the starting point for the set path to work.</para>
      </summary>
      <param name="sourcePosition">The initial position of the path requested.</param>
      <param name="targetPosition">The final position of the path requested.</param>
      <param name="areaMask">A bitfield mask specifying which NavMesh areas can be passed when calculating a path.</param>
      <param name="path">The resulting path.</param>
      <returns>True if a either a complete or partial path is found and false otherwise.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.CalculatePath(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.AI.NavMeshQueryFilter,UnityEngine.AI.NavMeshPath)">
      <summary>Calculates a path between two positions mapped to the NavMesh, subject to the constraints and costs defined by the filter argument.</summary>
      <param name="sourcePosition">The initial position of the path requested.</param>
      <param name="targetPosition">The final position of the path requested.</param>
      <param name="filter">A filter specifying the cost of NavMesh areas that can be passed when calculating a path.</param>
      <param name="path">The resulting path.</param>
      <returns>True if a either a complete or partial path is found and false otherwise.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMesh.CalculateTriangulation">
      <summary>
        <para>Calculates triangulation of the current navmesh.</para>
        <para>Calculates and returns a simple triangulation of the current navmesh - containing the vertices, triangle indices and navmesh layers. The returned mesh contains only the triangles used for pathfinding. It does not contain the detail that is used to place the agents on the walkable surface. This can be noticeable on locations with curved surfaces.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.tileSize">
      <summary>
        <para>Sets the tile size in voxel units.</para>
        <para>The NavMesh is built in square tiles in order to build the mesh in parallel and to control maximum memory usage. It also helps to make the carving changes more local. If you plan to update NavMesh at runtime, a good tile size is around 32–128 voxels (roughly 5 to 20 meters for human size characters). 64 is good value to start, and you can use the profiler window to find a good trade off. Default value is 256, which is good for static baking. If you use a lot of carving obstacles you can try a smaller size if you see in the profiler that a lot of time is being spent on carving. The tile size is specified in units of voxels per tile side length. Note: if you want to use this setting, you must also set <see cref="UnityEngine.AI.NavMeshBuildSettings.overrideTileSize"></see> to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSettings.voxelSize">
      <summary>
        <para>Sets the voxel size in world length units.</para>
        <para>The NavMesh is built by first voxelizing the scene, and then figuring out walkable spaces from the voxelized representation of the scene. The voxel size controls how closely the NavMesh fits the geometry of your scene, and is defined in world units. If you require a more detail so that the NavMesh more closely fits your Scene’s geometry, you can reduce the voxel size. An increase in detail will also cause your game to consume more memory and take more time to calculate the NavMesh data. The scaling is roughly quadratic, so doubling the resolution will result in an approximate quadrupling of the build time. In general you should aim to have 4-6 voxels per character diameter. For example, if you have a Scene with characters that have a radius of 0.3, a good voxel size is 0.1. The default value is set to a third of the agentRadius. Note: If you want to use this setting, you must also set <see cref="UnityEngine.AI.NavMeshBuildSettings.overrideVoxelSize"></see> to true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AI.NavMeshBuildSettings.ValidationReport(UnityEngine.Bounds)">
      <summary>
        <para>Validates the properties of NavMeshBuildSettings.</para>
        <para>Returns a string of violated constraints. - and suggestions for changes for the current values in the build settings and the provided bounds for building the NavMesh. An empty array is returned if all internal constraints are satisfied. Some of the settings which you can specify in the <see cref="UnityEngine.AI.NavMeshBuildSettings"></see> struct are coupled to each other, meaning there are constraints on the values based on other values. For example, it’s not valid for <see cref="UnityEngine.AI.NavMeshBuildSettings.agentClimb"></see> to be larger than <see cref="UnityEngine.AI.NavMeshBuildSettings.agentHeight"></see>. Another invalid case is when the vertical size of the buildBounds exceeds the height of 65535 voxel units. You can use this function to check if the values in <see cref="UnityEngine.AI.NavMeshBuildSettings"></see> violate any of the constraints, before starting the NavMesh building process. Ignoring the violated constraints might give unexpected results when building a NavMesh, but will still produce a NavMesh.</para>
      </summary>
      <param name="buildBounds">Describes the volume to build NavMesh for.</param>
      <returns>The list of violated constraints.</returns>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSource.area">
      <summary>Describes the area type of the NavMesh surface for this object.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSource.component">
      <summary>
        <para>Points to the owning component - if available, otherwise null.</para>
        <para>When build sources are obtained using <see cref="UnityEngine.AI.NavMeshBuilder.CollectSources"></see>, this value typically refers to a mesh or collider component - however for shared meshes it will be null.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSource.shape">
      <summary>The type of the shape this source describes.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSource.size">
      <summary>
        <para>Describes the dimensions of the shape.</para>
        <para>Used only for the primitive shapes: Sphere, Capsule, Box. • Sphere: size.x is radius of the sphere. • Box: size is dimensions of the box, the box extends from -size/2 to size/2. • Capsule: size.x is radius of the capsule, size.y is the height of the capsule, the capsules tips extend from -size.y/2 to size.y/2.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildDebugSettings.flags">
      <summary>
        <para>Specify which types of debug data to collect when building the NavMesh.</para>
        <para>Default value is <see cref="UnityEngine.AI.NavMeshBuildDebugFlags.None"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSource.sourceObject">
      <summary>
        <para>Describes the object referenced for Mesh and Terrain types of input sources.</para>
        <para>Used only for the types: <see cref="UnityEngine.Mesh"></see> and <see cref="UnityEngine.TerrainData"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshBuildSource.transform">
      <summary>Describes the local to world transformation matrix of the build source. That is, position and orientation and scale of the shape.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.acceleration">
      <summary>
        <para>The maximum acceleration of an agent as it follows a path, given in units / sec^2.</para>
        <para>An agent does not follow precisely the line segments of the path calculated by the navigation system but rather uses the waypoints along the path as intermediate destinations. This value is the maximum amount by which the agent can accelerate while moving towards the next waypoint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.agentTypeID">
      <summary>
        <para>The type ID for the agent.</para>
        <para>This identifier determines which NavMeshes are available for the Agent to move on. Changing this ID will reset the Agent's current path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.angularSpeed">
      <summary>
        <para>Maximum turning speed in (deg/s) while following a path.</para>
        <para>This is the maximum rate at which the agent can turn as it rounds the "corner" defined by a waypoint. The actual turning circle is also influenced by the speed of the agent on approach and also the maximum acceleration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.areaMask">
      <summary>
        <para>Specifies which NavMesh areas are passable. Changing <c>areaMask</c> will make the path stale (see <see cref="UnityEngine.AI.NavMeshAgent.isPathStale"></see>).</para>
        <para>This is a bitfield.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.autoBraking">
      <summary>
        <para>Should the agent brake automatically to avoid overshooting the destination point?</para>
        <para>If the agent needs to land close to the destination point then it will typically need to brake to avoid overshooting or endless "orbiting" around the target zone. If this property is set to true, the agent will brake automatically as it nears the destination.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.autoRepath">
      <summary>
        <para>Should the agent attempt to acquire a new path if the existing path becomes invalid?</para>
        <para>A new path calculation is also attempted aquired if the agent reaches the end of a partial and stale path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.autoTraverseOffMeshLink">
      <summary>
        <para>Should the agent move across OffMeshLinks automatically?</para>
        <para>Off-mesh links are used to connect disjoint regions of the NavMesh. Usually, a character should be able to pass through or <c>traverse</c> a link automatically, which will happen if this property is set to true. However, it can also be set to false in cases where special control over movement is needed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.avoidancePriority">
      <summary>
        <para>The avoidance priority level.</para>
        <para>When the agent is performing avoidance, agents of lower priority are ignored. The valid range is from 0 to 99 where: Most important = 0. Least important = 99. Default = 50.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.baseOffset">
      <summary>The relative vertical displacement of the owning <see cref="UnityEngine.GameObject"></see>.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.currentOffMeshLinkData">
      <summary>
        <para>The current <see cref="UnityEngine.AI.OffMeshLinkData"></see>.</para>
        <para>In the case that this agent is not on an OffMeshLink the <see cref="UnityEngine.AI.OffMeshLinkData"></see> is marked as invalid.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.desiredVelocity">
      <summary>The desired velocity of the agent including any potential contribution from avoidance. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.destination">
      <summary>
        <para>Gets or attempts to set the destination of the agent in world-space units.</para>
        <para>Getting: Returns the destination set for this agent. • If a destination is set but the path is not yet processed the position returned will be valid navmesh position that's closest to the previously set position. • If the agent has no path or requested path - returns the agents position on the navmesh. • If the agent is not mapped to the navmesh (e.g. scene has no navmesh) - returns a position at infinity. Setting: Requests the agent to move to the valid navmesh position that's closest to the requested destination. • The path result may not become available until after a few frames. Use <see cref="UnityEngine.AI.NavMeshAgent.pathPending"></see> to query for outstanding results. • If it's not possible to find a valid nearby navmesh position (e.g. scene has no navmesh) no path is requested. Use <see cref="UnityEngine.AI.NavMeshAgent.SetDestination"></see> and check return value if you need to handle this case explicitly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.hasPath">
      <summary>
        <para>Does the agent currently have a path? (Read Only)</para>
        <para>This property will be true if the agent has a path calculated to the desired destination and false otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.height">
      <summary>The height of the agent for purposes of passing under obstacles, etc.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.isOnNavMesh">
      <summary>
        <para>Is the agent currently bound to the navmesh? (Read Only)</para>
        <para>This property is true if the agent, for some reason, could not bind to the navmesh. E.g. if scene has no navmesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.isOnOffMeshLink">
      <summary>
        <para>Is the agent currently positioned on an OffMeshLink? (Read Only)</para>
        <para>This property is useful when <see cref="UnityEngine.AI.NavMeshAgent.autoTraverseOffMeshLink"></see> is false and custom movement is needed when crossing the link.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.isPathStale">
      <summary>
        <para>Is the current path stale. (Read Only)</para>
        <para>When true, the path may no longer be valid or optimal. This flag will be set if: there are any changes to the <see cref="UnityEngine.AI.NavMeshAgent.areaMask"></see>, if any <see cref="UnityEngine.AI.OffMeshLink"></see> is enabled or disabled, or if the costs for the NavMeshAreas have been changed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.isStopped">
      <summary>
        <para>This property holds the stop or resume condition of the NavMesh agent.</para>
        <para>If set to True, the NavMesh agent's movement will be stopped along its current path. If set to False after the NavMesh agent has stopped, it will resume moving along its current path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.navMeshOwner">
      <summary>
        <para>Returns the owning object of the NavMesh the agent is currently placed on (Read Only).</para>
        <para>If no owner is set for a NavMesh or link instance the return value is null.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.nextOffMeshLinkData">
      <summary>
        <para>The next <see cref="UnityEngine.AI.OffMeshLinkData"></see> on the current path.</para>
        <para>In the case that the current path does not contain an OffMeshLink the <see cref="UnityEngine.AI.OffMeshLinkData"></see> is marked as invalid.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.nextPosition">
      <summary>
        <para>Gets or sets the simulation position of the navmesh agent.</para>
        <para>The position vector is in world space coordinates and units. The nextPosition is coupled to <see cref="UnityEngine.Transform.position"></see>. In the default case the navmesh agent's Transform position will match the internal simulation position at the time the script Update function is called. This coupling can be turned on and off by setting <see cref="UnityEngine.AI.NavMeshAgent.updatePosition"></see>. When <see cref="UnityEngine.AI.NavMeshAgent.updatePosition"></see> is true, the <see cref="UnityEngine.Transform.position"></see> reflects the simulated position, when false the position of the transform and the navmesh agent is not synchronized, and you'll see a difference between the two in general. When <see cref="UnityEngine.AI.NavMeshAgent.updatePosition"></see> is turned back on, the <see cref="UnityEngine.Transform.position"></see> will be immediately move to match nextPosition. By setting nextPosition you can directly control where the internal agent position should be. The agent will be moved towards the position, but is constrained by the navmesh connectivity and boundaries. As such it will be useful only if the positions are continuously updated and assessed.</para>
        <para>Additionally it can be useful to control the agent position directly - especially if the GO transform is controlled by something else - e.g. animator, physics, scripted or input.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.obstacleAvoidanceType">
      <summary>
        <para>The level of quality of avoidance.</para>
        <para>This property lets you trade off the precision of obstacle avoidance againt the processor load required to achieve it. The exact quality/performance values will depend heavily on the complexity of the scene but as a general rule, faster performance can be achieved at the cost of quality and vice versa.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.path">
      <summary>
        <para>Property to get and set the current path.</para>
        <para>This property can be useful for GUI, debugging and other purposes to get the points of the path calculated by the navigation system. Additionally, a path created from user code can be set for the agent to follow in the usual way. An example of this might be a patrol route designed for coverage rather than optimal distance between two points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.pathPending">
      <summary>Is a path in the process of being computed but not yet ready? (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.pathStatus">
      <summary>The status of the current path (complete, partial or invalid).</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.radius">
      <summary>
        <para>The avoidance radius for the agent.</para>
        <para>This is the agent's "personal space" within which obstacles and other agents should not pass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.remainingDistance">
      <summary>
        <para>The distance between the agent's position and the destination on the current path. (Read Only)</para>
        <para>If the remaining distance is unknown then this will have a value of infinity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.speed">
      <summary>
        <para>Maximum movement speed when following a path.</para>
        <para>An agent will typically need to speed up and slow down as it follows a path (eg, it will slow down to make a tight turn). The speed is often limited by the length of a path segment and the time taken to accelerate and brake, but the speed will not exceed the value set by this property even on a long, straight path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.steeringTarget">
      <summary>
        <para>Get the current steering target along the path. (Read Only)</para>
        <para>This is typically the next corner along the path or the end point of the path. Unless the agent is moving on an <see cref="UnityEngine.AI.OffMeshLink"></see>, there is a straight path between the agent and the steeringTarget. When approaching an <see cref="UnityEngine.AI.OffMeshLink"></see> for traversal - the value is the position where the agent will enter the link. While agent is traversing an <see cref="UnityEngine.AI.OffMeshLink"></see> the value is the position where the agent will leave the link.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.stoppingDistance">
      <summary>
        <para>Stop within this distance from the target position.</para>
        <para>It is seldom possible to land <c>exactly</c> at the target point, so this property can be used to set an acceptable radius within which the agent should stop. A larger stopping distance will give the agent more room for manoeuvre at the end of the path and might avoid sudden braking, turning or other unconvincing AI behaviour.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.updatePosition">
      <summary>
        <para>Gets or sets whether the transform position is synchronized with the simulated agent position. The default value is true.</para>
        <para>When true: changing the transform position will affect the simulated position and vice-versa. When false: the simulated position will not be applied to the transform position and vice-versa. Setting <see cref="UnityEngine.AI.NavMeshAgent.updatePosition"></see> to false can be used to enable explicit control of the transform position via script. This allows you to use the agent's simulated position to drive another component, which in turn sets the transform position (eg. animation with root motion or physics). When enabling the <see cref="UnityEngine.AI.NavMeshAgent.updatePosition"></see> (from previously being disabled), the transform will be moved to the simulated position. This way the agent stays constrained to the navmesh surface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.updateRotation">
      <summary>Should the agent update the transform orientation?</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.updateUpAxis">
      <summary>
        <para>Allows you to specify whether the agent should be aligned to the up-axis of the NavMesh or link that it is placed on.</para>
        <para>When this value is set to true, the agent will always be aligned to the local up-axis of the NavMesh or link that it is currently on. When set to false, the agent’s orientation is unaffected by the orientation of the NavMesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshAgent.velocity">
      <summary>
        <para>Access the current velocity of the <see cref="UnityEngine.AI.NavMeshAgent"></see> component, or set a velocity to control the agent manually.</para>
        <para>Reading the variable will return the current velocity of the agent based on the crowd simulation. Setting the variable will override the simulation (including: moving towards destination, collision avoidance, and acceleration control) and command the NavMesh Agent to move using the specific velocity directly. When the agent is controlled using a velocity, its movement is still constrained on the NavMesh. Setting the velocity directly, can be used for implementing player characters, which are moving on NavMesh and affecting the rest of the simulated crowd. In addition, setting priority to high (a small value is higher priority), will make other simulated agents to avoid the player controlled agent even more eagerly. It is recommended to set the velocity each frame when controlling the agent manually, and if releasing the control to the simulation, set the velocity to zero. If agent’s velocity is set to some value and then stopped updating it, the simulation will pick up from there and the agent will slowly decelerate (assuming no destination is set). Note that reading the velocity will always return value from the simulation. If you set the value, the effect will show up in the next update. Since the returned velocity comes from the simulation (including avoidance and collision handling), it can be different than the one you set. The velocity is specified in distance units per second (same as physics), and represented in global coordinate system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.ActivateCurrentOffMeshLink(System.Boolean)">
      <summary>
        <para>Enables or disables the current off-mesh link.</para>
        <para>This function activates or deactivates the off-mesh link where the agent is currently waiting. This is useful for granting access to newly discovered areas of the game world or simulating the creation or removal of an obstacle to an area.</para>
      </summary>
      <param name="activated">Is the link activated?</param>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.CalculatePath(UnityEngine.Vector3,UnityEngine.AI.NavMeshPath)">
      <summary>
        <para>Calculate a path to a specified point and store the resulting path.</para>
        <para>This function can be used to plan a path ahead of time to avoid a delay in gameplay when the path is needed. Another use is to check if a target position is reachable before moving the agent.</para>
      </summary>
      <param name="targetPosition">The final position of the path requested.</param>
      <param name="path">The resulting path.</param>
      <returns>True if a path is found.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.CompleteOffMeshLink">
      <summary>
        <para>Completes the movement on the current OffMeshLink.</para>
        <para>The agent will move to the closest valid navmesh position on the other end of the current OffMeshLink. CompleteOffMeshLink has no effect unless the agent is on an OffMeshLink. When <see cref="UnityEngine.AI.NavMeshAgent.autoTraverseOffMeshLink"></see> is disabled an agent will pause at an off-mesh link until this function is called. It is useful for implementing custom movement across OffMeshLinks.</para>
      </summary>
      <seealso cref="P:UnityEngine.AI.NavMeshAgent.isOnOffMeshLink">
      </seealso>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.FindClosestEdge(UnityEngine.AI.NavMeshHit@)">
      <summary>
        <para>Locate the closest NavMesh edge.</para>
        <para>The returned <see cref="UnityEngine.AI.NavMeshHit"></see> object contains the position and details of the nearest point on the nearest edge of the Navmesh. Since an edge typically corresponds to a wall or other large object, this could be used to make a character take cover as close to the wall as possible.</para>
      </summary>
      <param name="hit">Holds the properties of the resulting location.</param>
      <returns>True if a nearest edge is found.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.GetAreaCost(System.Int32)">
      <summary>
        <para>Gets the cost for path calculation when crossing area of a particular type.</para>
        <para>The cost of a path is the amount of "difficulty" involved in calculating it - the shortest path may not be the best if it passes over difficult ground, such as mud, snow, etc. Different types of areas are denoted by navmesh areas in Unity. The cost of a particular area is given in cost units per distance unit. Note that the cost of a path applies to the pathfinding only and does not automatically affect the movement speed of the agent when following the path. Indeed, the path's cost may denote other factors such as danger (safe but long path through a minefield) or visibility (long path that keeps a character in the shadows).</para>
      </summary>
      <param name="areaIndex">Area Index.</param>
      <returns>Current cost for specified area index.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.Move(UnityEngine.Vector3)">
      <summary>
        <para>Apply relative movement to current position.</para>
        <para>If the agent has a path it will be adjusted.</para>
      </summary>
      <param name="offset">The relative movement vector.</param>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.Raycast(UnityEngine.Vector3,UnityEngine.AI.NavMeshHit@)">
      <summary>
        <para>Trace a straight path towards a target postion in the NavMesh without moving the agent.</para>
        <para>This function follows the path of a "ray" between the agent's position and the specified target position. If an obstruction is encountered along the line then a true value is returned and the position and other details of the obstructing object are stored in the <c>hit</c> parameter. This can be used to check if there is a clear shot or line of sight between a character and a target object. This function is preferable to the similar <see cref="UnityEngine.Physics.Raycast"></see> because the line tracing is performed in a simpler way using the navmesh and has a lower processing overhead.</para>
      </summary>
      <param name="targetPosition">The desired end position of movement.</param>
      <param name="hit">Properties of the obstacle detected by the ray (if any).</param>
      <returns>True if there is an obstacle between the agent and the target position, otherwise false.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.ResetPath">
      <summary>
        <para>Clears the current path.</para>
        <para>When the path is cleared, the agent will not start looking for a new path until SetDestination is called. Note that if the agent is on an OffMeshLink when this function is called, it will complete the link immediately.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.SamplePathPosition(System.Int32,System.Single,UnityEngine.AI.NavMeshHit@)">
      <summary>
        <para>Sample a position along the current path.</para>
        <para>This function looks ahead a specified distance along the current path. Details of the mesh at that position are then returned in a <see cref="UnityEngine.AI.NavMeshHit"></see> object. This could be used, for example, to check the type of surface that lies ahead before the character gets there - a character could raise his gun above his head if he is about to wade through water, say.</para>
      </summary>
      <param name="areaMask">A bitfield mask specifying which NavMesh areas can be passed when tracing the path.</param>
      <param name="maxDistance">Terminate scanning the path at this distance.</param>
      <param name="hit">Holds the properties of the resulting location.</param>
      <returns>True if terminated before reaching the position at maxDistance, false otherwise.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.SetAreaCost(System.Int32,System.Single)">
      <summary>
        <para>Sets the cost for traversing over areas of the area type.</para>
        <para>If you enable or disable the agent then the cost will be reset to the default layer cost.</para>
      </summary>
      <param name="areaIndex">Area cost.</param>
      <param name="areaCost">New cost for the specified area index.</param>
    </member>
    <member name="M:UnityEngine.AI.NavMeshAgent.SetDestination(UnityEngine.Vector3)">
      <summary>
        <para>Sets or updates the destination thus triggering the calculation for a new path.</para>
        <para>Note that the path may not become available until after a few frames later. While the path is being computed, <see cref="UnityEngine.AI.NavMeshAgent.pathPending"></see> will be true. If a valid path becomes available then the agent will resume movement.</para>
      </summary>
      <param name="target">The target point to navigate to.</param>
      <returns>True if the destination was requested successfully, otherwise false.</returns>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.carveOnlyStationary">
      <summary>
        <para>Should this obstacle be carved when it is constantly moving?</para>
        <para>When this property is enabled, the obstacle will carve a hole only when it is stationary. There will be no hole carved when the object is moving. See <see cref="UnityEngine.AI.NavMeshObstacle.carving"></see> for full description of different carving behaviors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.carving">
      <summary>
        <para>Should this obstacle make a cut-out in the navmesh.</para>
        <para>When enabled, this changes the navmesh by cutting out a hole. The shape of the hole is based on the size and shape set on <see cref="UnityEngine.AI.NavMeshObstacle"></see> and the navmesh bake settings for radius and height. When the obstacle moves, the carved hole will also move but to reduce CPU overhead the hole is only recalculated when necessary. The recalculation logic has two options: 1) carve when stationary, 2) carve when moved. "Carve when stationary" is the default behavior and is used when <see cref="UnityEngine.AI.NavMeshObstacle.carveOnlyStationary"></see> is set to true. The obstacle is treated as moving when it has moved more than the distance set by <see cref="UnityEngine.AI.NavMeshObstacle.carvingMoveThreshold"></see>. At this time, the carved hole is removed. When the obstacle has stopped moving, and has been stationary more than <see cref="UnityEngine.AI.NavMeshObstacle.carvingTimeToStationary"></see> seconds, the obstacles is treated stationary and carving is updated again. While the obstacle is moving, the agents will avoid it using the collision avoidance, but will not plan paths around it. This mode is generally the best choice in terms of performance. It is good match when the game object is controlled by physics (i.e. crates and barrels). "Carve when moved" behavior is used when <see cref="UnityEngine.AI.NavMeshObstacle.carveOnlyStationary"></see> is set to false. In this mode the carved hole is updated when the obstacle has moved more than the distance set by <see cref="UnityEngine.AI.NavMeshObstacle.carvingMoveThreshold"></see>. This mode is well suited for large slowly moving obstacles, for example a tank that is being avoided by infantry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.carvingMoveThreshold">
      <summary>
        <para>Threshold distance for updating a moving carved hole (when carving is enabled).</para>
        <para>If the <see cref="UnityEngine.AI.NavMeshObstacle"></see> has moved a distance shorter than the threshold since last carving then the navmesh will not be updated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.carvingTimeToStationary">
      <summary>
        <para>Time to wait until obstacle is treated as stationary (when carving and carveOnlyStationary are enabled).</para>
        <para>If the <see cref="UnityEngine.AI.NavMeshObstacle"></see> has been moving, and becomes still, We wait <c>carvingTimeToStationary</c> time until the obstacle is treated stationary by the carving system. See <see cref="UnityEngine.AI.NavMeshObstacle.carving"></see> for full description of different carving behaviors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.center">
      <summary>
        <para>The center of the obstacle, measured in the object's local space.</para>
        <para>Note: When a <see cref="UnityEngine.AI.NavMeshObstacle"></see> is created the <see cref="UnityEngine.AI.NavMeshObstacle.center"></see> is set to zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.height">
      <summary>Height of the obstacle's cylinder shape.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.radius">
      <summary>Radius of the obstacle's capsule shape.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.shape">
      <summary>
        <para>The shape of the obstacle.</para>
        <para>Set or get the shape of the <see cref="UnityEngine.AI.NavMeshObstacle"></see>.</para>
        <para>A newly created <see cref="UnityEngine.AI.NavMeshObstacle"></see> has a shape of the <see cref="UnityEngine.AI.NavMeshObstacleShape.Box"></see> shape. The obstacle shapes are listed in <see cref="UnityEngine.AI.NavMeshObstacleShape"></see>.</para>
        <para>Note: When the shape is changed the <see cref="UnityEngine.AI.NavMeshObstacle.center"></see> is set back to zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.size">
      <summary>
        <para>The size of the obstacle, measured in the object's local space.</para>
        <para>The size will be scaled by the transform's scale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshObstacle.velocity">
      <summary>Velocity at which the obstacle moves around the NavMesh.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshLinkInstance.owner">
      <summary>
        <para>Get or set the owning Object.</para>
        <para>If the instance is invalid: setting the owner has no effect and getting it will return null.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshLinkInstance.valid">
      <summary>True if the NavMesh link is added to the navigation system - otherwise false (Read Only).</summary>
    </member>
    <member name="M:UnityEngine.AI.NavMeshLinkInstance.Remove">
      <summary>
        <para>Removes this instance from the game.</para>
        <para>An identical but convenient alternative to calling <see cref="UnityEngine.AI.NavMesh.RemoveLink"></see>. If the instance is not valid, e.g. has been removed before, the call has no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshQueryFilter.agentTypeID">
      <summary>The agent type ID, specifying which navigation meshes to consider for the query functions.</summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshQueryFilter.areaMask">
      <summary>A bitmask representing the traversable area types.</summary>
    </member>
    <member name="M:UnityEngine.AI.NavMeshQueryFilter.GetAreaCost(System.Int32)">
      <summary>
        <para>Returns the area cost multiplier for the given area type for this filter.</para>
        <para>The default value is 1.</para>
      </summary>
      <param name="areaIndex">Index to retreive the cost for.</param>
      <returns>The cost multiplier for the supplied area index.</returns>
    </member>
    <member name="M:UnityEngine.AI.NavMeshQueryFilter.SetAreaCost(System.Int32,System.Single)">
      <summary>
        <para>Sets the pathfinding cost multiplier for this filter for a given area type.</para>
        <para>Calling SetAreaCost the first time on a NavMeshQueryFilter object causes an internal allocation of the maximum 32 cost modifiers.</para>
      </summary>
      <param name="areaIndex">The area index to set the cost for.</param>
      <param name="cost">The cost for the supplied area index.</param>
    </member>
    <member name="F:UnityEngine.AI.NavMeshTriangulation.areas">
      <summary>
        <para>NavMesh area indices for the navmesh triangulation.</para>
        <para>Contains one element for each triangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshTriangulation.indices">
      <summary>
        <para>Triangle indices for the navmesh triangulation.</para>
        <para>Contains 3 integers for each triangle. These integers refer to the vertices array.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AI.NavMeshTriangulation.vertices">
      <summary>
        <para>Vertices for the navmesh triangulation.</para>
        <para>Vertices are referenced by the indices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshPath.corners">
      <summary>
        <para>Corner points of the path. (Read Only)</para>
        <para>Also known as "waypoints", the corners define the places along a path where it changes direction (ie, the path consists of a number of straight-line moves between corners).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AI.NavMeshPath.status">
      <summary>
        <para>Status of the path. (Read Only)</para>
        <para>This reports whether the path reaches to the target, partway to the target or is completely invalid.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AI.NavMeshPath.ClearCorners">
      <summary>Erase all corner points from path.</summary>
    </member>
    <member name="M:UnityEngine.AI.NavMeshPath.GetCornersNonAlloc(UnityEngine.Vector3[])">
      <summary>
        <para>Calculate the corners for the path.</para>
        <para>This function is similar to the <see cref="UnityEngine.AI.NavMeshPath.corners"></see> property except that the results are returned in the supplied array. Note that this function expects the supplied array to have at least 2 elements.</para>
      </summary>
      <param name="results">Array to store path corners.</param>
      <returns>The number of corners along the path - including start and end points.</returns>
    </member>
  </members>
</doc>