<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.Networking</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.Networking.Channels">
      <summary>Class containing constants for default network channels.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientScene">
      <summary>
        <para>A client manager which contains static client information and functions.</para>
        <para>This manager contains references to tracked static local objects such as spawner registrations. It also has the default message handlers used by clients when they registered none themselves. The manager handles adding/removing player objects to the game after a client connection has been set as ready. The ClientScene is a singleton, and it has static convenience methods such as ClientScene.Ready(). The ClientScene is used by the NetworkManager, but it can be used by itself. As the ClientScene manages player objects on the client, it is where clients request to add players. The NetworkManager does this via the ClientScene automatically when auto-add-players is set, but it can be done through code using the function ClientScene.AddPlayer(). This sends an AddPlayer message to the server and will cause a player object to be created for this client. Like NetworkServer, the ClientScene understands the concept of the local client. The function ClientScene.ConnectLocalServer() is used to become a host by starting a local client (when a server is already running).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.LogFilter">
      <summary>FilterLog is a utility class that controls the level of logging generated by UNET clients and servers.</summary>
    </member>
    <member name="T:UnityEngine.Networking.LogFilter.FilterLevel">
      <summary>Control how verbose the network log messages are.</summary>
    </member>
    <member name="T:UnityEngine.Networking.MessageBase">
      <summary>
        <para>Network message classes should be derived from this class. These message classes can then be sent using the various Send functions of NetworkConnection, NetworkClient and NetworkServer.</para>
        <para>Public data fields of classes derived from MessageBase will be automatically serialized with the class. The virtual methods Serialize and Deserialize may be implemented by developers for precise control, but if they are not implemented, then implementations will be generated for them. Note : Unity uses its own network serialization system. It doesn't support the [NonSerialized] attribute. Instead, use private variables. In the example below, the methods have implementations, but if those methods were not implemented, the message would still be usable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.MsgType">
      <summary>Container class for networking system built-in message types.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkAnimator">
      <summary>
        <para>A component to synchronize Mecanim animation states for networked objects.</para>
        <para>The animation of game objects can be networked by this component. There are two models of authority for networked movement: If the object has authority on the client, then it should animated locally on the owning client. The animation state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects. If the object has authority on the server, then it should be animated on the server and state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit. The NetworkAnimator synchronizes the animation parameters that are checked in the inspector view. It does not automatically sychronize triggers. The function SetTrigger can by used by an object with authority to fire an animation trigger on other clients.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBehaviour">
      <summary>
        <para>Base class which should be inherited by scripts which contain networking functionality.</para>
        <para>This is a MonoBehaviour class so scripts which need to use the networking feature should inherit this class instead of MonoBehaviour. It allows you to invoke networked actions, receive various callbacks, and automatically synchronize state from server-to-client. The NetworkBehaviour component requires a NetworkIdentity on the game object. There can be multiple NetworkBehaviours on a single game object. For an object with sub-components in a hierarchy, the NetworkIdentity must be on the root object, and NetworkBehaviour scripts must also be on the root object. Some of the built-in components of the networking system are derived from NetworkBehaviour, including NetworkTransport, NetworkAnimator and NetworkProximityChecker.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBroadcastResult">
      <summary>A structure that contains data from a NetworkDiscovery server broadcast.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkClient">
      <summary>
        <para>This is a network client class used by the networking system. It contains a NetworkConnection that is used to connection to a network server.</para>
        <para>The NetworkClient handle connection state, messages handlers, and connection configuration. There can be many NetworkClient instances in a process at a time, but only one that is connected to a game server (NetworkServer) that uses spawned objects. NetworkClient has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server. The NetworkManager has a NetworkClient instance that it uses for games that it starts, but the NetworkClient may be used by itself.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkConnection">
      <summary>
        <para>A High level network connection. This is used for connections from client-to-server and for connection from server-to-client.</para>
        <para>A NetworkConnection corresponds to a specific connection for a host in the transport layer. It has a connectionId that is assigned by the transport layer and passed to the Initialize function. A NetworkClient has one NetworkConnection. A NetworkServerSimple manages multiple NetworkConnections. The NetworkServer has multiple "remote" connections and a "local" connection for the local client. The NetworkConnection class provides message sending and handling facilities. For sending data over a network, there are methods to send message objects, byte arrays, and NetworkWriter objects. To handle data arriving from the network, handler functions can be registered for message Ids, byte arrays can be processed by HandleBytes(), and NetworkReader object can be processed by HandleReader(). NetworkConnection objects also act as observers for networked objects. When a connection is an observer of a networked object with a NetworkIdentity, then the object will be visible to corresponding client for the connection, and incremental state changes will be sent to the client. NetworkConnection objects can "own" networked game objects. Owned objects will be destroyed on the server by default when the connection is destroyed. A connection owns the player objects created by its client, and other objects with client-authority assigned to the corresponding client. There are many virtual functions on NetworkConnection that allow its behaviour to be customized. NetworkClient and NetworkServer can both be made to instantiate custom classes derived from NetworkConnection by setting their networkConnectionClass member variable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkConnection.PacketStat">
      <summary>Structure used to track the number and size of packets of each packets type.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkCRC">
      <summary>
        <para>This class holds information about which networked scripts use which QoS channels for updates.</para>
        <para>This channel information is used to ensure that clients and servers are using compatible HLAPI script configurations.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkDiscovery">
      <summary>
        <para>The NetworkDiscovery component allows Unity games to find each other on a local network. It can broadcast presence and listen for broadcasts, and optionally join matching games using the NetworkManager.</para>
        <para>This component can run in server mode (by calling StartAsServer) where it broadcasts to other computers on the local network, or in client mode (by calling StartAsClient) where it listens for broadcasts from a server. This class should be override to receive calls from OnReceivedBroadcast. Note : Do not use void Update() in a class that inherits from NetworkDiscovery. If needed, you must override it and call base.Update() instead.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkHash128">
      <summary>A 128 bit number used to represent assets in a networking context.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkIdentity">
      <summary>
        <para>The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines.</para>
        <para>The NetworkIdentity is used to synchronize information in the object with the network. Only the server should create instances of objects which have NetworkIdentity as otherwise they will not be properly connected to the system. For complex objects with a hierarchy of subcomponents, the NetworkIdentity must be on the root of the hierarchy. It is not supported to have multiple NetworkIdentity components on subcomponents of a hierarchy. NetworkBehaviour scripts require a NetworkIdentity on the game object to be able to function. The NetworkIdentity manages the dirty state of the NetworkBehaviours of the object. When it discovers that NetworkBehaviours are dirty, it causes an update packet to be created and sent to clients. The flow for serialization updates managed by the NetworkIdentity is: * Each NetworkBehaviour has a dirty mask. This mask is available inside OnSerialize as syncVarDirtyBits * Each SyncVar in a NetworkBehaviour script is assigned a bit in the dirty mask. * Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask * Alternatively, calling SetDirtyBit() writes directly to the dirty mask * NetworkIdentity objects are checked on the server as part of it’s update loop * If any NetworkBehaviours on a NetworkIdentity are dirty, then an UpdateVars packet is created for that object * The UpdateVars packet is populated by calling OnSerialize on each NetworkBehaviour on the object * NetworkBehaviours that are NOT dirty write a zero to the packet for their dirty bits * NetworkBehaviours that are dirty write their dirty mask, then the values for the SyncVars that have changed * If OnSerialize returns true for a NetworkBehaviour, the dirty mask is reset for that NetworkBehaviour, so it will not send again until its value changes. * The UpdateVars packet is sent to ready clients that are observing the object On the client: * an UpdateVars packet is received for an object * The OnDeserialize function is called for each NetworkBehaviour script on the object * Each NetworkBehaviour script on the object reads a dirty mask. * If the dirty mask for a NetworkBehaviour is zero, the OnDeserialize functions returns without reading any more * If the dirty mask is non-zero value, then the OnDeserialize function reads the values for the SyncVars that correspond to the dirty bits that are set * If there are SyncVar hook functions, those are invoked with the value read from the stream.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkInstanceId">
      <summary>This is used to identify networked objects across all participants of a network. It is assigned at runtime by the server when an object is spawned.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkLobbyManager">
      <summary>
        <para>This is a specialized NetworkManager that includes a networked lobby.</para>
        <para>The lobby has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkLobbyPlayer component be on the lobby player objects. NetworkLobbyManager is derived from NetworkManager, and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkLobbyManager, there are new virtual functions on the NetworkLobbyManager that begin with "OnLobby". These should be used on classes derived from NetworkLobbyManager instead of the virtual functions on NetworkManager. The OnLobby*() functions have empty implementations on the NetworkLobbyManager base class, so the base class functions do not have to be called.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkLobbyPlayer">
      <summary>
        <para>This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system.</para>
        <para>The LobbyPrefab object of the NetworkLobbyManager must have this component on it. This component holds basic lobby player data required for the lobby to function. Game specific data for lobby players can be put in other components on the LobbyPrefab or in scripts derived from NetworkLobbyPlayer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkManager">
      <summary>
        <para>The NetworkManager is a convenience class for the HLAPI for managing networking systems.</para>
        <para>For simple network applications the NetworkManager can be used to control the HLAPI. It provides simple ways to start and stop client and servers, to manage scenes, and has virtual functions that user code can use to implement handlers for network events. The NetworkManager deals with one client at a time. The example below shows a minimal network setup.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkManagerHUD">
      <summary>
        <para>An extension for the NetworkManager that displays a default HUD for controlling the network state of the game.</para>
        <para>This component also shows useful internal state for the networking system in the inspector window of the editor. It allows users to view connections, networked objects, message handlers, and packet statistics. This information can be helpful when debugging networked games.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMessage">
      <summary>The details of a network message received by a client or server on a network connection.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMigrationManager">
      <summary>
        <para>A component that manages the process of a new host taking over a game when the old host is lost. This is referred to as "host migration". The migration manager sends information about each peer in the game to all the clients, and when the host is lost because of a crash or network outage, the clients are able to choose a new host, and continue the game. The old host is able to rejoin the new game on the new host. The state of SyncVars and SyncLists on all objects with NetworkIdentities in the scene is maintained during a host migration. This also applies to custom serialized data for objects. All of the player objects in the game are disabled when the host is lost. Then, when the other clients rejoin the new game on the new host, the corresponding players for those clients are re-enabled on the host, and respawned on the other clients. No player state data is lost during a host migration.</para>
        <para>This class provides a simple default UI for controlling the behaviour when the host is lost. The UI can be disabled with the showGUI property. There are a number of virtual functions that can be implemented to customize the behaviour of host migration. Note that only data that is available to clients will be preserved during a host migration. If there is data that is only on the server, then it will not be available to the client that becomes the new host. This means data on the host that is not in SyncVars or SyncLists will not be available after a host migration. The callback function OnStartServer is invoked for all networked objects when the client becomes a new host. On the new host, the NetworkMigrationManager uses the function NetworkServer.BecomeNewHost() to construct a networked server scene from the state in the current ClientScene. The peers in a game with host migration enabled are identified by their connectionId on the server. When a client reconnects to the new host of a game, this connectionId is passed to the new host so that it can match this client with the client that was connected to the old host. This Id is set on the ClientScene as the "reconnectId". The old host of the game, the one that crashed or lost its network connection, can also reconnect to the new game as a client. This client uses the special ReconnectId of ClientScene.ReconnectIdHost (which is zero).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers">
      <summary>
        <para>The player objects for connections to the old host.</para>
        <para>This is used when clients reconnect to the new host.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo">
      <summary>Information about a player object from another peer.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkProximityChecker">
      <summary>
        <para>Component that controls visibility of networked objects for players.</para>
        <para>Any object with this component on it will not be visible to players more than a (configurable) distance away.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkProximityChecker.CheckMethod">
      <summary>Enumeration of methods to use to check proximity.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkReader">
      <summary>
        <para>General purpose serializer for UNET (for reading byte arrays).</para>
        <para>This class works with NetworkWriter and is used for serializing data for UNet commands, RPC calls, events and low level messages.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSceneId">
      <summary>This is used to identify networked objects in a scene. These values are allocated in the editor and are persistent for the lifetime of the object in the scene.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkServer">
      <summary>
        <para>The NetworkServer uses a NetworkServerSimple for basic network functionality and adds more game-like functionality.</para>
        <para>NetworkServer handles remote connections from remote clients via a NetworkServerSimple instance, and also has a local connection for a local client. The NetworkServer is a singleton. It has static convenience functions such as NetworkServer.SendToAll() and NetworkServer.Spawn() which automatically use the singleton instance. The NetworkManager uses the NetworkServer, but it can be used without the NetworkManager. The set of networked objects that have been spawned is managed by NetworkServer. Objects are spawned with NetworkServer.Spawn() which adds them to this set, and makes them be created on clients. Spawned objects are removed automatically when they are destroyed, or than they can be removed from the spawned set by calling NetworkServer.UnSpawn() - this does not destroy the object. There are a number of internal messages used by NetworkServer, these are setup when NetworkServer.Listen() is called.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkServerSimple">
      <summary>
        <para>The NetworkServerSimple is a basic server class without the "game" related functionality that the NetworkServer class has.</para>
        <para>This class has no scene management, spawning, player objects, observers, or static interface like the NetworkServer class. It is simply a server that listens on a port, manages connections, and handles messages. There can be more than one instance of this class in a process. Like the NetworkServer and NetworkClient classes, it allows the type of NetworkConnection class created for new connections to be specified with SetNetworkConnectionClass(), so custom types of network connections can be used with it. This class can be used by overriding the virtual functions OnConnected, OnDisconnected and OnData; or by registering message handlers.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.AddPlayerMessage">
      <summary>This is passed to handler funtions registered for the AddPlayer built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.EmptyMessage">
      <summary>A utility class to send a network message with no contents.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ErrorMessage">
      <summary>This is passed to handler functions registered for the SYSTEM_ERROR built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.IntegerMessage">
      <summary>A utility class to send simple network messages that only contain an integer.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.NotReadyMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_NOT_READY built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage">
      <summary>
        <para>Information about a change in authority of a non-player in the same network game.</para>
        <para>This information is cached by clients and used during host-migration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerInfoMessage">
      <summary>
        <para>Information about another participant in the same network game.</para>
        <para>This information is cached by clients and used during host-migration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerInfoPlayer">
      <summary>A structure used to identify player object on other peers for host migration.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerListMessage">
      <summary>Internal UNET message for sending information about network peers to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ReadyMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_READY built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ReconnectMessage">
      <summary>This network message is used when a client reconnect to the new host of a game.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_REMOVE_PLAYER built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.StringMessage">
      <summary>
        <para>This is a utility class for simple network messages that contain only a string.</para>
        <para>This example sends a message with the name of the scene.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkStartPosition">
      <summary>
        <para>This component is used to make a gameObject a starting position for spawning player objects in multiplayer games.</para>
        <para>This object's transform will be automatically registered and unregistered with the NetworkManager as a starting position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform">
      <summary>
        <para>A component to synchronize the position and rotation of networked objects.</para>
        <para>The movement of game objects can be networked by this component. There are two models of authority for networked movement: If the object has authority on the client, then it should be controlled locally on the owning client, then movement state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects. If the object has authority on the server, then it should be controlled on the server and movement state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.AxisSyncMode">
      <summary>An axis or set of axis.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.CompressionSyncMode">
      <summary>How much to compress sync data.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.TransformSyncMode">
      <summary>How to synchronize an object's position.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransformChild">
      <summary>
        <para>A component to synchronize the position of child transforms of networked objects.</para>
        <para>There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransformVisualizer">
      <summary>This is a helper component to help understand and debug networked movement synchronization with the NetworkTransform component.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkWriter">
      <summary>General purpose serializer for UNET (for serializing data to byte arrays).</summary>
    </member>
    <member name="T:UnityEngine.Networking.PlayerController">
      <summary>This represents a networked player.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListBool">
      <summary>A list of booleans that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListFloat">
      <summary>A list of floats that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListInt">
      <summary>A list of integers that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListString">
      <summary>This is a list of strings that will be synchronized from the server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListUInt">
      <summary>A list of unsigned integers that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ChannelOption">
      <summary>An enumeration of the options that can be set on a network channel.</summary>
    </member>
    <member name="T:UnityEngine.Networking.PlayerSpawnMethod">
      <summary>Enumeration of methods of where to spawn player objects in multiplayer games.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Version">
      <summary>Enumeration of Networking versions.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients.</para>
        <para>A [Client] method returns immediately if NetworkClient.active is not true, and generates a warning on the console. This attribute can be put on member functions that are meant to be only called on clients. This would redundant for [ClientRPC] functions, as being client-only is already enforced for them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientCallbackAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients, but not generate warnings.</para>
        <para>This custom attribute is the same as the [Client] custom attribute, except that it does not generate a warning in the console if called on a server. This is useful to avoid spamming the console for functions that will be invoked by the engine, such as Update() or physics callbacks.</para>
        <para>This will make the explosion code only run when the trigger is hit on the client.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientRpcAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on clients from a server.</para>
        <para>[ClientRPC] functions are called by code on Unity Multiplayer servers, and then invoked on corresponding GameObjects on clients connected to the server. The arguments to the RPC call are serialized across the network, so that the client function is invoked with the same values as the function on the server. These functions must begin with the prefix "Rpc" and cannot be static.</para>
        <para>The allowed argument types are; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • Arrays of basic types • Structs containing allowable types • NetworkIdentity • NetworkInstanceId • NetworkHash128 • GameObject with a NetworkIdentity component attached.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.CommandAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on the server by sending a command from a client.</para>
        <para>[Command] functions are invoked on the player GameObject associated with a connection. This is set up in response to the "ready" message, by passing the player GameObject to the NetworkServer.PlayerIsReady() function. The arguments to the command call are serialized across the network, so that the server function is invoked with the same values as the function on the client. These functions must begin with the prefix "Cmd" and cannot be static.</para>
        <para>The allowed argument types are; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • Arrays of basic types • Structs containing allowable types • NetworkIdentity • NetworkInstanceId • NetworkHash128 • GameObject with a NetworkIdentity component attached.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSettingsAttribute">
      <summary>This attribute is used to configure the network settings of scripts that are derived from the NetworkBehaviour base class.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ServerAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers.</para>
        <para>A [Server] method returns immediately if NetworkServer.active is not true, and generates a warning on the console. This attribute can be put on member functions that are meant to be only called on server. This would be redundant for [Command] functions, as being server-only is already enforced for them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ServerCallbackAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers, but not generate warnings.</para>
        <para>This custom attribute is the same as the [Server] custom attribute, except that it does not generate a warning in the console if called on a client. This is useful to avoid spamming the console for functions that will be invoked by the engine, such as Update() or physics callbacks.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncEventAttribute">
      <summary>
        <para>This is an attribute that can be put on events in NetworkBehaviour classes to allow them to be invoked on client when the event is called on the sserver.</para>
        <para>[SyncEvent] events are called by user code on UNET servers, and then invoked on corresponding client objects on clients connected to the server. The arguments to the Event call are seriialized across the network, so that the client event is invoked with the same values as the function on the server. These events must begin with the prefix "Event".</para>
        <para>SyncEvents allow networked actions to be propagated to other scripts attached to the object. In the example above, the Other class registers for the TakeDamage event on the DamageClass. When the event happens on the DamageClass on the server, the TakeDamage() method will be invoked on the Other class on the client object. This allows modular network aware systems to be created, that can be extended by new scripts that respond to the events generated by them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncVarAttribute">
      <summary>
        <para>[SyncVar] is an attribute that can be put on member variables of NetworkBehaviour classes. These variables will have their values sychronized from the server to clients in the game that are in the ready state.</para>
        <para>Setting the value of a [SyncVar] marks it as dirty, so it will be sent to clients at the end of the current frame. Only simple values can be marked as [SyncVars]. The type of the SyncVar variable cannot be from an external DLL or assembly.</para>
        <para>The allowed SyncVar types are; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • Structs containing allowable types .</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.TargetRpcAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on clients from a server. Unlike the ClientRpc attribute, these functions are invoked on one individual target client, not all of the ready clients.</para>
        <para>[TargetRpc] functions are called by user code on the server, and then invoked on the corresponding client object on the client of the specified NetworkConnection. The arguments to the RPC call are serialized across the network, so that the client function is invoked with the same values as the function on the server. These functions must begin with the prefix "Target" and cannot be static. The first argument to an TargetRpc function must be a NetworkConnection object.</para>
        <para>The allowed argument types are; • Basic type (byte, int, float, string, UInt64, etc) • Built-in Unity math type (Vector3, Quaternion, etc), • Arrays of basic types • Structs containing allowable types • NetworkIdentity • NetworkInstanceId • NetworkHash128 • GameObject with a NetworkIdentity component attached.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SpawnDelegate">
      <summary>Signature of spawn functions that are passed to NetworkClient.RegisterSpawnFunction(). This is optional, as in most cases RegisterPrefab will be used instead.</summary>
    </member>
    <member name="T:UnityEngine.Networking.UnSpawnDelegate">
      <summary>Delegate for a function which will handle destruction of objects created with NetworkServer.Spawn.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMessageDelegate">
      <summary>The callback delegate used in message handler functions.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption">
      <summary>An enumeration of how to handle scene changes when the connection to the host is lost.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Animation">
      <summary>
        <para>Internal networking system message for sending synchronizing animation state.</para>
        <para>Used by the NetworkAnimation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AnimationParameters">
      <summary>
        <para>Internal networking system message for sending synchronizing animation parameter state.</para>
        <para>Used by the NetworkAnimation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AnimationTrigger">
      <summary>
        <para>Internal networking system message for sending animation triggers.</para>
        <para>Used by the NetworkAnimation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Command">
      <summary>Internal networking system message for sending a command from client to server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Connect">
      <summary>Internal networking system message for communicating a connection has occurred.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.CRC">
      <summary>Internal networking system message for HLAPI CRC checking.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Disconnect">
      <summary>Internal networking system message for communicating a disconnect has occurred,.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Error">
      <summary>Internal networking system message for communicating an error.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Fragment">
      <summary>Internal networking system message for identifying fragmented packets.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Highest">
      <summary>The highest value of built-in networking system message ids. User messages must be above this value.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.InternalHighest">
      <summary>The highest value of internal networking system message ids. User messages must be above this value. User code cannot replace these handlers.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyAddPlayerFailed">
      <summary>Internal networking system message for communicating failing to add lobby player.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyReadyToBegin">
      <summary>Internal networking system message for communicating a player is ready in the lobby.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyReturnToLobby">
      <summary>Internal networking system messages used to return the game to the lobby scene.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbySceneLoaded">
      <summary>Internal networking system message for communicating a lobby player has loaded the game scene.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalChildTransform">
      <summary>Internal networking system message for sending tranforms for client object from client to server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalClientAuthority">
      <summary>Internal networking system message for setting authority to a client for an object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalPlayerTransform">
      <summary>Internal networking system message for sending tranforms from client to server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.NetworkInfo">
      <summary>Internal networking system message for sending information about network peers to clients.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.NotReady">
      <summary>
        <para>Internal networking system message for server to tell clients they are no longer ready.</para>
        <para>Can be used when switching scenes, to stop receiving network traffic during the switch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectDestroy">
      <summary>Internal networking system message for destroying objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectHide">
      <summary>Internal networking system message for hiding objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectSpawn">
      <summary>Internal networking system message for spawning objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectSpawnScene">
      <summary>Internal networking system message for spawning scene objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Owner">
      <summary>Internal networking system message for telling clients they own a player object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.PeerClientAuthority">
      <summary>Internal networking system message for sending information about changes in authority for non-player objects to clients.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Ready">
      <summary>Internal networking system message for clients to tell server they are ready.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ReconnectPlayer">
      <summary>Internal networking system message used when a client connects to the new host of a game.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.RemovePlayer">
      <summary>Internal networking system message for removing a player object which was spawned for a client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Rpc">
      <summary>Internal networking system message for sending a ClientRPC from server to client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Scene">
      <summary>Internal networking system message that tells clients which scene to load when they connect to a server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SpawnFinished">
      <summary>Internal networking system messages used to tell when the initial contents of a scene is being spawned.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SyncEvent">
      <summary>Internal networking system message for sending a SyncEvent from server to client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SyncList">
      <summary>Internal networking system message for sending a USyncList generic list.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.UpdateVars">
      <summary>Internal networking system message for updating SyncVars on a client from a server.</summary>
    </member>
    <member name="M:UnityEngine.Networking.MsgType.MsgTypeToString(System.Int16)">
      <summary>Returns the name of internal message types by their id.</summary>
      <param name="value">A internal message id value.</param>
      <returns>The name of the internal message.</returns>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.currentLogLevel">
      <summary>The current logging level that UNET is running with.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Debug">
      <summary>Setting LogFilter.currentLogLevel to this will enable verbose debug logging.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Error">
      <summary>Setting LogFilter.currentLogLevel to this will error and above messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Info">
      <summary>Setting LogFilter.currentLogLevel to this will log only info and above messages. This is the default level.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logDebug">
      <summary>Checks if debug logging is enabled.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logError">
      <summary>Checks if error logging is enabled.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logInfo">
      <summary>Checks if info level logging is enabled.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logWarn">
      <summary>Checks if wanring level logging is enabled.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Warn">
      <summary>Setting LogFilter.currentLogLevel to this will log wanring and above messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Developer">
      <summary>Show log messages with priority Developer and higher, this it the most verbose setting.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Debug">
      <summary>Show log messages with priority Debug and higher.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Info">
      <summary>Show log messages with priority Info and higher. This is the default setting.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Warn">
      <summary>Show log messages with priority Warning and higher.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Error">
      <summary>Show log messages with priority Error and higher.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Fatal">
      <summary>Show log messages with priority Fatal and higher. this is the least verbose setting.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.SetInScripting">
      <summary>Tells the NetworkManager to not set the filter level on startup.</summary>
    </member>
    <member name="M:UnityEngine.Networking.MessageBase.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.MessageBase.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AddPlayer">
      <summary>
        <para>Internal networking system message for adding player objects to client instances.</para>
        <para>This is sent to the server when a client calls NetworkClient.AddPlayer(). The server should have a handler for this message type to add the player object to the game and notify the client with NetworkServer.AddPlayer().</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.localPlayers">
      <summary>
        <para>A list of all players added to the game.</para>
        <para>These are the players on this client, not all of the players in the game on the server. The client has no explicit knowledge of the player objects of other clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.objects">
      <summary>
        <para>This is a dictionary of networked objects that have been spawned on the client.</para>
        <para>The key of the dictionary is the NetworkIdentity netId of the objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.prefabs">
      <summary>
        <para>This is a dictionary of the prefabs that are registered on the client with ClientScene.RegisterPrefab().</para>
        <para>The key to the dictionary is the prefab asset Id.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.ready">
      <summary>
        <para>Returns true when a client's connection has been set to ready.</para>
        <para>A client that is ready recieves state updates from the server, while a client that is not ready does not. This useful when the state of the game is not normal, such as a scene change or end-of-game. This is read-only. To change the ready state of a client, use ClientScene.Ready(). The server is able to set the ready state of clients using NetworkServer.SetClientReady(), NetworkServer.SetClientNotReady() and NetworkServer.SetAllClientsNotReady(). This is done when changing scenes so that clients don't receive state update messages during scene loading.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.readyConnection">
      <summary>
        <para>The NetworkConnection object that is currently "ready". This is the connection to the server where objects are spawned from.</para>
        <para>This connection can be used to send messages to the server. There can only be one ready connection at a time. There can be multiple NetworkClient instances in existence, each with their own NetworkConnections, but there is only one ClientScene instance and corresponding ready connection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.reconnectId">
      <summary>
        <para>The reconnectId to use when a client reconnects to the new host of a game after the old host was lost.</para>
        <para>This will be ClientScene.ReconnectIdInvalid by default (-1), and will be ClientScene.ReconnectIdHost when the old host is reconnecting to the host of the new game.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ClientScene.ReconnectIdHost">
      <summary>A constant ID used by the old host when it reconnects to the new host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ClientScene.ReconnectIdInvalid">
      <summary>An invalid reconnect Id.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.spawnableObjects">
      <summary>
        <para>This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server.</para>
        <para>The key to the dictionary is the NetworkIdentity sceneId.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client. This is not the global player number.</para>
      </summary>
      <param name="readyConn">The connection to become ready for this client.</param>
      <param name="playerControllerId">The local player ID number.</param>
      <param name="extraMessage">An extra message object that can be passed to the server for this player.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client. This is not the global player number.</para>
      </summary>
      <param name="readyConn">The connection to become ready for this client.</param>
      <param name="playerControllerId">The local player ID number.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(System.Int16)">
      <summary>
        <para>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client. This is not the global player number.</para>
      </summary>
      <param name="playerControllerId">The local player ID number.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.ClearSpawners">
      <summary>This clears the registered spawn prefabs and spawn handler functions for this client.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.ConnectLocalServer">
      <summary>
        <para>Create and connect a local client instance to the local server. This makes the client into a "host" - a client and server in the same process.</para>
        <para>The returned local client acts like normal remote client but internally all messages are routed directly to the server process. Commands from a local client are executed synchronously on the server.</para>
      </summary>
      <returns>A client object for communicating with the local server.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.DestroyAllClientObjects">
      <summary>
        <para>Destroys all networked objects on the client.</para>
        <para>This can be used to clean up when a network connection is closed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.FindLocalObject(UnityEngine.Networking.NetworkInstanceId)">
      <summary>
        <para>This finds the local NetworkIdentity object with the specified network Id.</para>
        <para>NetId is a unique number assigned to all objects with NetworkIdentity components in a game. This number is the same on the server and all connected clients for a particular object, so it can be used to identify objects across the network. The FindLocalObject() function is called on a client to transform a netId received from a server to a local game object.</para>
      </summary>
      <param name="netId">The id of the networked object.</param>
      <returns>The game object that matches the netId.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.Ready(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Signal that the client connection is ready to enter the game.</para>
        <para>This could be for example when a client enters an ongoing game and has finished loading the current scene. The server should respond to the SYSTEM_READY event with an appropriate handler which instantiates the players object for example.</para>
      </summary>
      <param name="conn">The client connection which is ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
        <para>When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
        <para>The optional custom spawn and un-spawn handler functions can be used to implement more advanced spawning strategies such as pbject pools.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject,UnityEngine.Networking.SpawnDelegate,UnityEngine.Networking.UnSpawnDelegate)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
        <para>When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
        <para>The optional custom spawn and un-spawn handler functions can be used to implement more advanced spawning strategies such as pbject pools.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject,UnityEngine.Networking.NetworkHash128)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
        <para>When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
        <para>The optional custom spawn and un-spawn handler functions can be used to implement more advanced spawning strategies such as pbject pools.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
      <param name="newAssetId">An assetId to be assigned to this prefab. This allows a dynamically created game object to be registered for an already known asset Id.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterSpawnHandler(UnityEngine.Networking.NetworkHash128,UnityEngine.Networking.SpawnDelegate,UnityEngine.Networking.UnSpawnDelegate)">
      <summary>
        <para>This is an advanced spawning function that registers a custom assetId with the UNET spawning system.</para>
        <para>This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data.</para>
      </summary>
      <param name="assetId">Custom assetId string.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RemovePlayer(System.Int16)">
      <summary>
        <para>Removes the specified player ID from the game.</para>
        <para>Both the client and the server destroy the player GameObject and remove it from the player list. The playerControllerId is scoped to this client, not global to all players or clients. The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
      <param name="playerControllerId">The local playerControllerId number to be removed.</param>
      <returns>Returns true if the player was successfully destoyed and removed.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.SendReconnectMessage(UnityEngine.Networking.MessageBase)">
      <summary>
        <para>Send a reconnect message to the new host, used during host migration.</para>
        <para>An example usage might be that if you decide to spawn your own player and not use the built in "Auto Create Player" property in the NetworkManager together with HostMigration, you would need to send a reconnect message when your client reconnects. The code below illustrates such an example were we OnClientConnect check if we where disconnected from the host and in that case we send the reconnect message.</para>
      </summary>
      <param name="extraMessage">Any extra data to send.</param>
      <returns>Returns true if the send succeeded.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.SetReconnectId(System.Int32,UnityEngine.Networking.NetworkSystem.PeerInfoMessage[])">
      <summary>Sets the Id that the ClientScene will use when reconnecting to a new host after host migration.</summary>
      <param name="newReconnectId">The Id to use when reconnecting to a game.</param>
      <param name="peers">The set of known peers in the game. This may be null.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.UnregisterPrefab(UnityEngine.GameObject)">
      <summary>Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab.</summary>
      <param name="prefab">The prefab to be removed from registration.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.UnregisterSpawnHandler(UnityEngine.Networking.NetworkHash128)">
      <summary>Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler().</summary>
      <param name="assetId">The assetId for the handler to be removed for.</param>
    </member>
    <member name="F:UnityEngine.Networking.Channels.DefaultReliable">
      <summary>The id of the default reliable channel used by the UNet HLAPI, This channel is used for state updates and spawning.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Channels.DefaultUnreliable">
      <summary>The id of the default unreliable channel used for the UNet HLAPI. This channel is used for movement updates.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.OnDeserialize(UnityEngine.Networking.NetworkReader,System.Boolean)">
      <summary>Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize().</summary>
      <param name="reader">Reader to read from the stream.</param>
      <param name="initialState">True if being sent initial state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.OnSerialize(UnityEngine.Networking.NetworkWriter,System.Boolean)">
      <summary>
        <para>Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize().</para>
        <para>The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame.</para>
      </summary>
      <param name="writer">Writer to use to write to the stream.</param>
      <param name="initialState">If this is being called to send initial state.</param>
      <returns>True if data was written.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.GetNetworkSendInterval">
      <summary>
        <para>This virtual function is used to specify the send interval to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The time in seconds between updates.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeCommand(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>Manually invoke a Command.</summary>
      <param name="cmdHash">Hash of the Command name.</param>
      <param name="reader">Parameters to pass to the command.</param>
      <returns>Returns true if successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeRPC(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>Manually invoke an RPC function.</summary>
      <param name="cmdHash">Hash of the RPC name.</param>
      <param name="reader">Parameters to pass to the RPC function.</param>
      <returns>Returns true if successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeSyncEvent(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>Manually invoke a SyncEvent.</summary>
      <param name="cmdHash">Hash of the SyncEvent name.</param>
      <param name="reader">Parameters to pass to the SyncEvent.</param>
      <returns>Returns true if successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnCheckObserver(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Callback used by the visibility system to determine if an observer (player) can see this object.</para>
        <para>If this function returns true, the network connection will be added as an observer.</para>
      </summary>
      <param name="conn">Network connection of a player.</param>
      <returns>True if the player can see this object.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkAnimator.animator">
      <summary>The animator component to synchronize.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.GetParameterAutoSend(System.Int32)">
      <summary>Gets whether an animation parameter should be auto sent.</summary>
      <param name="index">Index of the parameter in the Animator.</param>
      <returns>True if the parameter should be sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnDeserialize(UnityEngine.Networking.NetworkReader,System.Boolean)">
      <summary>Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize().</summary>
      <param name="reader">Reader to read from the stream.</param>
      <param name="initialState">True if being sent initial state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetParameterAutoSend(System.Int32,System.Boolean)">
      <summary>Sets whether an animation parameter should be auto sent.</summary>
      <param name="index">Index of the parameter in the Animator.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnNetworkDestroy">
      <summary>
        <para>This is invoked on clients when the server has caused this object to be destroyed.</para>
        <para>This can be used as a hook to invoke effects or do client specific cleanup.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetTrigger(System.String)">
      <summary>
        <para>Causes an animation trigger to be invoked for a networked object.</para>
        <para>If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetTrigger(System.Int32)">
      <summary>
        <para>Causes an animation trigger to be invoked for a networked object.</para>
        <para>If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients.</para>
      </summary>
      <param name="hash">Hash id of trigger (from the Animator).</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnSerialize(UnityEngine.Networking.NetworkWriter,System.Boolean)">
      <summary>
        <para>Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize().</para>
        <para>The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame.</para>
      </summary>
      <param name="writer">Writer to use to write to the stream.</param>
      <param name="initialState">If this is being called to send initial state.</param>
      <returns>True if data was written.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnSetLocalVisibility(System.Boolean)">
      <summary>
        <para>Callback used by the visibility system for objects on a host.</para>
        <para>Objects on a host (with a local client) cannot be disabled or destroyed when they are not visibile to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host.</para>
      </summary>
      <param name="vis">New visibility state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartAuthority">
      <summary>
        <para>This is invoked on behaviours that have authority, based on context and <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority"></see>.</para>
        <para>This is called after <see cref="UnityEngine.Networking.NetworkAnimator.OnStartServer"></see> and <see cref="UnityEngine.Networking.NetworkAnimator.OnStartClient"></see>. When <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority"></see> is called on the server, this will be called on the client that owns the object. When an object is spawned with <see cref="UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority"></see>, this will be called on the client that owns the object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartClient">
      <summary>
        <para>Called on every NetworkBehaviour when it is activated on a client.</para>
        <para>Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartLocalPlayer">
      <summary>
        <para>Called when the local player object has been set up.</para>
        <para>This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartServer">
      <summary>
        <para>This is invoked for NetworkBehaviour objects when they become active on the server.</para>
        <para>This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a "host" as well as for object on a dedicated server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStopAuthority">
      <summary>
        <para>This is invoked on behaviours when authority is removed.</para>
        <para>When <see cref="UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority"></see> is called on the server, this will be called on the client that owns the object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.PreStartClient">
      <summary>
        <para>An internal method called on client objects to resolve GameObject references.</para>
        <para>It is not safe to put user code in this function as it may be replaced by the network system's code generation process.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.SetDirtyBit(System.UInt32)">
      <summary>Used to set the behaviour as dirty, so that a network update will be sent for the object.</summary>
      <param name="dirtyBit">Bit mask to set.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.connectionToClient">
      <summary>The <see cref="UnityEngine.Networking.NetworkConnection"></see> associated with this <see cref="UnityEngine.Networking.NetworkIdentity"></see>. This is only valid for player objects on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.connectionToServer">
      <summary>The <see cref="UnityEngine.Networking.NetworkConnection"></see> associated with this <see cref="UnityEngine.Networking.NetworkIdentity"></see>. This is only valid for player objects on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.hasAuthority">
      <summary>
        <para>This returns true if this object is the authoritative version of the object in the distributed network application.</para>
        <para>The <see cref="UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority"></see> value on the NetworkIdentity determines how authority is determined. For most objects, authority is held by the server / host. For objects with <see cref="UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority"></see> set, authority is held by the client of that player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isClient">
      <summary>Returns true if running as a client and this object was spawned by a server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isLocalPlayer">
      <summary>
        <para>This returns true if this object is the one that represents the player on the local machine.</para>
        <para>In multiplayer games, there are multiple instances of the Player object. The client needs to know which one is for "themselves" so that only that player processes input and potentially has a camera attached. The IsLocalPlayer function will return true only for the player instance that belongs to the player on the local machine, so it can be used to filter out input for non-local players. This example shows processing input for only the local player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isServer">
      <summary>
        <para>Returns true if this object is active on an active server.</para>
        <para>This is only true if the object has been spawned. This is different from NetworkServer.active, which is true if the server itself is active rather than this object being active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority">
      <summary>This value is set on the NetworkIdentity and is accessible here for convenient access for scripts.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.netId">
      <summary>
        <para>The unique network Id of this object.</para>
        <para>This is assigned at runtime by the network server and will be unique for all objects for that network session.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.playerControllerId">
      <summary>
        <para>The id of the player associated with the behaviour.</para>
        <para>This is only valid if the GameObject is a local player. The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.ClearAllDirtyBits">
      <summary>
        <para>This clears all the dirty bits that were set on this script by SetDirtyBits();</para>
        <para>This is automatically invoked when an update is sent for this object, but can be called manually as well.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.GetNetworkChannel">
      <summary>
        <para>This virtual function is used to specify the QoS channel to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The QoS channel for this script.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetStatsIn(System.Int32@,System.Int32@)">
      <summary>Get inbound network statistics for the client.</summary>
      <param name="numMsgs">Number of messages received so far.</param>
      <param name="numBytes">Number of bytes received so far.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetStatsOut(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Get outbound network statistics for the client.</summary>
      <param name="numMsgs">Number of messages sent so far (including collated messages send through buffer).</param>
      <param name="numBufferedMsgs">Number of messages sent through buffer.</param>
      <param name="numBytes">Number of bytes sent so far.</param>
      <param name="lastBufferedPerSecond">Number of messages buffered for sending per second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ReconnectToNewHost(System.String,System.Int32)">
      <summary>This is used by a client that has lost the connection to the old host, to reconnect to the new host of a game.</summary>
      <param name="serverIp">The IP address of the new host.</param>
      <param name="serverPort">The port of the new host.</param>
      <returns>True if able to reconnect.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>Register a handler for a particular message type.</para>
        <para>There are several system message types which you can add handlers for. You can also add your own message types.</para>
      </summary>
      <param name="msgType">Message type number.</param>
      <param name="handler">Function handler which will be invoked for when this message type is received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ResetConnectionStats">
      <summary>
        <para>Resets the statistics return by NetworkClient.GetConnectionStats() to zero values.</para>
        <para>Useful when building per-second network statistics.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Send(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel.</para>
        <para>The message must be an instance of a class derived from MessageBase.</para>
        <para>The message id passed to Send() is used to identify the handler function to invoke on the server when the message is received.</para>
      </summary>
      <param name="msgType">The id of the message to send.</param>
      <param name="msg">A message instance to send.</param>
      <returns>True if message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendByChannel(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>
        <para>This sends a network message with a message Id to the server on a specific channel.</para>
        <para>This does the same thing as NetworkClient.Send(), but allows a transport layer QoS channel to be specified.</para>
      </summary>
      <param name="msgType">The id of the message to send.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The channel to send the message on.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends the data in an array of bytes to the server that the client is connected to.</para>
        <para>The data must be properly formatted.</para>
      </summary>
      <param name="data">Data to send.</param>
      <param name="numBytes">Number of bytes of data.</param>
      <param name="channelId">The QoS channel to send data on.</param>
      <returns>True if successfully sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendUnreliable(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message Id to the server on channel one, which by default is the unreliable channel.</para>
        <para>This does the same thing as NetworkClient.Send(), except that it send on the unreliable channel.</para>
      </summary>
      <param name="msgType">The message id to send.</param>
      <param name="msg">The message to send.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendWriter(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>
        <para>This sends the contents of the NetworkWriter's buffer to the connected server on the specified channel.</para>
        <para>The format of the data in the writer must be properly formatted for it to be processed as a message by the server. The functions StartMessage() and FinishMessage() can be used to properly format messages:</para>
      </summary>
      <param name="writer">Writer object containing data to send.</param>
      <param name="channelId">QoS channel to send data on.</param>
      <returns>True if data successfully sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SetMaxDelay(System.Single)">
      <summary>Set the maximum amount of time that can pass for transmitting the send buffer.</summary>
      <param name="seconds">Delay in seconds.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class that is used when creating new network connections.</para>
        <para>The class must be derived from NetworkConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Shutdown">
      <summary>
        <para>Shut down a client.</para>
        <para>This should be done when a client is no longer going to be used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.UnregisterHandler(System.Int16)">
      <summary>Unregisters a network message handler.</summary>
      <param name="msgType">The message type to unregister.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetTotalConnectionStats">
      <summary>Retrieves statistics about the network packets sent on all connections.</summary>
      <returns>Dictionary of stats.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ShutdownAll">
      <summary>
        <para>Shuts down all network clients.</para>
        <para>This also shuts down the transport layer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkBroadcastResult.broadcastData">
      <summary>The data broadcast by the server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkBroadcastResult.serverAddress">
      <summary>The IP address of the server that broadcasts this data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.active">
      <summary>True if a network client is currently active.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.allClients">
      <summary>
        <para>A list of all the active network clients in the current process.</para>
        <para>This is NOT a list of all clients that are connected to the remote server, it is client instances on the local game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.connection">
      <summary>The NetworkConnection object this client is using.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.handlers">
      <summary>The registered network message handlers.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.hostPort">
      <summary>
        <para>The local port that the network client uses to connect to the server.</para>
        <para>It defaults to 0, which means the network client will use a free port of system choice.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.hostTopology">
      <summary>
        <para>The host topology that this client is using.</para>
        <para>This is read-only once the client is started.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.isConnected">
      <summary>This gives the current connection status of the client.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.networkConnectionClass">
      <summary>
        <para>The class to use when creating new NetworkConnections.</para>
        <para>This can be set with SetNetworkConnectionClass. This allows custom classes that do special processing of data from the transport layer to be used with the NetworkClient.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.numChannels">
      <summary>The number of QoS channels currently configured for this client.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.serverIp">
      <summary>
        <para>The IP address of the server that this client is connected to.</para>
        <para>This will be empty if the client has not connected yet.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.serverPort">
      <summary>
        <para>The port of the server that this client is connected to.</para>
        <para>This will be zero if the client has not connected yet.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>
        <para>This configures the transport layer settings for a client.</para>
        <para>The settings in the ConnectionConfig or HostTopology object will be used to configure the transport layer connection used by this client. This must match the configuration of the server.</para>
      </summary>
      <param name="config">Transport layer configuration object.</param>
      <param name="maxConnections">The maximum number of connections to allow.</param>
      <returns>True if the configuration was successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Configure(UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This configures the transport layer settings for a client.</para>
        <para>The settings in the ConnectionConfig or HostTopology object will be used to configure the transport layer connection used by this client. This must match the configuration of the server.</para>
      </summary>
      <param name="topology">Transport layer topology object.</param>
      <returns>True if the configuration was successful.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastData">
      <summary>
        <para>The data to include in the broadcast message when running as a server.</para>
        <para>If using NetworkManager integration, this will be overriden with the NetworkManager's address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastInterval">
      <summary>How often in milliseconds to broadcast when running as a server.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Connect(System.String,System.Int32)">
      <summary>
        <para>Connect client to a NetworkServer instance.</para>
        <para>Connecting to a server is asynchronous. There is connection message that is fired when the client connects. If the connection fails, a MsgType.Error message will be generated. Once a connection is established you are able to send messages on the connection using NetworkClient.Send(). If using other features of the high level api, the client should call NetworkClient.IsReady() once it is ready to participate in the game. At that point the client will be sent spawned objects and state update messages.</para>
      </summary>
      <param name="serverIp">Target IP address or hostname.</param>
      <param name="serverPort">Target port number.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastKey">
      <summary>A key to identify this application in broadcasts.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ConnectWithSimulator(System.String,System.Int32,System.Int32,System.Single)">
      <summary>Connect client to a NetworkServer instance with simulated latency and packet loss.</summary>
      <param name="serverIp">Target IP address or hostname.</param>
      <param name="serverPort">Target port number.</param>
      <param name="latency">Simulated latency in milliseconds.</param>
      <param name="packetLoss">Simulated packet loss percentage.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Disconnect">
      <summary>
        <para>Disconnect from server.</para>
        <para>The disconnect message will be invoked.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetConnectionStats">
      <summary>Retrieves statistics about the network packets sent on this connection.</summary>
      <returns>Dictionary of packet statistics for the client's connection.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetRTT">
      <summary>
        <para>Gets the Return Trip Time for this connection.</para>
        <para>This value is calculated by the transport layer.</para>
      </summary>
      <returns>Return trip time in milliseconds.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.isConnected">
      <summary>
        <para>True if the connection is connected to a remote end-point.</para>
        <para>This applies to NetworkServer and NetworkClient connections. When not connected, the hostID will be -1. When connected, the hostID will be a positive integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.isReady">
      <summary>
        <para>Flag that tells if the connection has been marked as "ready" by a client calling ClientScene.Ready().</para>
        <para>This property is read-only. It is set by the system on the client when ClientScene.Ready() is called, and set by the system on the server when a ready message is received from a client. A client that is ready is sent spawned objects by the server and updates to the state of spawned objects. A client that is not ready is not sent spawned objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.lastError">
      <summary>
        <para>The last error associated with this connection.</para>
        <para>Retrieve the last error that occurred on the connection, this value is set every time an event is received from the NetworkTransport. In the following example, OnServerDisconnect is overridden from NetworkManager:</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.lastMessageTime">
      <summary>
        <para>The last time that a message was received on this connection.</para>
        <para>This includes internal system messages (such as Commands and ClientRpc calls) and user messages.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.logNetworkMessages">
      <summary>
        <para>Setting this to true will log the contents of network message to the console.</para>
        <para>Warning: this can be a lot of data and can be very slow. Both incoming and outgoing messages are logged. The format of the logs is: ConnectionSend con:1 bytes:11 msgId:5 FB59D743FD120000000000 ConnectionRecv con:1 bytes:27 msgId:8 14F21000000000016800AC3FE090C240437846403CDDC0BD3B0000 Note that these are application-level network messages, not protocol-level packets. There will typically be multiple network messages combined in a single protocol packet.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.playerControllers">
      <summary>
        <para>The list of players for this connection.</para>
        <para>In most cases this will be a single player. But, for "Couch Multiplayer" there could be multiple players for a single client. To see the players on your own client see <see cref="UnityEngine.Networking.ClientScene.localPlayers"></see> list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.CheckHandler(System.Int16)">
      <summary>
        <para>This function checks if there is a message handler registered for the message ID.</para>
        <para>This is usually not required, as InvokeHandler handles message IDs without handlers.</para>
      </summary>
      <param name="msgType">The message ID of the handler to look for.</param>
      <returns>True if a handler function was found.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Disconnect">
      <summary>Disconnects this connection.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Dispose">
      <summary>Disposes of this connection, releasing channel buffers that it holds.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.FlushChannels">
      <summary>
        <para>This causes the channels of the network connection to flush their data to the transport layer.</para>
        <para>This is called automatically by connections used by NetworkServer and NetworkClient, but can be called manually for connections used in other contexts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.GetStatsIn(System.Int32@,System.Int32@)">
      <summary>Get statistics for incoming traffic.</summary>
      <param name="numMsgs">Number of messages received.</param>
      <param name="numBytes">Number of bytes received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.GetStatsOut(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Get statistics for outgoing traffic.</summary>
      <param name="numMsgs">Number of messages sent.</param>
      <param name="numBufferedMsgs">Number of messages currently buffered for sending.</param>
      <param name="numBytes">Number of bytes sent.</param>
      <param name="lastBufferedPerSecond">How many messages were buffered in the last second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Initialize(System.String,System.Int32,System.Int32,UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This inializes the internal data structures of a NetworkConnection object, including channel buffers.</para>
        <para>This is called by NetworkServer and NetworkClient on connection objects, but if used outside of that context, this function should be called before the connection is used. This function can be overriden to perform additional initialization for the connection, but the base class Initialize function should always be called as it is required to setup internal state.</para>
      </summary>
      <param name="networkAddress">The host or IP connected to.</param>
      <param name="networkHostId">The transport hostId for the connection.</param>
      <param name="networkConnectionId">The transport connectionId for the connection.</param>
      <param name="hostTopology">The topology to be used.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandler(System.Int16,UnityEngine.Networking.NetworkReader,System.Int32)">
      <summary>
        <para>This function invokes the registered handler function for a message.</para>
        <para>Network connections used by the NetworkClient and NetworkServer use this function for handling network messages.</para>
      </summary>
      <param name="msgType">The message type of the handler to use.</param>
      <param name="reader">The stream to read the contents of the message from.</param>
      <param name="channelId">The channel that the message arrived on.</param>
      <returns>True if a handler function was found and invoked.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandler(UnityEngine.Networking.NetworkMessage)">
      <summary>
        <para>This function invokes the registered handler function for a message.</para>
        <para>Network connections used by the NetworkClient and NetworkServer use this function for handling network messages.</para>
      </summary>
      <param name="netMsg">The message object to process.</param>
      <returns>True if a handler function was found and invoked.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandlerNoData(System.Int16)">
      <summary>
        <para>This function invokes the registered handler function for a message, without any message data.</para>
        <para>This is useful to invoke handlers that dont have any additional data, such as the handlers for MsgType.Connect.</para>
      </summary>
      <param name="msgType">The message ID of the handler to invoke.</param>
      <returns>True if a handler function was found and invoked.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>This registers a handler function for a message Id.</summary>
      <param name="msgType">The message ID to register.</param>
      <param name="handler">The handler function to register.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.ResetStats">
      <summary>Resets the statistics that are returned from NetworkClient.GetConnectionStats().</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Send(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel.</summary>
      <param name="msgType">The ID of the message to send.</param>
      <param name="msg">The message to send.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendByChannel(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>This sends a network message on the connection using a specific transport layer channel.</summary>
      <param name="msgType">The message ID to send.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to send on.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>This sends an array of bytes on the connection.</summary>
      <param name="bytes">The array of data to be sent.</param>
      <param name="numBytes">The number of bytes in the array to be sent.</param>
      <param name="channelId">The transport channel to send on.</param>
      <returns>Success if data was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendUnreliable(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>This sends a network message with a message ID on the connection. This message is sent on channel one, which by default is the unreliable channel.</summary>
      <param name="msgType">The message ID to send.</param>
      <param name="msg">The message to send.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendWriter(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>
        <para>This sends the contents of a NetworkWriter object on the connection.</para>
        <para>The example below constructs a writer and sends it on a connection.</para>
      </summary>
      <param name="writer">A writer object containing data to send.</param>
      <param name="channelId">The transport channel to send on.</param>
      <returns>True if the data was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SetChannelOption(System.Int32,UnityEngine.Networking.ChannelOption,System.Int32)">
      <summary>
        <para>This sets an option on the network channel.</para>
        <para>Channel options are usually advanced tuning parameters.</para>
      </summary>
      <param name="channelId">The channel the option will be set on.</param>
      <param name="option">The option to set.</param>
      <param name="value">The value for the option.</param>
      <returns>True if the option was set.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SetMaxDelay(System.Single)">
      <summary>
        <para>The maximum time in seconds that messages are buffered before being sent.</para>
        <para>If this is set to zero, then there will be no buffering of messages before they are sent to the transport layer. This may reduce latency but can lead to packet queue overflow issues if many small packets are being sent.</para>
      </summary>
      <param name="seconds">Time in seconds.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.ToString">
      <summary>Returns a string representation of the NetworkConnection object state.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.TransportReceive(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This virtual function allows custom network connection classes to process data from the network before it is passed to the application.</para>
        <para>The default implementation of this function calls HandleBytes() on the received data. Custom implmentations can also use HandleBytes(), but can pass modified versions of the data received or other data. This example logs the data received to the console, then passes it to HandleBytes.</para>
        <para>Other uses for this function could be data compression or data encryption. Custom network connection classes are used by setting NetworkServer.NetworkConnectionClass and NetworkClient.NetworkConnectionClass.</para>
      </summary>
      <param name="bytes">The data recieved.</param>
      <param name="numBytes">The size of the data recieved.</param>
      <param name="channelId">The channel that the data was received on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.TransportSend(System.Byte[],System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>This virtual function allows custom network connection classes to process data send by the application before it goes to the network transport layer.</para>
        <para>The default implementation of this function calls NetworkTransport.Send() with the supplied data, but custom implementations can pass modified versions of the data. This example logs the sent data to the console:</para>
        <para>Other uses for this function could be data compression or data encryption. Custom network connection classes are used by setting NetworkServer.NetworkConnectionClass and NetworkClient.NetworkConnectionClass.</para>
      </summary>
      <param name="bytes">Data to send.</param>
      <param name="numBytes">Size of data to send.</param>
      <param name="channelId">Channel to send data on.</param>
      <param name="error">Error code for send.</param>
      <returns>True if data was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.UnregisterHandler(System.Int16)">
      <summary>This removes the handler registered for a message Id.</summary>
      <param name="msgType">The message ID to unregister.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.PacketStat.bytes">
      <summary>Total bytes of all messages of this type.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.PacketStat.count">
      <summary>The total number of messages of this type.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.PacketStat.msgType">
      <summary>The message type these stats are for.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkCRC.scriptCRCCheck">
      <summary>
        <para>Enables a CRC check between server and client that ensures the <see cref="UnityEngine.Networking.NetworkBehaviour"></see> scripts match.</para>
        <para>This may not be appropriate in some cases, such a when the client and server are different Unity projects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkCRC.scripts">
      <summary>
        <para>A dictionary of script QoS channels.</para>
        <para>This is used to compare script network configurations between clients and servers.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkCRC.RegisterBehaviour(System.String,System.Int32)">
      <summary>This is used to setup script network settings CRC data.</summary>
      <param name="name">Script name.</param>
      <param name="channel">QoS Channel.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.IsValid">
      <summary>A valid NetworkHash has a non-zero value.</summary>
      <returns>True if the value is non-zero.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.Reset">
      <summary>Resets the value of a NetworkHash to zero (invalid).</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.ToString">
      <summary>Returns a string representation of a NetworkHash object.</summary>
      <returns>A hex asset string.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.Parse(System.String)">
      <summary>This parses the string representation of a NetworkHash into a binary object.</summary>
      <param name="text">A hex string to parse.</param>
      <returns>A 128 bit network hash object.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastPort">
      <summary>The network port to broadcast on and listen to.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastsReceived">
      <summary>
        <para>A dictionary of broadcasts received from servers.</para>
        <para>The key is the server address, and the value is a NetworkBroadcastResult object that contains the data sent by the server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkInstanceId.Invalid">
      <summary>
        <para>A static invalid NetworkInstanceId that can be used for comparisons.</para>
        <para>The default value of NetworkInstanceId.Value is zero, and IsEmpty() can be used to check this. But NetworkInstanceId.Invalid is available for specifically setting and checking for invalid IDs.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastSubVersion">
      <summary>The sub-version of the application to broadcast. This is used to match versions of the same application.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkInstanceId.Value">
      <summary>The internal value of this identifier.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastVersion">
      <summary>The version of the application to broadcast. This is used to match versions of the same application.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.hostId">
      <summary>The TransportLayer hostId being used (read-only).</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkInstanceId.IsEmpty">
      <summary>
        <para>Returns true if the value of the NetworkInstanceId is zero.</para>
        <para>Object that have not been spawned will have a value of zero.</para>
      </summary>
      <returns>True if zero.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.isClient">
      <summary>True if running in client mode (read-only).</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkInstanceId.ToString">
      <summary>Returns a string of "NetID:value".</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.isServer">
      <summary>True if running in server mode (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.offsetX">
      <summary>The horizontal offset of the GUI if active.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.offsetY">
      <summary>The vertical offset of the GUI if active.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.running">
      <summary>True is broadcasting or listening (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.showGUI">
      <summary>True to draw the default Broacast control UI.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.useNetworkManager">
      <summary>
        <para>True to integrate with the NetworkManager.</para>
        <para>When running as a server, this will include the NetworkManager's address in broadcast messages. When running as a client, this will be able to join matching games found by using the NetworkManager.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.Initialize">
      <summary>Initializes the NetworkDiscovery component.</summary>
      <returns>Return true if the network port was available.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.OnReceivedBroadcast(System.String,System.String)">
      <summary>This is a virtual function that can be implemented to handle broadcast messages when running as a client.</summary>
      <param name="fromAddress">The IP address of the server.</param>
      <param name="data">The data broadcast by the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StartAsClient">
      <summary>Starts listening for broadcasts messages.</summary>
      <returns>True is able to listen.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StartAsServer">
      <summary>Starts sending broadcast messages.</summary>
      <returns>True is able to broadcast.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StopBroadcast">
      <summary>Stops listening and broadcasting.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.address">
      <summary>The IP address associated with the connection.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.clientOwnedObjects">
      <summary>
        <para>A list of the NetworkIdentity objects owned by this connection.</para>
        <para>This includes the player object for the connection - if it has localPlayerAutority set, and any objects spawned with local authority or set with AssignLocalAuthority. This list is read only. This list can be used to validate messages from clients, to ensure that clients are only trying to control objects that they own.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.connectionId">
      <summary>
        <para>Unique identifier for this connection that is assigned by the transport layer.</para>
        <para>On a server, this Id is unique for every connection on the server. On a client this Id is local to the client, it is not the same as the Id on the server for this connection. Transport layers connections begin at one. So on a client with a single connection to a server, the connectionId of that connection will be one. In NetworkServer, the connectionId of the local connection is zero. Clients do not know their connectionId on the server, and do not know the connectionId of other clients on the server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.hostId">
      <summary>
        <para>Transport level host ID for this connection.</para>
        <para>This is assigned by the transport layer and passed to the connection instance through the Initialize function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.gamePlayerPrefab">
      <summary>
        <para>This is the prefab of the player to be created in the PlayScene.</para>
        <para>When CheckReadyToBegin starts the game from the lobby, a new player object is created from this prefab, and that object is made the active player object using [NetworkServer.ReplacePlayerForConnection].</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.lobbyPlayerPrefab">
      <summary>
        <para>This is the prefab of the player to be created in the LobbyScene.</para>
        <para>This prefab must have a NetworkLobbyPlayer component on it. In the lobby scene, this will be the active player object, but in other scenes while the game is running, this will be replaced by a player object created from the GamePlayerPrefab. But once returned to the lobby scene this will again become the active player object. This can be used to store user data that persists for the lifetime of the session, such as color choices or weapon choices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.lobbyScene">
      <summary>The scene to use for the lobby. This is similar to the offlineScene of the NetworkManager.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkLobbyManager.lobbySlots">
      <summary>
        <para>These slots track players that enter the lobby.</para>
        <para>The slotId on players is global to the game - across all players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.maxPlayers">
      <summary>
        <para>The maximum number of players allowed in the game.</para>
        <para>Note that this is the number "players" not clients or connections. There can be multiple players per client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.maxPlayersPerConnection">
      <summary>
        <para>The maximum number of players per connection.</para>
        <para>Calling [ClientScene.AddPlayer] will fail if this limit is reached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.minPlayers">
      <summary>
        <para>The minimum number of players required to be ready for the game to start.</para>
        <para>If this is zero then the game can start with any number of players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.playScene">
      <summary>The scene to use for the playing the game from the lobby. This is similar to the onlineScene of the NetworkManager.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.showLobbyGUI">
      <summary>
        <para>This flag enables display of the default lobby UI.</para>
        <para>This is rendered using the old GUI system, so is only recommended for testing purposes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.CheckReadyToBegin">
      <summary>
        <para>CheckReadyToBegin checks all of the players in the lobby to see if their readyToBegin flag is set.</para>
        <para>If all of the players are ready, then the server switches from the LobbyScene to the PlayScene - essentially starting the game. This is called automatically in response to NetworkLobbyPlayer.SendReadyToBeginMessage().</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientAddPlayerFailed">
      <summary>
        <para>Called on the client when adding a player to the lobby fails.</para>
        <para>This could be because the lobby is full, or the connection is not allowed to have more players.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the client when it connects to server.</summary>
      <param name="conn">The connection that connected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the client when disconnected from a server.</summary>
      <param name="conn">The connection that disconnected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientEnter">
      <summary>This is a hook to allow custom behaviour when the game client enters the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientExit">
      <summary>This is a hook to allow custom behaviour when the game client exits the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientSceneChanged(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the client when the client is finished loading a new networked scene.</summary>
      <param name="conn">The connection that finished loading a new networked scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the server when a new client connects to the server.</summary>
      <param name="conn">The new connection.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateGamePlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This allows customization of the creation of the GamePlayer object on the server.</para>
        <para>By default the gamePlayerPrefab is used to create the game-player, but this function allows that behaviour to be customized. The object returned from the function will be used to replace the lobby-player on the connection.</para>
      </summary>
      <param name="conn">The connection the player object is for.</param>
      <param name="playerControllerId">The controllerId of the player on the connnection.</param>
      <returns>A new GamePlayer object.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This allows customization of the creation of the lobby-player object on the server.</para>
        <para>By default the lobbyPlayerPrefab is used to create the lobby-player, but this function allows that behaviour to be customized.</para>
      </summary>
      <param name="conn">The connection the player object is for.</param>
      <param name="playerControllerId">The controllerId of the player.</param>
      <returns>The new lobby-player object.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the server when a client disconnects.</summary>
      <param name="conn">The connection that disconnected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayerRemoved(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>This is called on the server when a player is removed.</summary>
      <param name="conn">The connection the player object is for.</param>
      <param name="playerControllerId">The controllerId of the player that was removed.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayersReady">
      <summary>
        <para>This is called on the server when all the players in the lobby are ready.</para>
        <para>The default implementation of this function uses ServerChangeScene() to switch to the game player scene. By implementing this callback you can customize what happens when all the players in the lobby are ready, such as adding a countdown or a confirmation for a group leader.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneChanged(System.String)">
      <summary>This is called on the server when a networked scene finishes loading.</summary>
      <param name="sceneName">Name of the new scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>This is called on the server when it is told that a client has finished switching from the lobby scene to a game player scene.</para>
        <para>When switching from the lobby, the lobby-player is replaced with a game-player object. This callback function gives an opportunity to apply state from the lobby-player to the game-player object.</para>
      </summary>
      <param name="lobbyPlayer">The lobby player object.</param>
      <param name="gamePlayer">The game player object.</param>
      <returns>False to not allow this player to replace the lobby player.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartClient(UnityEngine.Networking.NetworkClient)">
      <summary>This is called on the client when a client is started.</summary>
      <param name="lobbyClient">The connection for the lobby.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartHost">
      <summary>This is called on the host when a host is started.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartServer">
      <summary>This is called on the server when the server is started - including when a host is started.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopClient">
      <summary>This is called on the client when the client stops.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopHost">
      <summary>This is called on the host when the host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.SendReturnToLobby">
      <summary>Sends a message to the server to make the game return to the lobby scene.</summary>
      <returns>True if message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.ServerReturnToLobby">
      <summary>Calling this causes the server to switch back to the lobby scene.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.TryToAddPlayer">
      <summary>
        <para>This is used on clients to attempt to add a player to the game.</para>
        <para>This may fail if the game is full or the connection cannot have more players.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkIdentity.clientAuthorityCallback">
      <summary>
        <para>A callback that can be populated to be notified when the client-authority state of objects changes.</para>
        <para>Whenever an object is spawned using SpawnWithClientAuthority, or the client authority status of an object is changed with <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority"></see> or <see cref="UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority"></see>, then this callback will be invoked. This callback is used by the NetworkMigrationManager to distribute client authority state to peers for host migration. If the NetworkMigrationManager is not being used, this callback does not need to be populated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.assetId">
      <summary>Unique identifier used to find the source assets when server spawns the on clients.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.clientAuthorityOwner">
      <summary>
        <para>The client that has authority for this object. This will be null if no client has authority.</para>
        <para>This is set for player objects with <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority"></see>, and for objects set with <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority"></see>, and spawned with SpawnWithClientAuthority.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.connectionToClient">
      <summary>The connection associated with this <see cref="UnityEngine.Networking.NetworkIdentity"></see>. This is only valid for player objects on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.connectionToServer">
      <summary>The UConnection associated with this NetworkIdentity. This is only valid for player objects on a local client.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.hasAuthority">
      <summary>
        <para>This returns true if this object is the authoritative version of the object in the distributed network application.</para>
        <para>This value is determined at runtime, as opposed to <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority"></see> which is set on the prefab. For most objects, authority is held by the server / host. For objects with <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority"></see> set, authority is held by the client of that player. For objects that had their authority set by <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority"></see> on the server, this will be true on the client that owns the object. NOT on other clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isClient">
      <summary>Returns true if running as a client and this object was spawned by a server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isLocalPlayer">
      <summary>
        <para>This returns true if this object is the one that represents the player on the local machine.</para>
        <para>This is set when the server has spawned an object for this particular client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isServer">
      <summary>Returns true if running as a server, which spawned the object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.localPlayerAuthority">
      <summary>
        <para>
          <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority">
          </see> means that the client of the "owning" player has authority over their own player object.</para>
        <para>Authority for this object will be on the player's client. So <see cref="UnityEngine.Networking.NetworkIdentity.hasAuthority"></see> will be true on that client - and false on the server and on other clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.netId">
      <summary>Unique identifier for this particular object instance, used for tracking objects between networked clients and the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.observers">
      <summary>The set of network connections (players) that can see this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.playerControllerId">
      <summary>
        <para>The id of the player associated with this GameObject.</para>
        <para>This is only valid if this GameObject is for a local player. The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.sceneId">
      <summary>
        <para>A unique identifier for NetworkIdentity objects within a scene.</para>
        <para>This is used for spawning scene objects on clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.serverOnly">
      <summary>Flag to make this object only exist when the game is running as a server (or host).</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.AssignClientAuthority(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This assigns control of an object to a client via the client's <see cref="UnityEngine.Networking.NetworkConnection"></see>.</para>
        <para>This causes <see cref="UnityEngine.Networking.NetworkIdentity.hasAuthority"></see> to be set on the client that owns the object, and <see cref="UnityEngine.Networking.NetworkAnimator.OnStartAuthority"></see> will be called on that client. This object then will be in the <see cref="UnityEngine.Networking.NetworkConnection.clientOwnedObjects"></see> list for the connection. Authority can be removed with <see cref="UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority"></see>. Only one client can own an object at any time. Only NetworkIdentities with <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority"></see> set can have client authority assigned. This does not need to be called for player objects, as their authority is setup automatically.</para>
      </summary>
      <param name="conn">The connection of the client to assign authority to.</param>
      <returns>True if authority was assigned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.ForceSceneId(System.Int32)">
      <summary>
        <para>Force the scene ID to a specific value.</para>
        <para>This can be used to fix an invalid scene ID. If you process all the NetworkIdentity components in a scene you can assign them new values starting from 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.RebuildObservers(System.Boolean)">
      <summary>This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour.</summary>
      <param name="initialize">True if this is the first time.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Removes ownership for an object for a client by its conneciton.</para>
        <para>This applies to objects that had authority set by <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority"></see>, or <see cref="UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority"></see>. Authority cannot be removed for player objects.</para>
      </summary>
      <param name="conn">The connection of the client to remove authority for.</param>
      <returns>True if authority is removed.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnClientConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the client when connected to a server.</para>
        <para>The default implementation of this function sets the client as ready and adds a player.</para>
      </summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnClientDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on clients when disconnected from a server.</summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnClientSceneChanged(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when a scene has completed loaded, when the scene load was initiated by the server.</para>
        <para>Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists.</para>
      </summary>
      <param name="conn">The network connection that the scene change message arrived on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnServerAddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>Called on the server when a client adds a new player with ClientScene.AddPlayer.</para>
        <para>The default implementation for this function creates a new player object from the playerPrefab.</para>
      </summary>
      <param name="conn">Connection from client.</param>
      <param name="playerControllerId">Id of the new player.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnServerConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on the server when a new client connects.</summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnServerDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on the server when a client disconnects.</summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnServerRemovePlayer(UnityEngine.Networking.NetworkConnection,UnityEngine.Networking.PlayerController)">
      <summary>
        <para>Called on the server when a client removes a player.</para>
        <para>The default implementation of this function destroys the corresponding player object.</para>
      </summary>
      <param name="conn">The connection to remove the player from.</param>
      <param name="player">The player controller to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnServerSceneChanged(System.String)">
      <summary>Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene().</summary>
      <param name="sceneName">The name of the new scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnStartClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This is a hook that is invoked when the client is started.</para>
        <para>StartClient has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
      <param name="client">The NetworkClient object that was started.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnStartHost">
      <summary>
        <para>This hook is invoked when a host is started.</para>
        <para>StartHost has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnStartServer">
      <summary>
        <para>This hook is invoked when a server is started - including when a host is started.</para>
        <para>StartServer has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnStopClient">
      <summary>This hook is called when a client is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnStopHost">
      <summary>This hook is called when a host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.ServerChangeScene(System.String)">
      <summary>
        <para>This causes the server to switch scenes and sets the networkSceneName.</para>
        <para>Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready. The clients must call NetworkClient.Ready() again to participate in the new scene.</para>
      </summary>
      <param name="newSceneName">The name of the scene to change to. The server will change scene immediately, and a message will be sent to connected clients to ask them to change scene also.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This is a hook that is invoked when the client is started.</para>
        <para>StartClient has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
      <param name="client">The NetworkClient object that was started.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartHost">
      <summary>
        <para>This hook is invoked when a host is started.</para>
        <para>StartHost has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartServer">
      <summary>
        <para>This hook is invoked when a server is started - including when a host is started.</para>
        <para>StartServer has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopClient">
      <summary>This hook is called when a client is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopHost">
      <summary>This hook is called when a host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopServer">
      <summary>This hook is called when a server is stopped - including when a host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.ServerChangeScene(System.String)">
      <summary>
        <para>This causes the server to switch scenes and sets the networkSceneName.</para>
        <para>Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready. The clients must call NetworkClient.Ready() again to participate in the new scene.</para>
      </summary>
      <param name="newSceneName">The name of the scene to change to. The server will change scene immediately, and a message will be sent to connected clients to ask them to change scene also.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.SetMatchHost(System.String,System.Int32,System.Boolean)">
      <summary>
        <para>This sets the address of the MatchMaker service.</para>
        <para>The default address for the MatchMaker is mm.unet.unity3d.com That will connect a client to the nearest datacenter geographically. However because data centers are siloed from each other, players will only see matches occurring inside the data center they are currently connected to. If a player of your game is traveling to another part of the world, for instance, they may interact with a different set of players that are in that data center. You can override this behavior by specifying a particular data center. Keep in mind generally as distance grows so does latency, which is why we run data centers spread out over the world. To connect to a specific data center use one of the following addresses: United States: us1-mm.unet.unity3d.com Europe: eu1-mm.unet.unity3d.com Singapore: ap1-mm.unet.unity3d.com.</para>
      </summary>
      <param name="newHost">Hostname of MatchMaker service.</param>
      <param name="port">Port of MatchMaker service.</param>
      <param name="https">Protocol used by MatchMaker service.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.SetupMigrationManager(UnityEngine.Networking.NetworkMigrationManager)">
      <summary>
        <para>This sets up a NetworkMigrationManager object to work with this NetworkManager.</para>
        <para>The NetworkManager will automatically call functions on the migration manager, such as <see cref="UnityEngine.Networking.NetworkMigrationManager.LostHostOnClient"></see> when network events happen.</para>
      </summary>
      <param name="man">The migration manager object to use with the NetworkManager.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartClient">
      <summary>
        <para>This starts a network client. It uses the networkAddress and networkPort properties as the address to connect to.</para>
        <para>This makes the newly created client connect to the server immediately.</para>
      </summary>
      <returns>The client object created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartHost">
      <summary>
        <para>This starts a network "host" - a server and client in the same application.</para>
        <para>The client returned from StartHost() is a special "local" client that communicates to the in-process server using a message queue instead of the real network. But in almost all other cases, it can be treated as a normal client.</para>
      </summary>
      <returns>The client object created - this is a "local client".</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartMatchMaker">
      <summary>
        <para>This starts MatchMaker for the NetworkManager.</para>
        <para>This uses the matchHost and matchPort properties as the address of the MatchMaker service to connect to. Please call SetMatchHost prior to calling this function if you are not using the default MatchMaker address.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartServer">
      <summary>
        <para>This starts a new server.</para>
        <para>This uses the networkPort property as the listen port.</para>
      </summary>
      <returns>True is the server was started.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopClient">
      <summary>Stops the client that the manager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopHost">
      <summary>This stops both the client and the server that the manager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopMatchMaker">
      <summary>
        <para>Stops the MatchMaker that the NetworkManager is using.</para>
        <para>This should be called after a match is complete and before starting or joining a new match.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopServer">
      <summary>Stops the server that the manager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.UseExternalClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This allows the NetworkManager to use a client object created externally to the NetworkManager instead of using StartClient().</para>
        <para>The StartClient() function creates a client object, but this is not always what is desired. UseExternalClient allows a NetworkClient object to be created by other code and used with the NetworkManager. The client object will have the standard NetworkManager message handlers registered on it.</para>
      </summary>
      <param name="externalClient">The NetworkClient object to use.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.RegisterStartPosition(UnityEngine.Transform)">
      <summary>
        <para>Registers the transform of a game object as a player spawn location.</para>
        <para>This is done automatically by NetworkStartPosition components, but can be done manually from user script code.</para>
      </summary>
      <param name="start">Transform to register.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.Shutdown">
      <summary>
        <para>Shuts down the NetworkManager completely and destroy the singleton.</para>
        <para>This is required if a new NetworkManager instance needs to be created after the original one was destroyed. The example below has a reference to the GameObject with the NetworkManager on it and destroys the instance before calling Shutdown() and switching scenes.</para>
        <para>This cleanup allows a new scene with a new NetworkManager to be loaded.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.UnRegisterStartPosition(UnityEngine.Transform)">
      <summary>
        <para>Unregisters the transform of a game object as a player spawn location.</para>
        <para>This is done automatically by the <see cref="UnityEngine.Networking.NetworkStartPosition"></see> component, but can be done manually from user code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.isNetworkActive">
      <summary>
        <para>True if the NetworkServer or NetworkClient isactive.</para>
        <para>This is read-only. Calling StopServer() or StopClient() turns this off.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.logLevel">
      <summary>The log level specifically to user for network log messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matches">
      <summary>
        <para>The list of matches that are available to join.</para>
        <para>This will be populated if UMatch.ListMatches() has been called. It will contain the most recent set of results from calling ListMatches.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.matchHost">
      <summary>
        <para>The hostname of the matchmaking server.</para>
        <para>The default address for the MatchMaker is mm.unet.unity3d.com That will connect a client to the nearest datacenter geographically. However because data centers are siloed from each other, players will only see matches occurring inside the data center they are currently connected to. If a player of your game is traveling to another part of the world, for instance, they may interact with a different set of players that are in that data center. You can override this behavior by specifying a particular data center. Keep in mind generally as distance grows so does latency, which is why we run data centers spread out over the world. To connect to a specific data center use one of the following addresses: United States: us1-mm.unet.unity3d.com Europe: eu1-mm.unet.unity3d.com Singapore: ap1-mm.unet.unity3d.com.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchInfo">
      <summary>
        <para>A MatchInfo instance that will be used when StartServer() or StartClient() are called.</para>
        <para>This should be populated from the data handed to the callback for <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch"></see> or <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see>. It contains all the information necessary to connect to the match in question.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchMaker">
      <summary>
        <para>The UMatch MatchMaker object.</para>
        <para>This is populated if StartMatchMaker() has been called. It is used to communicate with the matchmaking service. This should be shut down after the match is complete to clean up its internal state. If this object is null then the client is not setup to communicate with MatchMaker yet.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchName">
      <summary>
        <para>The name of the current match.</para>
        <para>A text string indicating the name of the current match in progress.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.matchPort">
      <summary>The port of the matchmaking service.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchSize">
      <summary>The maximum number of players in the current match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.maxConnections">
      <summary>
        <para>The maximum number of concurrent network connections to support.</para>
        <para>The effects the memory usage of the network layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.maxDelay">
      <summary>
        <para>The maximum delay before sending packets on connections.</para>
        <para>In seconds. The default of 0.01 seconds means packets will be delayed at most by 10 milliseconds. Setting this to zero will disable HLAPI connection buffering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.migrationManager">
      <summary>The migration manager being used with the NetworkManager.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.networkAddress">
      <summary>
        <para>The network address currently in use.</para>
        <para>For clients, this is the address of the server that is connected to. For servers, this is the local address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.networkPort">
      <summary>
        <para>The network port currently in use.</para>
        <para>For clients, this is the port of the server connected to. For servers, this is the listen port.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.numPlayers">
      <summary>
        <para>NumPlayers is the number of active player objects across all connections on the server.</para>
        <para>This is only valid on the host / server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.offlineScene">
      <summary>
        <para>The scene to switch to when offline.</para>
        <para>Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is completed - such as a client disconnect, or a server shutdown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.onlineScene">
      <summary>
        <para>The scene to switch to when online.</para>
        <para>Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is started - such as a client connect, or a server listen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.packetLossPercentage">
      <summary>
        <para>The percentage of incoming and outgoing packets to be dropped for clients.</para>
        <para>This is only used when useSimulator is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.playerPrefab">
      <summary>
        <para>The default prefab to be used to create player objects on the server.</para>
        <para>Player objects are created in the default handler for AddPlayer() on the server. Implementing OnServerAddPlayer overrides this behaviour.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.playerSpawnMethod">
      <summary>The current method of spawning players used by the NetworkManager.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.runInBackground">
      <summary>
        <para>Controls whether the program runs when it is in the background.</para>
        <para>This is required when multiple instances of a program using networking are running on the same machine, such as when testing using localhost. But this is not recommended when deploying to mobile platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.scriptCRCCheck">
      <summary>
        <para>Flag for using the script CRC check between server and clients.</para>
        <para>Enables a CRC check between server and client that ensures the NetworkBehaviour scripts match. This may not be appropriate in some cases, such a when the client and server are different Unity projects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.secureTunnelEndpoint">
      <summary>
        <para>Allows you to specify an EndPoint object instead of setting networkAddress and networkPort (required for some platforms such as Xbox One).</para>
        <para>Setting this object overrides the networkAddress and networkPort fields, and will be used instead of making connections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.serverBindAddress">
      <summary>
        <para>The IP address to bind the server to.</para>
        <para>This is only used if serverBindToIP is set to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.serverBindToIP">
      <summary>
        <para>Flag to tell the server whether to bind to a specific IP address.</para>
        <para>If this is false, then no specific IP address is bound to (IP_ANY).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.simulatedLatency">
      <summary>
        <para>The delay in milliseconds to be added to incoming and outgoing packets for clients.</para>
        <para>This is only used when useSimulator is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.spawnPrefabs">
      <summary>
        <para>List of prefabs that will be registered with the spawning system.</para>
        <para>For each of these prefabs, ClientManager.RegisterPrefab() will be automatically invoke.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.startPositions">
      <summary>The list of currently registered player start positions for the current scene.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.useSimulator">
      <summary>Flag that control whether clients started by this NetworkManager will use simulated latency and packet loss.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.useWebSockets">
      <summary>
        <para>This makes the NetworkServer listen for WebSockets connections instead of normal transport layer connections.</para>
        <para>This allows WebGL clients to connect to the server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.GetStartPosition">
      <summary>
        <para>This finds a spawn position based on NetworkStartPosition objects in the scene.</para>
        <para>This is used by the default implementation of OnServerAddPlayer.</para>
      </summary>
      <returns>Returns the transform to spawn a player at, or null.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.IsClientConnected">
      <summary>
        <para>This checks if the NetworkManager has a client and that it is connected to a server.</para>
        <para>This is more specific than NetworkClient.isActive, which will be true if there are any clients active, rather than just the NetworkManager's client.</para>
      </summary>
      <returns>True if the NetworkManagers client is connected to a server.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the client when connected to a server.</para>
        <para>The default implementation of this function sets the client as ready and adds a player.</para>
      </summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on clients when disconnected from a server.</summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientError(UnityEngine.Networking.NetworkConnection,System.Int32)">
      <summary>Called on clients when a network error occurs.</summary>
      <param name="conn">Connection to a server.</param>
      <param name="errorCode">Error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientNotReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when a servers tells the client it is no longer ready.</para>
        <para>This is commonly used when switching scenes.</para>
      </summary>
      <param name="conn">Connection to a server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientSceneChanged(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when a scene has completed loaded, when the scene load was initiated by the server.</para>
        <para>Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists.</para>
      </summary>
      <param name="conn">The network connection that the scene change message arrived on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnDestroyMatch(System.Boolean,System.String)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.DestroyMatch"></see> request has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnDropConnection(System.Boolean,System.String)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.DropConnection"></see> match request has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchCreate(System.Boolean,System.String,UnityEngine.Networking.Match.MatchInfo)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch"></see> request has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
      <param name="matchInfo">The information about the newly created match.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchJoined(System.Boolean,System.String,UnityEngine.Networking.Match.MatchInfo)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see> request has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
      <param name="matchInfo">The info for the newly joined match.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerAddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>Called on the server when a client adds a new player with ClientScene.AddPlayer.</para>
        <para>The default implementation for this function creates a new player object from the playerPrefab.</para>
      </summary>
      <param name="conn">Connection from client.</param>
      <param name="playerControllerId">Id of the new player.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on the server when a new client connects.</summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on the server when a client disconnects.</summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerError(UnityEngine.Networking.NetworkConnection,System.Int32)">
      <summary>Called on the server when a network error occurs for a client connection.</summary>
      <param name="conn">Connection from client.</param>
      <param name="errorCode">Error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the server when a client is ready.</para>
        <para>The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process.</para>
      </summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerRemovePlayer(UnityEngine.Networking.NetworkConnection,UnityEngine.Networking.PlayerController)">
      <summary>
        <para>Called on the server when a client removes a player.</para>
        <para>The default implementation of this function destroys the corresponding player object.</para>
      </summary>
      <param name="conn">The connection to remove the player from.</param>
      <param name="player">The player controller to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerSceneChanged(System.String)">
      <summary>Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene().</summary>
      <param name="sceneName">The name of the new scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnSetMatchAttributes(System.Boolean,System.String)">
      <summary>Callback that happens when a <see cref="UnityEngine.Networking.Match.NetworkMatch.SetMatchAttributes"></see> has been processed on the server.</summary>
      <param name="success">Indicates if the request succeeded.</param>
      <param name="extendedInfo">A text description for the error if success is false.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnDeserialize(UnityEngine.Networking.NetworkReader,System.Boolean)">
      <summary>Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize().</summary>
      <param name="reader">Reader to read from the stream.</param>
      <param name="initialState">True if being sent initial state.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.networkSceneName">
      <summary>
        <para>The name of the current network scene.</para>
        <para>This is populated if the NetworkManager is doing scene management. This should not be changed directly. Calls to ServerChangeScene() cause this to change. New clients that connect to a server will automatically load this scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.singleton">
      <summary>The NetworkManager singleton object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.autoCreatePlayer">
      <summary>A flag to control whether or not player objects are automatically created on connect, and on scene change.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnSerialize(UnityEngine.Networking.NetworkWriter,System.Boolean)">
      <summary>
        <para>Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize().</para>
        <para>The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame.</para>
      </summary>
      <param name="writer">Writer to use to write to the stream.</param>
      <param name="initialState">If this is being called to send initial state.</param>
      <returns>True if data was written.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.channels">
      <summary>The Quality-of-Service channels to use for the network transport layer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.client">
      <summary>
        <para>The current NetworkClient being used by the manager.</para>
        <para>This is populated when StartClient or StartLocalClient are called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.clientLoadedScene">
      <summary>
        <para>This is true if the client loaded a new scene when connecting to the server.</para>
        <para>This is set before OnClientConnect is called, so it can be checked there to perform different logic if a scene load occurred.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.connectionConfig">
      <summary>
        <para>The custom network configuration to use.</para>
        <para>This will be used to configure the network transport layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.customConfig">
      <summary>Flag to enable custom network configuration.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnStartClient">
      <summary>
        <para>Called on every NetworkBehaviour when it is activated on a client.</para>
        <para>Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.dontDestroyOnLoad">
      <summary>
        <para>A flag to control whether the NetworkManager object is destroyed when the scene changes.</para>
        <para>This should be set if your game has a single NetworkManager that exists for the lifetime of the process. If there is a NetworkManager in each scene, then this should not be set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.globalConfig">
      <summary>
        <para>The transport layer global configuration to be used.</para>
        <para>This defines global settings for the operation of the transport layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyPlayer.readyToBegin">
      <summary>
        <para>This is a flag that control whether this player is ready for the game to begin.</para>
        <para>When all players are ready to begin, the game will start. This should not be set directly, the SendReadyToBeginMessage function should be called on the client to set it on the server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkLobbyPlayer.ShowLobbyGUI">
      <summary>
        <para>This flag controls whether the default UI is shown for the lobby player.</para>
        <para>As this UI is rendered using the old GUI system, it is only recommended for testing purposes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyPlayer.slot">
      <summary>
        <para>The slot within the lobby that this player inhabits.</para>
        <para>Lobby slots are global for the game - each player has a unique slotId.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientEnterLobby">
      <summary>
        <para>This is a hook that is invoked on all player objects when entering the lobby.</para>
        <para>Note: isLocalPlayer is not guaranteed to be set until OnStartLocalPlayer is called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientExitLobby">
      <summary>This is a hook that is invoked on all player objects when exiting the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientReady(System.Boolean)">
      <summary>
        <para>This is a hook that is invoked on clients when a LobbyPlayer switches between ready or not ready.</para>
        <para>This function is called when the a client player calls SendReadyToBeginMessage() or SendNotReadyToBeginMessage().</para>
      </summary>
      <param name="readyState">Whether the player is ready or not.</param>
      <seealso cref="M:UnityEngine.Networking.NetworkLobbyPlayer.SendReadyToBeginMessage">
      </seealso>
      <seealso cref="M:UnityEngine.Networking.NetworkLobbyPlayer.SendNotReadyToBeginMessage">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.RemovePlayer">
      <summary>
        <para>This removes this player from the lobby.</para>
        <para>This player object will be destroyed - on the server and on all clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendNotReadyToBeginMessage">
      <summary>This is used on clients to tell the server that this player is not ready for the game to begin.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendReadyToBeginMessage">
      <summary>This is used on clients to tell the server that this player is ready for the game to begin.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendSceneLoadedMessage">
      <summary>
        <para>This is used on clients to tell the server that the client has switched from the lobby to the GameScene and is ready to play.</para>
        <para>This message triggers the server to replace the lobby player with the game player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.client">
      <summary>
        <para>The client instance that is being used to connect to the host.</para>
        <para>This is populated by the Initialize() method. It will be set automatically by the NetworkManager if one is being used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.disconnectedFromHost">
      <summary>True is this is a client that has been disconnected from a host.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.hostMigration">
      <summary>
        <para>Controls whether host migration is active.</para>
        <para>If this is not true, then SendPeerInfo() will not send peer information to clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.hostWasShutdown">
      <summary>True if this was the host and the host has been shut down.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.matchInfo">
      <summary>Information about the match. This may be null if there is no match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.newHostAddress">
      <summary>
        <para>The IP address of the new host to connect to.</para>
        <para>The FindNewHost utility function will set this address. Methods of choosing the new host that are implemented by users should also set this address. The default UI button to "Reconnect to New Host" uses this address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.offsetX">
      <summary>The X offset in pixels of the migration manager default GUI.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.offsetY">
      <summary>The Y offset in pixels of the migration manager default GUI.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.oldServerConnectionId">
      <summary>
        <para>The connectionId that this client was assign on the old host.</para>
        <para>This is the Id that will be set on the ClientScene as the ReconnectId. This Id will be used to identify the client when it connects to the new host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.peers">
      <summary>
        <para>The set of peers involved in the game. This includes the host and this client.</para>
        <para>This is populated on clients when they recieve a MsgType.NetworkInfo message from the host. That message is sent when SendPeerInfo() is called on the host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.pendingPlayers">
      <summary>
        <para>The player objects that have been disabled, and are waiting for their corresponding clients to reconnect.</para>
        <para>There may be multiple pending player GameObjects for each peer. Each will have a different playerControllerId. The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.showGUI">
      <summary>Flag to toggle display of the default UI.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.waitingReconnectToNewHost">
      <summary>True if this is a client that was disconnected from the host and is now waiting to reconnect to the new host.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.waitingToBecomeNewHost">
      <summary>True if this is a client that was disconnected from the host, and was chosen as the new host.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.BecomeNewHost(System.Int32)">
      <summary>
        <para>This causes a client that has been disconnected from the host to become the new host of the game.</para>
        <para>This starts a server, initializes it with the state of the existing networked objects, and starts a local client so that this client becomes a host. The old NetworkClient instance that was connected to the old host is destroyed. This will cause OnStartServer to be called on networked objects in the scene. Any player objects for this peer will automatically be re-added through the local client that was created.</para>
      </summary>
      <param name="port">The network port to listen on.</param>
      <returns>True if able to become the new host.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.DisablePlayerObjects">
      <summary>
        <para>This causes objects for known players to be disabled.</para>
        <para>These objects are added to the pendingPlayers list, and will be re-enabled when their clients reconnect. This happens when the connection to the host of the game is lost.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.FindNewHost(UnityEngine.Networking.NetworkSystem.PeerInfoMessage@,System.Boolean@)">
      <summary>
        <para>This is a utility function to pick one of the peers in the game as the new host.</para>
        <para>This function implements the default host-choosing strategy of picking the peer with the lowest connectionId on the server. Applications are not required to use this function to choose the new host. They can use any method they want. The choice does not have to be made synchronously, so it is possible to communicate with an external service to choose the new host. However, the default UI of the NetworkMigrationManager calls into this function.</para>
      </summary>
      <param name="newHostInfo">Information about the new host, including the IP address.</param>
      <param name="youAreNewHost">True if this client is to be the new host.</param>
      <returns>True if able to pick a new host.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.Initialize(UnityEngine.Networking.NetworkClient,UnityEngine.Networking.Match.MatchInfo)">
      <summary>
        <para>Used to initialize the migration manager with client and match information.</para>
        <para>This is called automatically by the NetworkManager from within StartClient() if a NetworkManager is being used with the migration manager.</para>
      </summary>
      <param name="newClient">The NetworkClient being used to connect to the host.</param>
      <param name="newMatchInfo">Information about the match being used. This may be null if there is no match.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.LostHostOnClient(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This should be called on a client when it has lost its connection to the host.</para>
        <para>This will caus the virtual function OnClientDisconnectedFromHost to be invoked. This is called automatically by the NetworkManager if one is in use.</para>
      </summary>
      <param name="conn">The connection of the client that was connected to the host.</param>
      <returns>True if the client should stay in the on-line scene.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.LostHostOnHost">
      <summary>
        <para>This should be called on a host when it has has been shutdown.</para>
        <para>This causes the virtual function OnServerHostShutdown to be invoked. This is called automatically by the NetworkManager if one is in use.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.ReconnectObjectForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>This re-establishes a non-player object with client authority with a client that is reconnected. It is similar to NetworkServer.SpawnWithClientAuthority().</para>
        <para>This is called by the default implementation of OnServerReconnectObject.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldObject">The object with client authority that is being reconnected.</param>
      <param name="oldConnectionId">This client's connectionId on the old host.</param>
      <returns>True if the object was reconnected.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.ReconnectPlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32,System.Int16)">
      <summary>
        <para>This re-establishes a player object with a client that is reconnected. It is similar to NetworkServer.AddPlayerForConnection(). The player game object will become the player object for the new connection.</para>
        <para>This is called by the default implementation of OnServerReconnectPlayer.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldPlayer">The player object.</param>
      <param name="oldConnectionId">This client's connectionId on the old host.</param>
      <param name="playerControllerId">The playerControllerId of the player that is rejoining.</param>
      <returns>True if able to re-add this player.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.Reset(System.Int32)">
      <summary>Resets the migration manager, and sets the ClientScene's ReconnectId.</summary>
      <param name="reconnectId">The connectionId for the ClientScene to use when reconnecting.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.SendPeerInfo">
      <summary>
        <para>This sends the set of peers in the game to all the peers in the game.</para>
        <para>This is called automatically by the NetworkManager if one is active. It happens when clients connect to and disconnect from the server, and when players are added and removed from clients. The function SendPeers() udpates all clients with the information about which client owns which objects. It is automatically called when players are added and removed via the NetworkManager, but there is no hook in the NetworkManager when non-player client authority objects are added and removed. SendPeerInfo() is NOT called automatically. It is up to user code to call SendPeerInfo() when they want to update the set of client-owned objects.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkProximityChecker.OnCheckObserver(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Callback used by the visibility system to determine if an observer (player) can see this object.</para>
        <para>If this function returns true, the network connection will be added as an observer.</para>
      </summary>
      <param name="conn">Network connection of a player.</param>
      <returns>True if the player can see this object.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkProximityChecker.OnSetLocalVisibility(System.Boolean)">
      <summary>
        <para>Callback used by the visibility system for objects on a host.</para>
        <para>Objects on a host (with a local client) cannot be disabled or destroyed when they are not visibile to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host.</para>
      </summary>
      <param name="vis">New visibility state.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.manager">
      <summary>The NetworkManager associated with this HUD.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.offsetX">
      <summary>The horizontal offset in pixels to draw the HUD runtime GUI at.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.offsetY">
      <summary>The vertical offset in pixels to draw the HUD runtime GUI at.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.showGUI">
      <summary>Whether to show the default control HUD at runtime.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.netId">
      <summary>The networkId of the player object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.obj">
      <summary>The gameObject for the player.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.playerControllerId">
      <summary>
        <para>The playerControllerId of the player GameObject.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.AddExternalConnection(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This accepts a network connection from another external source and adds it to the server.</para>
        <para>This connection will use the callbacks registered with the server, and can have players added to it like any other connection.</para>
      </summary>
      <param name="conn">Network connection to add.</param>
      <returns>True if added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.AddPlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int16)">
      <summary>
        <para>When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection.</para>
        <para>When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for "adding" a player, not for "replacing" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearHandlers">
      <summary>Clear all registered callback handlers.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearLocalObjects">
      <summary>This clears all of the networked objects that the server is aware of. This can be required if a scene change deleted all of the objects without destroying them in the normal manner.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearSpawners">
      <summary>Clears all registered spawn prefab and spawn handler functions for this server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.checkMethod">
      <summary>Which method to use for checking proximity of players.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>This configures the transport layer settings for the server.</summary>
      <param name="config">Transport layer confuration object.</param>
      <param name="maxConnections">The maximum number of client connections to allow.</param>
      <returns>True if successfully configured.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Configure(UnityEngine.Networking.HostTopology)">
      <summary>This configures the transport layer settings for the server.</summary>
      <param name="topology">Transport layer topology object to use.</param>
      <returns>True if successfully configured.</returns>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.forceHidden">
      <summary>
        <para>Flag to force this object to be hidden for players.</para>
        <para>If this object is a player object, it will not be hidden for that player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.visRange">
      <summary>The maximim range that objects will be visible at.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Destroy(UnityEngine.GameObject)">
      <summary>
        <para>Destroys this object and corresponding objects on all clients.</para>
        <para>In some cases it is useful to remove an object but not delete it on the server. For that, use NetworkServer.UnSpawn() instead of NetworkServer.Destroy().</para>
      </summary>
      <param name="obj">Game object to destroy.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.visUpdateInterval">
      <summary>How often (in seconds) that this object should update the set of players that can see it.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.DestroyPlayersForConnection(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This destroys all the player objects associated with a NetworkConnections on a server.</para>
        <para>This is used when a client disconnects, to remove the players for that client. This also destroys non-player objects that have client authority set for this connection.</para>
      </summary>
      <param name="conn">The connections object to clean up for.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.DisconnectAll">
      <summary>
        <para>Disconnect all currently connected clients.</para>
        <para>This can only be called on the server. Clients will receive the Disconnect message.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.FindLocalObject(UnityEngine.Networking.NetworkInstanceId)">
      <summary>
        <para>This finds the local NetworkIdentity object with the specified network Id.</para>
        <para>Since netIds are the same on the server and all clients for a game, this allows clients to send a netId of a local game objects, and have the server find the corresponding server object.</para>
      </summary>
      <param name="netId">The netId of the NetworkIdentity object to find.</param>
      <returns>The game object that matches the netId.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetConnectionStats">
      <summary>Gets aggregate packet stats for all connections.</summary>
      <returns>Dictionary of msg types and packet statistics.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetStatsIn(System.Int32@,System.Int32@)">
      <summary>Get inbound network statistics for the server.</summary>
      <param name="numMsgs">Number of messages received so far.</param>
      <param name="numBytes">Number of bytes received so far.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetStatsOut(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Get outbound network statistics for the client.</summary>
      <param name="numMsgs">Number of messages sent so far (including collated messages send through buffer).</param>
      <param name="numBufferedMsgs">Number of messages sent through buffer.</param>
      <param name="numBytes">Number of bytes sent so far.</param>
      <param name="lastBufferedPerSecond">Number of messages buffered for sending per second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Listen(System.String,System.Int32)">
      <summary>Start the server on the given port number. Note that if a match has been created, this will listen using the Relay server instead of a local socket.</summary>
      <param name="ipAddress">The IP address to bind to (optional).</param>
      <param name="serverPort">Listen port number.</param>
      <returns>True if listen succeeded.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Listen(System.Int32)">
      <summary>Start the server on the given port number. Note that if a match has been created, this will listen using the Relay server instead of a local socket.</summary>
      <param name="serverPort">Listen port number.</param>
      <returns>True if listen succeeded.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ListenRelay(System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID)">
      <summary>Starts a server using a Relay server. This is the manual way of using the Relay server, as the regular NetworkServer.Connect() will automatically use the Relay server if a match exists.</summary>
      <param name="relayIp">Relay server IP Address.</param>
      <param name="relayPort">Relay server port.</param>
      <param name="netGuid">GUID of the network to create.</param>
      <param name="sourceId">This server's sourceId.</param>
      <param name="nodeId">The node to join the network with.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>Register a handler for a particular message type.</para>
        <para>There are several system message types which you can add handlers for. You can also add your own message types.</para>
        <para>The system message types are listed below:</para>
        <para>Most of these messages are for internal use only. Users should not define message ids in this range.</para>
      </summary>
      <param name="msgType">Message type number.</param>
      <param name="handler">Function handler which will be invoked for when this message type is received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.RemoveExternalConnection(System.Int32)">
      <summary>This removes an external connection added with AddExternalConnection().</summary>
      <param name="connectionId">The id of the connection to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ReplacePlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int16)">
      <summary>
        <para>This replaces the player object for a connection with a different player object. The old player object is not destroyed.</para>
        <para>If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>True if player was replaced.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Reset">
      <summary>Reset the NetworkServer singleton.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ResetConnectionStats">
      <summary>Resets the packet stats on all connections.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendByChannelToAll(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>Sends a network message to all connected clients on a specified transport layer QoS channel.</summary>
      <param name="msgType">The message id.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to use.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendByChannelToReady(UnityEngine.GameObject,System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>Sends a network message to all connected clients that are "ready" on a specified transport layer QoS channel.</summary>
      <param name="contextObj">An object to use for context when calculating object visibility. If null, then the message is sent to all ready clients.</param>
      <param name="msgType">The message id.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to send on.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendBytesToPlayer(UnityEngine.GameObject,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends an array of bytes to a specific player.</para>
        <para>This bypasses the usual serialization and message structures, allowing raw bytes to be send to a player. The contents will be processed as a message on the client of the player, so it must be structured properly.</para>
      </summary>
      <param name="player">The player to send the bytes to.</param>
      <param name="buffer">Array of bytes to send.</param>
      <param name="numBytes">Size of array.</param>
      <param name="channelId">Transport layer channel id to send bytes on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetAllClientsNotReady">
      <summary>
        <para>Marks all connected clients as no longer ready.</para>
        <para>All clients will no longer be sent state synchronization updates. The player's clients can call ClientManager.Ready() again to re-enter the ready state. This is useful when switching scenes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetClientNotReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Sets the client of the connection to be not-ready.</para>
        <para>Clients that are not ready do not receive spawned objects or state synchronization updates. They client can be made ready again by calling SetClientReady().</para>
      </summary>
      <param name="conn">The connection of the client to make not ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetClientReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Sets the client to be ready.</para>
        <para>When a client has signaled that it is ready, this method tells the server that the client is ready to receive spawned objects and state synchronization updates. This is usually called in a handler for the SYSTEM_READY message. If there is not specific action a game needs to take for this message, relying on the default ready handler function is probably fine, so this call wont be needed.</para>
      </summary>
      <param name="conn">The connection of the client to make ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class used when creating new network connections.</para>
        <para>The class must be derived from NetworkConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Shutdown">
      <summary>This shuts down the server and disconnects all clients.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Spawn(UnityEngine.GameObject)">
      <summary>
        <para>Spawn the given game object on all clients which are ready.</para>
        <para>This will cause a new object to be instantiated from the registered prefab, or from a custom spawn function.</para>
      </summary>
      <param name="obj">Game object with NetworkIdentity to spawn.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnObjects">
      <summary>
        <para>This causes NetworkIdentity objects in a scene to be spawned on a server.</para>
        <para>NetworkIdentity objects in a scene are disabled by default. Calling SpawnObjects() causes these scene objects to be enabled and spawned. It is like calling NetworkServer.Spawn() for each of them.</para>
      </summary>
      <returns>Success if objects where spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
        <para>This is the same as calling <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority"></see> on the spawned object.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="player">The player object to set Client Authority to.</param>
      <returns>True if the object was spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
        <para>This is the same as calling <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority"></see> on the spawned object.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="conn">The connection to set Client Authority to.</param>
      <returns>True if the object was spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.Networking.NetworkHash128,UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
        <para>This is the same as calling <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority"></see> on the spawned object.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="assetId">The assetId of the object to spawn. Used for custom spawn handlers.</param>
      <param name="conn">The connection to set Client Authority to.</param>
      <returns>True if the object was spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.UnregisterHandler(System.Int16)">
      <summary>Unregisters a handler for a particular message type.</summary>
      <param name="msgType">The message type to remove the handler for.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.UnSpawn(UnityEngine.GameObject)">
      <summary>
        <para>This takes an object that has been spawned and un-spawns it.</para>
        <para>The object will be removed from clients that it was spawned on, or the custom spawn handler function on the client will be called for the object. Unlike when calling NetworkServer.Destroy(), on the server the object will NOT be destroyed. This allows the server to re-use the object, even spawn it again later.</para>
      </summary>
      <param name="obj">The spawned object to be unspawned.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadRect">
      <summary>Reads a Unity Rect object.</summary>
      <returns>The rect read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSByte">
      <summary>Reads a signed byte from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSceneId">
      <summary>Reads a NetworkSceneId from the stream.</summary>
      <returns>The NetworkSceneId read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSingle">
      <summary>Reads a float from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadString">
      <summary>Reads a string from the stream. (max of 32k bytes).</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadTransform">
      <summary>
        <para>Reads a reference to a Transform from the stream.</para>
        <para>The game object of this Transform must have a NetworkIdentity.</para>
      </summary>
      <returns>The transform object read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt16">
      <summary>Reads an unsigned 16 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt32">
      <summary>Reads an unsigned 32 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt64">
      <summary>Reads an unsigned 64 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector2">
      <summary>Reads a Unity Vector2 object.</summary>
      <returns>The vector read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector3">
      <summary>Reads a Unity Vector3 objects.</summary>
      <returns>The vector read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector4">
      <summary>Reads a Unity Vector4 object.</summary>
      <returns>The vector read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.SeekZero">
      <summary>Sets the current position of the reader's stream to the start of the stream.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ToString">
      <summary>Returns a string representation of the reader's buffer.</summary>
      <returns>Buffer contents.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkSceneId.Value">
      <summary>The internal value for this object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSceneId.IsEmpty">
      <summary>Returns true if the value is zero. Non-scene objects - ones which are spawned at runtime will have a sceneId of zero.</summary>
      <returns>True if zero.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSceneId.ToString">
      <summary>Returns a string like SceneId:value.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers.players">
      <summary>The list of players for a connection.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.active">
      <summary>
        <para>Checks if the server has been started.</para>
        <para>This will be true after NetworkServer.Listen() has been called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.connections">
      <summary>
        <para>A list of all the current connections from clients.</para>
        <para>The connections in the list are at the index of their connectionId. There may be nulls in this list for disconnected clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.dontListen">
      <summary>
        <para>If you enable this, the server will not listen for incoming connections on the regular network port.</para>
        <para>This can be used if the game is running in host mode and does not want external players to be able to connect - making it like a single-player game. Also this can be useful when using AddExternalConnection().</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.handlers">
      <summary>
        <para>Dictionary of the message handlers registered with the server.</para>
        <para>The key to the dictionary is the message Id.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.hostTopology">
      <summary>
        <para>The host topology that the server is using.</para>
        <para>This is read-only once the server is started.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.listenPort">
      <summary>The port that the server is listening on.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.localClientActive">
      <summary>
        <para>True is a local client is currently active on the server.</para>
        <para>This will be true for "Hosts" on hosted server games.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.localConnections">
      <summary>A list of local connections on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.maxDelay">
      <summary>
        <para>The maximum delay before sending packets on connections.</para>
        <para>In seconds. The default of 0.01 seconds means packets will be delayed at most by 10 milliseconds. Setting this to zero will disable HLAPI connection buffering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.networkConnectionClass">
      <summary>
        <para>The class to be used when creating new network connections.</para>
        <para>This can be set with SetNetworkConnectionClass. This allows custom classes that do special processing of data from the transport layer to be used with the NetworkServer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.numChannels">
      <summary>The number of channels the network is configure with.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.objects">
      <summary>
        <para>This is a dictionary of networked objects that have been spawned on the server.</para>
        <para>The key to the dictionary is NetworkIdentity netId.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.serverHostId">
      <summary>The transport layer hostId used by this server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.useWebSockets">
      <summary>
        <para>This makes the server listen for WebSockets connections instead of normal transport layer connections.</para>
        <para>This allows WebGL clients to connect to this server. Note that WebGL clients cannot listen for WebSocket connections, they can only make outgoing WebSockets connections.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.MaxMessageSize">
      <summary>
        <para>The size of the largest message in bytes that can be sent on a NetworkConnection.</para>
        <para>Note that channels that are not Fragmented cannot send messages larger than the Maximum Transmission Unity (MTU) size, which is about 1400 bytes by default.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.channelId">
      <summary>The transport layer channel the message was sent on.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.conn">
      <summary>The connection the message was recieved on.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.msgType">
      <summary>The id of the message type of the message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.reader">
      <summary>
        <para>A NetworkReader object that contains the contents of the message.</para>
        <para>For some built-in message types with no body, this can be null.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMessage.Dump(System.Byte[],System.Int32)">
      <summary>Returns a string with the numeric representation of each byte in the payload.</summary>
      <param name="payload">Network message payload to dump.</param>
      <param name="sz">Length of payload in bytes.</param>
      <returns>Dumped info from payload.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkReader.Length">
      <summary>The current length of the buffer.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkReader.Position">
      <summary>The current position within the buffer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBoolean">
      <summary>Reads a boolean from the stream.</summary>
      <returns>The value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadByte">
      <summary>Reads a byte from the stream.</summary>
      <returns>The value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBytes(System.Int32)">
      <summary>Reads a number of bytes from the stream.</summary>
      <param name="count">Number of bytes to read.</param>
      <returns>Bytes read. (this is a copy).</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBytesAndSize">
      <summary>
        <para>This read a 16-bit byte count and a array of bytes of that size from the stream.</para>
        <para>The format used by this function is the same as NetworkWriter.WriteBytesAndSize().</para>
      </summary>
      <returns>The bytes read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadChar">
      <summary>Reads a char from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadColor">
      <summary>Reads a unity Color objects.</summary>
      <returns>The color read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadColor32">
      <summary>Reads a unity color32 objects.</summary>
      <returns>The colo read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadDecimal">
      <summary>Reads a decimal from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadDouble">
      <summary>Reads a double from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadGameObject">
      <summary>Reads a reference to a GameObject from the stream.</summary>
      <returns>The GameObject referenced.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt16">
      <summary>Reads a signed 16 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt32">
      <summary>Reads a signed 32bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt64">
      <summary>Reads a signed 64 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadMatrix4x4">
      <summary>Reads a unity Matrix4x4 object.</summary>
      <returns>The matrix read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkHash128">
      <summary>Reads a NetworkHash128 assetId.</summary>
      <returns>The assetId object read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkId">
      <summary>Reads a NetworkInstanceId from the stream.</summary>
      <returns>The NetworkInstanceId read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkIdentity">
      <summary>Reads a reference to a NetworkIdentity from the stream.</summary>
      <returns>The NetworkIdentity object read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPackedUInt32">
      <summary>Reads a 32-bit variable-length-encoded value.</summary>
      <returns>The 32 bit value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPackedUInt64">
      <summary>Reads a 64-bit variable-length-encoded value.</summary>
      <returns>The 64 bit value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPlane">
      <summary>Reads a unity Plane object.</summary>
      <returns>The plane read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadQuaternion">
      <summary>Reads a Unity Quaternion object.</summary>
      <returns>The quaternion read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadRay">
      <summary>Reads a Unity Ray object.</summary>
      <returns>The ray read from the stream.</returns>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics3D">
      <summary>Use 3D physics to determine proximity.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics2D">
      <summary>Use 2D physics to determine proximity.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.connections">
      <summary>A read-only list of the current connections being managed.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.handlers">
      <summary>The message handler functions that are registered.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.hostTopology">
      <summary>
        <para>The transport layer host-topology that the server is configured with.</para>
        <para>A host topology object can be passed to the Listen() function, or a default host topology that is compatible with the default topology of NetworkClient will be used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.listenPort">
      <summary>The network port that the server is listening on.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.messageBuffer">
      <summary>The internal buffer that the server reads data from the network into. This will contain the most recent data read from the network when OnData() is called.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.messageReader">
      <summary>A NetworkReader object that is bound to the server's messageBuffer.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.networkConnectionClass">
      <summary>
        <para>The type of class to be created for new network connections from clients.</para>
        <para>By default this is the NetworkConnection class, but it can be changed with SetNetworkConnectionClass() to classes derived from NetworkConnections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.serverHostId">
      <summary>The transport layer hostId of the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.useWebSockets">
      <summary>
        <para>This causes the server to listen for WebSocket connections instead of regular transport layer connections.</para>
        <para>This allows WebGL clients to talk to the server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.ClearHandlers">
      <summary>Clears the message handlers that are registered.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>This configures the network transport layer of the server.</summary>
      <param name="config">The transport layer configuration to use.</param>
      <param name="maxConnections">Maximum number of network connections to allow.</param>
      <returns>True if configured.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Configure(UnityEngine.Networking.HostTopology)">
      <summary>This configures the network transport layer of the server.</summary>
      <param name="topology">The transport layer host topology to use.</param>
      <returns>True if configured.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Disconnect(System.Int32)">
      <summary>This disconnects the connection of the corresponding connection id.</summary>
      <param name="connectionId">The id of the connection to disconnect.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.DisconnectAllConnections">
      <summary>This disconnects all of the active connections.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.FindConnection(System.Int32)">
      <summary>This looks up the network connection object for the specified connection Id.</summary>
      <param name="connectionId">The connection id to look up.</param>
      <returns>A NetworkConnection objects, or null if no connection found.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Initialize">
      <summary>Initialization function that is invoked when the server starts listening. This can be overridden to perform custom initialization such as setting the NetworkConnectionClass.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Listen(System.Int32)">
      <summary>This starts the server listening for connections on the specified port.</summary>
      <param name="serverListenPort">The port to listen on.</param>
      <returns>True if able to listen.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Listen(System.Int32,UnityEngine.Networking.HostTopology)">
      <summary>This starts the server listening for connections on the specified port.</summary>
      <param name="serverListenPort">The port to listen on.</param>
      <param name="topology">The transport layer host toplogy to configure with.</param>
      <returns>True if able to listen.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.ListenRelay(System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID)">
      <summary>Starts a server using a Relay server. This is the manual way of using the Relay server, as the regular NetworkServer.Connect() will automatically use the Relay server if a match exists.</summary>
      <param name="relayIp">Relay server IP Address.</param>
      <param name="relayPort">Relay server port.</param>
      <param name="netGuid">GUID of the network to create.</param>
      <param name="sourceId">This server's sourceId.</param>
      <param name="nodeId">The node to join the network with.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnConnected(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This virtual function can be overridden to perform custom functionality for new network connections.</para>
        <para>By default OnConnected just invokes a connect event on the new connection.</para>
      </summary>
      <param name="conn">The new connection object.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnConnectError(System.Int32,System.Byte)">
      <summary>A virtual function that is invoked when there is a connection error.</summary>
      <param name="connectionId">The id of the connection with the error.</param>
      <param name="error">The error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnData(UnityEngine.Networking.NetworkConnection,System.Int32,System.Int32)">
      <summary>
        <para>This virtual function can be overridden to perform custom functionality when data is received for a connection.</para>
        <para>By default this function calls HandleData() which will process the data and invoke message handlers for any messages that it finds.</para>
      </summary>
      <param name="conn">The connection that data was received on.</param>
      <param name="receivedSize">The amount of data received.</param>
      <param name="channelId">The channel that data was received on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnDataError(UnityEngine.Networking.NetworkConnection,System.Byte)">
      <summary>A virtual function that is called when a data error occurs on a connection.</summary>
      <param name="conn">The connection object that the error occured on.</param>
      <param name="error">The error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnDisconnected(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This virtual function can be overridden to perform custom functionality for disconnected network connections.</para>
        <para>By default OnConnected just invokes a disconnect event on the new connection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnDisconnectError(UnityEngine.Networking.NetworkConnection,System.Byte)">
      <summary>A virtual function that is called when a disconnect error happens.</summary>
      <param name="conn">The connection object that the error occured on.</param>
      <param name="error">The error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>This registers a handler function for a message Id.</summary>
      <param name="msgType">Message Id to register handler for.</param>
      <param name="handler">Handler function.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.RemoveConnectionAtIndex(System.Int32)">
      <summary>
        <para>This removes a connection object from the server's list of connections.</para>
        <para>This is a low-level function that should not be used for regular connections. It is only safe to remove connections added with SetConnectionAtIndex() using this function.</para>
      </summary>
      <param name="connectionId">The id of the connection to remove.</param>
      <returns>True if removed.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SendBytesTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>This sends the data in an array of bytes to the connected client.</summary>
      <param name="connectionId">The id of the connection to send on.</param>
      <param name="bytes">The data to send.</param>
      <param name="numBytes">The size of the data to send.</param>
      <param name="channelId">The channel to send the data on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SendWriterTo(System.Int32,UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>This sends the contents of a NetworkWriter object to the connected client.</summary>
      <param name="connectionId">The id of the connection to send on.</param>
      <param name="writer">The writer object to send.</param>
      <param name="channelId">The channel to send the data on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SetConnectionAtIndex(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This adds a connection created by external code to the server's list of connections, at the connection's connectionId index.</para>
        <para>Connections are usually added automatically, this is a low-level function for the rare special case of externally created connections.</para>
      </summary>
      <param name="conn">A new connection object.</param>
      <returns>True if added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class that is used when creating new network connections.</para>
        <para>The class must be derived from NetworkConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Stop">
      <summary>This stops a server from listening.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.UnregisterHandler(System.Int16)">
      <summary>This unregisters a registered message handler function.</summary>
      <param name="msgType">The message id to unregister.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Update">
      <summary>
        <para>This function pumps the server causing incoming network data to be processed, and pending outgoing data to be sent.</para>
        <para>This should be called each frame, and is called automatically for the server used by NetworkServer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.UpdateConnections">
      <summary>
        <para>This function causes pending outgoing data on connections to be sent, but unlike Update() it works when the server is not listening.</para>
        <para>When the server is using externally added connections and the dontListen flag is set, the regular connection flush in the Update() function does not happen. In this case, UpdateConnections can be called to pump the external connections. This is an advanced usage that should not be required unless the server uses custom NetworkConnection classes that do not use the built-in transport layer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgData">
      <summary>The extra message data included in the AddPlayerMessage.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgSize">
      <summary>The size of the extra message data included in the AddPlayerMessage.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.playerControllerId">
      <summary>
        <para>The playerId of the new player.</para>
        <para>This is specified by the client when they call NetworkClient.AddPlayer(someId). The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerListMessage.oldServerConnectionId">
      <summary>The connectionId of this client on the old host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerListMessage.peers">
      <summary>The list of participants in a networked game.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.PeerListMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.EmptyMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.PeerListMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.EmptyMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ErrorMessage.errorCode">
      <summary>
        <para>The error code.</para>
        <para>This is a value from the UNETError enumeration.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.ErrorMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.ErrorMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.IntegerMessage.value">
      <summary>The integer value to serialize.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.IntegerMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.IntegerMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.authorityState">
      <summary>The new state of authority for the object referenced by this message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.connectionId">
      <summary>The connection Id (on the server) of the peer whose authority is changing for the object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.netId">
      <summary>The network id of the object whose authority state changed.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.address">
      <summary>The IP address of the peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.connectionId">
      <summary>The id of the NetworkConnection associated with the peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isHost">
      <summary>True if this peer is the host of the network game.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isYou">
      <summary>True if the peer if the same as the current client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.playerIds">
      <summary>The players for this peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.port">
      <summary>The network port being used by the peer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.netId">
      <summary>The networkId of the player object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.playerControllerId">
      <summary>
        <para>The playerControllerId of the player GameObject.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage.playerControllerId">
      <summary>
        <para>The player ID of the player GameObject which should be removed.</para>
        <para>This is specified by the client when they call NetworkClient.RemovePlayer(someId). The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.StringMessage.value">
      <summary>The string that will be serialized.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.StringMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.StringMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgData">
      <summary>Additional data.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgSize">
      <summary>Size of additional data.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.netId">
      <summary>The networkId of this player on the old host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.oldConnectionId">
      <summary>This client's connectionId on the old host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.playerControllerId">
      <summary>
        <para>The playerControllerId of the player that is rejoining.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.ReconnectMessage.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSystem.ReconnectMessage.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.characterContoller">
      <summary>Cached CharacterController.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.clientMoveCallback2D">
      <summary>
        <para>A callback that can be used to validate on the server, the movement of client authoritative objects.</para>
        <para>This version of the callback works with objects that use 2D physics. The callback function may return false to reject the movement request completely. It may also modify the movement parameters - which are passed by reference. The example below set the callback in OnStartServer, and will disconnect a client that moves an object into an invalid position after a number of failures.</para>
        <para>This kind of server-side movement validation should be used in conjunction with client side movement validation. The callback should only detect a failure if a client is by-passing client side movement checks - by cheating.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.clientMoveCallback3D">
      <summary>
        <para>A callback that can be used to validate on the server, the movement of client authoritative objects.</para>
        <para>This version of the callback works with objects that use 3D physics. The callback function may return false to reject the movement request completely. It may also modify the movement parameters - which are passed by reference. The example below set the callback in OnStartServer, and will disconnect a client that moves an object into an invalid position after a number of failures.</para>
        <para>This kind of server-side movement validation should be used in conjunction with client side movement validation. The callback should only detect a failure if a client is by-passing client side movement checks - by cheating.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.grounded">
      <summary>
        <para>Tells the NetworkTransform that it is on a surface (this is the default).</para>
        <para>Object that are NOT grounded will not interpolate their vertical velocity. This avoid the problem of interpolation fighting with gravity on non-authoritative objects. This only works for RigidBody2D physics objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.interpolateMovement">
      <summary>
        <para>Enables interpolation of the synchronized movement.</para>
        <para>The larger this number is, the faster the object will interpolate to the target position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.interpolateRotation">
      <summary>
        <para>Enables interpolation of the synchronized rotation.</para>
        <para>If this is not set, object will snap to the new rotation. The larger this number is, the faster the object will interpolate to the target facing direction.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.lastSyncTime">
      <summary>The most recent time when a movement synchronization packet arrived for this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.movementTheshold">
      <summary>The distance that an object can move without sending a movement synchronization update.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rigidbody2D">
      <summary>Cached Rigidbody2D.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rigidbody3D">
      <summary>Cached Rigidbody.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rotationSyncCompression">
      <summary>How much to compress rotation sync updates.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.sendInterval">
      <summary>
        <para>The sendInterval controls how often state updates are sent for this object.</para>
        <para>Unlike most NetworkBehaviour scripts, for NetworkTransform this is implemented at a per-object level rather than at the per-script level. This allows more flexibility as this component is used in various situation. If sendInterval is non-zero, then transform state updates are send at most once every sendInterval seconds. However, if an object is stationary, no updates are sent. If sendInterval is zero, then no automatic updates are sent. In this case, calling SetDirtyBits() on the NetworkTransform will cause an updates to be sent. This could be used for objects like bullets that have a predictable trajectory.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.snapThreshold">
      <summary>If a movement update puts an object further from its current position that this value, it will snap to the position instead of moving smoothly.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.syncRotationAxis">
      <summary>Which axis should rotation by synchronized for.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncPosition">
      <summary>The target position interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncRotation2D">
      <summary>The target rotation interpolating towards.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncNone">
      <summary>Dont synchronize.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncTransform">
      <summary>Sync using the game object's base transform.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody2D">
      <summary>Sync using the <see cref="UnityEngine.Rigidbody2D"></see> component.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody3D">
      <summary>Sync using the <see cref="UnityEngine.Rigidbody"></see> component.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncCharacterController">
      <summary>Sync using the <see cref="UnityEngine.CharacterController"></see> component.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.None">
      <summary>Do not sync.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisX">
      <summary>Only x axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisY">
      <summary>Only the y axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisZ">
      <summary>Only the z axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXY">
      <summary>The x and y axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXZ">
      <summary>The x and z axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisYZ">
      <summary>The y and z axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXYZ">
      <summary>The x, y and z axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.CompressionSyncMode.None">
      <summary>Do not compress.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.CompressionSyncMode.Low">
      <summary>A low amount of compression that preserves accuracy.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.CompressionSyncMode.High">
      <summary>High Compression - sacrificing accuracy.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransform.OnSerialize(UnityEngine.Networking.NetworkWriter,System.Boolean)">
      <summary>
        <para>Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize().</para>
        <para>The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame.</para>
      </summary>
      <param name="writer">Writer to use to write to the stream.</param>
      <param name="initialState">If this is being called to send initial state.</param>
      <returns>True if data was written.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransform.OnStartAuthority">
      <summary>
        <para>This is invoked on behaviours that have authority, based on context and <see cref="UnityEngine.Networking.NetworkIdentity.localPlayerAuthority"></see>.</para>
        <para>This is called after <see cref="UnityEngine.Networking.NetworkAnimator.OnStartServer"></see> and <see cref="UnityEngine.Networking.NetworkAnimator.OnStartClient"></see>. When <see cref="UnityEngine.Networking.NetworkIdentity.AssignClientAuthority"></see> is called on the server, this will be called on the client that owns the object. When an object is spawned with <see cref="UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority"></see>, this will be called on the client that owns the object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransform.OnStartServer">
      <summary>
        <para>This is invoked for NetworkBehaviour objects when they become active on the server.</para>
        <para>This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a "host" as well as for object on a dedicated server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.syncRotationAxis">
      <summary>Which axis should rotation by synchronized for.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.target">
      <summary>The child transform to be synchronized.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.targetSyncPosition">
      <summary>The target position interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.targetSyncRotation3D">
      <summary>The target rotation interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncRotation3D">
      <summary>The target position interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncVelocity">
      <summary>The velocity send for synchronization.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.transformSyncMode">
      <summary>What method to use to sync the object's position.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.velocityThreshold">
      <summary>The minimum velocity difference that will be synchronized over the network.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransformChild.GetNetworkChannel">
      <summary>
        <para>This virtual function is used to specify the QoS channel to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The QoS channel for this script.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransformChild.GetNetworkSendInterval">
      <summary>
        <para>This virtual function is used to specify the send interval to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The time in seconds between updates.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransformChild.OnDeserialize(UnityEngine.Networking.NetworkReader,System.Boolean)">
      <summary>Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize().</summary>
      <param name="reader">Reader to read from the stream.</param>
      <param name="initialState">True if being sent initial state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransformChild.OnSerialize(UnityEngine.Networking.NetworkWriter,System.Boolean)">
      <summary>
        <para>Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize().</para>
        <para>The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame.</para>
      </summary>
      <param name="writer">Writer to use to write to the stream.</param>
      <param name="initialState">If this is being called to send initial state.</param>
      <returns>True if data was written.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransform.GetNetworkChannel">
      <summary>
        <para>This virtual function is used to specify the QoS channel to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The QoS channel for this script.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransform.GetNetworkSendInterval">
      <summary>
        <para>This virtual function is used to specify the send interval to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The time in seconds between updates.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransform.OnDeserialize(UnityEngine.Networking.NetworkReader,System.Boolean)">
      <summary>Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize().</summary>
      <param name="reader">Reader to read from the stream.</param>
      <param name="initialState">True if being sent initial state.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.childIndex">
      <summary>A unique Identifier for this NetworkTransformChild component on this root object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.clientMoveCallback3D">
      <summary>A callback function to allow server side validation of the movement of the child object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.interpolateMovement">
      <summary>
        <para>The rate to interpolate towards the target position.</para>
        <para>A value of 1 will snap to the position, and lower positive values will interpolate more slowly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.interpolateRotation">
      <summary>
        <para>The rate to interpolate to the target rotation.</para>
        <para>A value of 1 will snap to the position, and lower positive values will interpolate more slowly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.lastSyncTime">
      <summary>The most recent time when a movement synchronization packet arrived for this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.movementThreshold">
      <summary>
        <para>The distance that an object can move without sending a movement synchronization update.</para>
        <para>This applies to the child object's localPosition, not it's world position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.rotationSyncCompression">
      <summary>How much to compress rotation sync updates.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.sendInterval">
      <summary>The sendInterval controls how often state updates are sent for this object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransformVisualizer.OnStartClient">
      <summary>
        <para>Called on every NetworkBehaviour when it is activated on a client.</para>
        <para>Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransformVisualizer.OnStartLocalPlayer">
      <summary>
        <para>Called when the local player object has been set up.</para>
        <para>This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformVisualizer.visualizerPrefab">
      <summary>The prefab to use for the visualization object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WritePackedUInt32(System.UInt32)">
      <summary>This writes the 32-bit value to the stream using variable-length-encoding.</summary>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WritePackedUInt64(System.UInt64)">
      <summary>This writes the 64-bit value to the stream using variable-length-encoding.</summary>
      <param name="value">Value to write.</param>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.MaxPlayersPerClient">
      <summary>The maximum number of local players that a client connection can have.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.gameObject">
      <summary>The game object for this player.</summary>
    </member>
    <member name="P:UnityEngine.Networking.PlayerController.IsValid">
      <summary>Checks if this PlayerController has an actual player attached to it.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.playerControllerId">
      <summary>
        <para>The local player ID number of this player.</para>
        <para>The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.unetView">
      <summary>The NetworkIdentity component of the player.</summary>
    </member>
    <member name="M:UnityEngine.Networking.PlayerController.ToString">
      <summary>String representation of the player objects state.</summary>
      <returns>String with the object state.</returns>
    </member>
    <member name="M:UnityEngine.Networking.SyncListUInt.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListUInt)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkWriter.Position">
      <summary>The current position of the internal buffer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.AsArray">
      <summary>Returns the internal array of bytes the writer is using. This is NOT a copy.</summary>
      <returns>Internal buffer.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.FinishMessage">
      <summary>This fills out the size header of a message begun with StartMessage(), so that it can be send using Send() functions.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.SeekZero">
      <summary>Seeks to the start of the internal buffer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.StartMessage(System.Int16)">
      <summary>This begins a new message, which should be completed with FinishMessage() once the payload has been written.</summary>
      <param name="msgType">Message type.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.ToArray">
      <summary>Returns a copy of internal array of bytes the writer is using, it copies only the bytes used.</summary>
      <returns>Copy of data used by the writer.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Char)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Byte)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.SByte)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Int16)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.UInt16)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Int32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.UInt32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Int64)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.UInt64)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Single)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Double)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Decimal)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.String)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Boolean)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Byte[],System.Int32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="buffer">The byte buffer to write.</param>
      <param name="count">The number of bytes in the byte buffer to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="buffer">The byte buffer to write.</param>
      <param name="offset">The byte buffer array element to start writing from.</param>
      <param name="count">The number of bytes in the byte buffer to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Vector2)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Vector3)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Vector4)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Color)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Color32)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.GameObject)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Quaternion)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Rect)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Plane)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Ray)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Matrix4x4)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.MessageBase)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="msg">The network message to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.NetworkHash128)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.NetworkIdentity)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.NetworkInstanceId)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Networking.NetworkSceneId)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.Transform)">
      <summary>This writes a reference to an object, value, buffer or network message, together with a NetworkIdentity component to the stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WriteBytesAndSize(System.Byte[],System.Int32)">
      <summary>This writes a 16-bit count and a array of bytes of that length to the stream.</summary>
      <param name="buffer">Array of bytes to write.</param>
      <param name="count">Number of bytes from the array to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WriteBytesFull(System.Byte[])">
      <summary>
        <para>This writes a 16-bit count and an array of bytes of that size to the stream.</para>
        <para>Note that this will be the full allocated size of the array. So if the array is partially filled with data to send - then you should be using WriteBytesAndSize instead.</para>
      </summary>
      <param name="buffer">Bytes to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncListBool.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListBool)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListFloat.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListFloat)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListInt.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListInt)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerSpawnMethod.Random">
      <summary>
        <para>Spawn players at a randomly chosen starting position.</para>
        <para>A NetworkStartPosition will be randomly chosen by the NetworkManager from the set of NetworkStartPositions in the current scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerSpawnMethod.RoundRobin">
      <summary>
        <para>Spawn players at the next start position.</para>
        <para>The NetworkManager will spawn players at each NetworkStartPosition in the scene on a round-robin basis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListString.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListString)">
      <summary>An internal function used for serializing SyncList member variables.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ChannelOption.MaxPendingBuffers">
      <summary>
        <para>The option to set the number of pending buffers for a channel.</para>
        <para>These buffers are allocated dynamically as required when writes to the transport layer fail. Each buffer will be the size of maxPacketSize for the channel - usually around 1400 bytes. The default is 16 buffers. This only applies to reliable channels. If a reliable channel runs out of pnding buffers, data will be lost.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ChannelOption.AllowFragmentation">
      <summary>
        <para>The option to allow packet fragmentation for a channel.</para>
        <para>The transport layer has a MTU packet size limit of about 1400 bytes. This option allows larger packets sent on NetworkConnections to be automatically fragmented so that they can be sent with the transport layer. The limit for these packets is 64K. This type of packet fragmentation can lead to additional delays in the delivery of packets and additional memory usage. This is only allowed for reliable, sequenced channels.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ChannelOption.MaxPacketSize">
      <summary>
        <para>The option to set the maximum packet size allowed for a channel.</para>
        <para>It is possible to set a maximum packet size for a connection in the transport layer using the ConnectionConfig class, and globally using the GlobalConfig class. This option allows the maximum packet size for an individual channel to be set. This can only be set to less than the connection's maximum packets size, not more. This can only be done before sending any data on the connection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.Version.Current">
      <summary>The current UNET version.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ClientRpcAttribute.channel">
      <summary>The channel ID which this RPC transmission will use.</summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncVarAttribute.hook">
      <summary>The hook attribute can be used to specify a function to be called when the sync var changes value on the client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.TargetRpcAttribute.channel">
      <summary>The channel ID which this RPC transmission will use.</summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncEventAttribute.channel">
      <summary>
        <para>The UNET QoS channel that this event should be sent on.</para>
        <para>This defaults to zero - the default reliable channel. This can be used to make events that are not essential for game play (such as effects) unreliable.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.CommandAttribute.channel">
      <summary>The QoS channel to use to send this command on, see <see cref="UnityEngine.Networking.QosType"></see>.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSettingsAttribute.channel">
      <summary>
        <para>The QoS channel to use for updates for this script.</para>
        <para>Updates for SyncVar variables will be sent on the specified QoS channel. The default channel for scripts is zero.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSettingsAttribute.sendInterval">
      <summary>
        <para>The sendInterval control how frequently updates are sent for this script.</para>
        <para>If sendInterval is zero, updates will be sent at the end of the frame when dirty bits are set for that script. Note that setting the value of a SyncVar will automatically set dirty bits. If sendInterval is non-zero, updates are deferred until sendInterval seconds have passed since the last update for that script. So it can be used as a throttle in cases where the Sync value is changing constantly on the server, but you don't want it to be updated every frame. The default sendInterval for scripts is 0.1f seconds. The send interval can also be customized by implementing the virtual function GetNetworkSendInterval() on NetworkBehaviour.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.StayInOnlineScene">
      <summary>The client should stay in the online scene.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.SwitchToOfflineScene">
      <summary>The client should return to the offline scene.</summary>
    </member>
  </members>
</doc>