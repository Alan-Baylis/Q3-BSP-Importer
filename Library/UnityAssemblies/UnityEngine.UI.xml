<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.UI</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.UI.AnimationTriggers">
      <summary>Structure to store the state of an animation transition on a <see cref="UnityEngine.UI.Selectable"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.AspectRatioFitter">
      <summary>Resizes a RectTransform to fit a specified aspect ratio.</summary>
    </member>
    <member name="T:UnityEngine.UI.AspectRatioFitter.AspectMode">
      <summary>Specifies a mode to use to enforce an aspect ratio.</summary>
    </member>
    <member name="T:UnityEngine.UI.BaseMeshEffect">
      <summary>Base class for effects that modify the generated Mesh.</summary>
    </member>
    <member name="T:UnityEngine.UI.BaseVertexEffect">
      <summary>Base class for effects that modify the the generated Vertex Buffers.</summary>
    </member>
    <member name="T:UnityEngine.UI.Button">
      <summary>
        <para>A standard button that can be clicked in order to trigger an event.</para>
        <para>See Selectable for selection states.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Button.ButtonClickedEvent">
      <summary>Function definition for a button click event.</summary>
    </member>
    <member name="T:UnityEngine.UI.CanvasScaler">
      <summary>
        <para>The Canvas Scaler component is used for controlling the overall scale and pixel density of UI elements in the Canvas. This scaling affects everything under the Canvas, including font sizes and image borders.</para>
        <para>For a Canvas set to 'Screen Space - Overlay' or 'Screen Space - Camera', the Canvas Scaler UI Scale Mode can be set to Constant Pixel Size, Scale With Screen Size, or Constant Physical Size. Using the Constant Pixel Size mode, positions and sizes of UI elements are specified in pixels on the screen. This is also the default functionality of the Canvas when no Canvas Scaler is attached. However, With the Scale Factor setting in the Canvas Scaler, a constant scaling can be applied to all UI elements in the Canvas. Using the Scale With Screen Size mode, positions and sizes can be specified according to the pixels of a specified reference resolution. If the current screen resolution is larger then the reference resolution, the Canvas will keep having only the resolution of the reference resolution, but will scale up in order to fit the screen. If the current screen resolution is smaller than the reference resolution, the Canvas will similarly be scaled down to fit. If the current screen resolution has a different aspect ratio than the reference resolution, scaling each axis individually to fit the screen would result in non-uniform scaling, which is generally undesirable. Instead of this, the ReferenceResolution component will make the Canvas resolution deviate from the reference resolution in order to respect the aspect ratio of the screen. It is possible to control how this deviation should behave using the <see cref="UnityEngine.UI.CanvasScaler.screenMatchMode"></see> setting. Using the Constant Physical Size mode, positions and sizes of UI elements are specified in physical units, such as millimeters, points, or picas. This mode relies on the device reporting its screen DPI correctly. You can specify a fallback DPI to use for devices that do not report a DPI. For a Canvas set to 'World Space' the Canvas Scaler can be used to control the pixel density of UI elements in the Canvas.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.CanvasScaler.ScaleMode">
      <summary>Determines how UI elements in the Canvas are scaled.</summary>
    </member>
    <member name="T:UnityEngine.UI.CanvasScaler.ScreenMatchMode">
      <summary>Scale the canvas area with the width as reference, the height as reference, or something in between.</summary>
    </member>
    <member name="T:UnityEngine.UI.CanvasScaler.Unit">
      <summary>Settings used to specify a physical unit.</summary>
    </member>
    <member name="T:UnityEngine.UI.CanvasUpdateRegistry">
      <summary>A place where CanvasElements can register themselves for rebuilding.</summary>
    </member>
    <member name="T:UnityEngine.UI.Shadow">
      <summary>
        <para>Adds an outline to a graphic using IVertexModifier.</para>
        <para>See:IVertexModifier.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.ClipperRegistry">
      <summary>
        <para>Registry class to keep track of all IClippers that exist in the scene.</para>
        <para>This is used during the <see cref="UnityEngine.UI.CanvasUpdate"></see> loop to cull clippable elements. The clipping is called after layout, but before <see cref="UnityEngine.UI.Graphic"></see> update.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Clipping">
      <summary>Utility class to help when clipping using <see cref="UnityEngine.UI.IClipper"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.ColorBlock">
      <summary>Structure to store the state of a color transition on a <see cref="UnityEngine.UI.Selectable"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.Slider">
      <summary>
        <para>A standard slider that can be moved between a minimum and maximum value.</para>
        <para>The slider component is a <see cref="UnityEngine.UI.Selectable"></see> that controls a fill, a handle, or both. The fill, when used, spans from the minimum value to the current value while the handle, when used, follow the current value. The anchors of the fill and handle RectTransforms are driven by the Slider. The fill and handle can be direct children of the GameObject with the Slider, or intermediary RectTransforms can be placed in between for additional control. When a change to the slider value occurs, a callback is sent to any registered listeners of <see cref="UnityEngine.UI.Slider.onValueChanged"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.ContentSizeFitter">
      <summary>
        <para>Resizes a RectTransform to fit the size of its content.</para>
        <para>The ContentSizeFitter can be used on GameObjects that have one or more ILayoutElement components, such as Text, Image, HorizontalLayoutGroup, VerticalLayoutGroup, and GridLayoutGroup.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Slider.SliderEvent">
      <summary>Event type used by the <see cref="UnityEngine.UI.Slider"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.ContentSizeFitter.FitMode">
      <summary>The size fit mode to use.</summary>
    </member>
    <member name="T:UnityEngine.UI.Slider.Direction">
      <summary>Setting that indicates one of four directions.</summary>
    </member>
    <member name="T:UnityEngine.UI.SpriteState">
      <summary>Structure to store the state of a sprite transition on a <see cref="UnityEngine.UI.Selectable"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.DefaultControls">
      <summary>
        <para>Utility class for creating default implementations of builtin UI controls.</para>
        <para>The recommended workflow for using UI controls with the UI system is to create a prefab for each type of control and instantiate those when needed. This way changes can be made to the prefabs which immediately have effect on all used instances. However, in certain cases there can be reasons to create UI controls entirely from code. The DefaultControls class provide methods to create each of the builtin UI controls. The resulting objects are the same as are obtained from using the corresponding UI menu entries in the GameObject menu in the Editor. An example use of this is creating menu items for custom new UI controls that mimics the ones that are builtin in Unity. Some such UI controls may contain other UI controls. For example, a scroll view contains scrollbars. By using the DefaultControls methods to create those parts, it is ensured that they are identical in look and setup to the ones provided in the menu items builtin with Unity. Note that the details of the setup of the UI controls created by the methods in this class may change with later revisions of the UI system. As such, they are not guaranteed to be 100% backwards compatible. It is recommended not to rely on the specific hierarchies of the GameObjects created by these methods, and limit your code to only interface with the root GameObject created by each method.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.DefaultControls.Resources">
      <summary>Object used to pass resources to use for the default controls.</summary>
    </member>
    <member name="T:UnityEngine.UI.Text">
      <summary>The default <see cref="UnityEngine.UI.Graphic"></see> to draw font data to screen.</summary>
    </member>
    <member name="T:UnityEngine.UI.Dropdown">
      <summary>
        <para>A standard dropdown that presents a list of options when clicked, of which one can be chosen.</para>
        <para>The dropdown component is a <see cref="UnityEngine.UI.Selectable"></see>. When an option is chosen, the label and/or image of the control changes to show the chosen option. When a dropdown event occurs a callback is sent to any registered listeners of <see cref="UnityEngine.UI.Dropdown.onValueChanged"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Dropdown.DropdownEvent">
      <summary>
        <see cref="UnityEngine.Events.UnityEvent">
        </see> callback for when a dropdown current option is changed.</summary>
    </member>
    <member name="T:UnityEngine.UI.Dropdown.OptionData">
      <summary>Class to store the text and/or image of a single option in the dropdown list.</summary>
    </member>
    <member name="T:UnityEngine.UI.Dropdown.OptionDataList">
      <summary>
        <para>Class used internally to store the list of options for the dropdown list.</para>
        <para>The usage of this class is not exposed in the runtime API. It's only relevant for the PropertyDrawer drawing the list of options.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Toggle">
      <summary>
        <para>A standard toggle that has an on / off state.</para>
        <para>The toggle component is a <see cref="UnityEngine.UI.Selectable"></see> that controls a child graphic which displays the on / off state. When a toggle event occurs a callback is sent to any registered listeners of <see cref="UnityEngine.UI.Toggle.onValueChanged"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Toggle.ToggleEvent">
      <summary>
        <see cref="UnityEngine.Events.UnityEvent">
        </see> callback for when a toggle is toggled.</summary>
    </member>
    <member name="T:UnityEngine.UI.Toggle.ToggleTransition">
      <summary>Display settings for when a toggle is activated or deactivated.</summary>
    </member>
    <member name="T:UnityEngine.UI.ToggleGroup">
      <summary>
        <para>A component that represents a group of <see cref="UnityEngine.UI.Toggle"></see>s.</para>
        <para>When using a group reference the group from a <see cref="UnityEngine.UI.Toggle"></see>. Only one member of a group can be active at a time.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.VertexHelper">
      <summary>
        <para>A utility class that can aid in the generation of meshes for the UI.</para>
        <para>This class implements IDisposable to aid with memory management.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.VerticalLayoutGroup">
      <summary>
        <para>Layout child layout elements below each other.</para>
        <para>The VerticalLayoutGroup component is used to layout child layout elements below each other.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.IClippable">
      <summary>Interface for elements that can be clipped if they are under an [[IClipper].</summary>
    </member>
    <member name="T:UnityEngine.UI.IClipper">
      <summary>Interface that can be used to recieve clipping callbacks as part of the canvas update loop.</summary>
    </member>
    <member name="T:UnityEngine.UI.ILayoutController">
      <summary>
        <para>Base interface to implement by componets that control the layout of RectTransforms.</para>
        <para>If a component is driving its own RectTransform it should implement the interface <see cref="UnityEngine.UI.ILayoutSelfController"></see>. If a component is driving the RectTransforms of its children, it should implement <see cref="UnityEngine.UI.ILayoutGroup"></see>. The layout system will first invoke SetLayoutHorizontal and then SetLayoutVertical. In the SetLayoutHorizontal call it is valid to call LayoutUtility.GetMinWidth, LayoutUtility.GetPreferredWidth, and LayoutUtility.GetFlexibleWidth on the RectTransform of itself or any of its children. In the SetLayoutVertical call it is valid to call LayoutUtility.GetMinHeight, LayoutUtility.GetPreferredHeight, and LayoutUtility.GetFlexibleHeight on the RectTransform of itself or any of its children. The component may use this information to determine the width and height to use for its own RectTransform or the RectTransforms of its children.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.ILayoutGroup">
      <summary>
        <para>ILayoutGroup is an ILayoutController that should drive the RectTransforms of its children.</para>
        <para>ILayoutGroup derives from ILayoutController and requires the same members to be implemented.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.ILayoutIgnorer">
      <summary>
        <para>A RectTransform will be ignored by the layout system if it has a component which implements ILayoutIgnorer.</para>
        <para>A components that implements ILayoutIgnorer can be used to make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.ILayoutSelfController">
      <summary>
        <para>ILayoutSelfController is an ILayoutController that should drive its own RectTransform.</para>
        <para>The iLayoutSelfController derives from the base controller <see cref="UnityEngine.UI.ILayoutController"></see> and controls the layout of a RectTransform. Use the ILayoutSelfController to manipulate a GameObject’s own RectTransform component, which you attach in the Inspector. Use <see cref="UnityEngine.UI.ILayoutGroup"></see> to manipulate RectTransforms belonging to the children of the GameObject. Call <see cref="UnityEngine.UI.ILayoutController.SetLayoutHorizontal"></see> to handle horizontal parts of the layout, and call <see cref="UnityEngine.UI.ILayoutController.SetLayoutVertical"></see> to handle vertical parts. You can change the height, width, position and rotation of the RectTransform.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.IMask">
      <summary>
        <para>Is this element a mask.</para>
        <para>Used internally to increment the mask value that is used for rendering.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.IMaskable">
      <summary>This element is capable of being masked out.</summary>
    </member>
    <member name="T:UnityEngine.UI.IMaterialModifier">
      <summary>
        <para>Interface which allows for the modification of the <see cref="UnityEngine.Material"></see> used to render a <see cref="UnityEngine.UI.Graphic"></see> before they are passed to the <see cref="UnityEngine.CanvasRenderer"></see>.</para>
        <para>When a <see cref="UnityEngine.UI.Graphic"></see> sets a material is is passed (in order) to any components on the GameObject that implement IMaterialModifier. This component can modify the material to be used for rendering.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.IMeshModifier">
      <summary>
        <para>Interface which allows for the modification of verticies in a <see cref="UnityEngine.UI.Graphic"></see> before they are passed to the <see cref="UnityEngine.CanvasRenderer"></see>.</para>
        <para>When a <see cref="UnityEngine.UI.Graphic"></see> generates a list of vertices they are passed (in order) to any components on the GameObject that implement IMeshModifier. This component can modify the given Mesh.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.IVertexModifier">
      <summary>
        <para>Interface which allows for the modification of verticies in a <see cref="UnityEngine.UI.Graphic"></see> before they are passed to the <see cref="UnityEngine.CanvasRenderer"></see>.</para>
        <para>When a <see cref="UnityEngine.UI.Graphic"></see> generates a list of vertices they are passed (in order) to any components on the GameObject that implement IVertexModifier. This component can modify the vertex list.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.CanvasUpdate">
      <summary>Values of 'update' called on a <see cref="UnityEngine.Canvas"></see> update.</summary>
    </member>
    <member name="T:UnityEngine.UI.FontData">
      <summary>Struct for storing <see cref="UnityEngine.UI.Text"></see> generation settings.</summary>
    </member>
    <member name="T:UnityEngine.UI.FontUpdateTracker">
      <summary>
        <para>Utility class that is used to help with <see cref="UnityEngine.UI.Text"></see> update.</para>
        <para>When Unity rebuilds a font atlas a callback is sent to the font. Using this class you can register your text as needing to be rebuilt if the font atlas is updated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Graphic">
      <summary>
        <para>Base class for all visual UI Component.</para>
        <para>When creating visual UI components you should inherit from this class. Below is a simple example that draws a colored quad inside the Rect Transform area.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.GraphicRaycaster">
      <summary>A <see cref="UnityEngine.EventSystems.BaseRaycaster"></see> to raycast against Graphic elements.</summary>
    </member>
    <member name="T:UnityEngine.UI.GraphicRaycaster.BlockingObjects">
      <summary>List of Raycasters to check for canvas blocking elements.</summary>
    </member>
    <member name="T:UnityEngine.UI.GraphicRebuildTracker">
      <summary>
        <para>EditorOnly class for tracking all Graphics.</para>
        <para>Used when a source asset is reimported into the editor to ensure that <see cref="UnityEngine.Graphics"></see> are updated as intended.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.GraphicRegistry">
      <summary>Registry which maps a <see cref="UnityEngine.UI.Graphic"></see> to the canvas it belongs to.</summary>
    </member>
    <member name="T:UnityEngine.UI.GridLayoutGroup">
      <summary>
        <para>Layout child layout elements in a grid.</para>
        <para>The GridLayoutGroup component is used to layout child layout elements in a uniform grid where all cells have the same size. The size and the spacing between cells is controlled by the GridLayoutGroup itself. The children have no influence on their sizes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.GridLayoutGroup.Axis">
      <summary>An axis that can be horizontal or vertical.</summary>
    </member>
    <member name="T:UnityEngine.UI.GridLayoutGroup.Constraint">
      <summary>A constraint on either the number of columns or rows.</summary>
    </member>
    <member name="T:UnityEngine.UI.GridLayoutGroup.Corner">
      <summary>One of the four corners in a rectangle.</summary>
    </member>
    <member name="T:UnityEngine.UI.HorizontalLayoutGroup">
      <summary>
        <para>Layout child layout elements side by side.</para>
        <para>The HorizontalLayoutGroup component is used to layout child layout elements side by side.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.HorizontalOrVerticalLayoutGroup">
      <summary>Abstract base class for <see cref="UnityEngine.UI.HorizontalLayoutGroup"></see> and <see cref="UnityEngine.UI.VerticalLayoutGroup"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.Image">
      <summary>Displays a <see cref="UnityEngine.Sprite"></see> for the UI System.</summary>
    </member>
    <member name="T:UnityEngine.UI.Image.FillMethod">
      <summary>Fill method to be used by the <see cref="UnityEngine.UI.Image"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.Image.Origin180">
      <summary>Origin for the <see cref="UnityEngine.UI.Image.FillMethod.Radial180"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.Image.Origin360">
      <summary>One of the points of the Arc for the <see cref="UnityEngine.UI.Image.FillMethod.Radial360"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.Image.Origin90">
      <summary>Origin for the <see cref="UnityEngine.UI.Image.FillMethod.Radial90"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.Image.OriginHorizontal">
      <summary>Origin for the <see cref="UnityEngine.UI.Image.FillMethod.Horizontal"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.Image.OriginVertical">
      <summary>Origin for the <see cref="UnityEngine.UI.Image.FillMethod.Vertical"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.Image.Type">
      <summary>
        <para>Image Type.</para>
        <para>Controls how to display the Image.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.InputField">
      <summary>Turn a simple label into a interactable input field.</summary>
    </member>
    <member name="T:UnityEngine.UI.InputField.OnChangeEvent">
      <summary>The callback sent anytime the Inputfield is updated.</summary>
    </member>
    <member name="T:UnityEngine.UI.InputField.SubmitEvent">
      <summary>Unity Event with a inputfield as a param.</summary>
    </member>
    <member name="T:UnityEngine.UI.InputField.CharacterValidation">
      <summary>
        <para>The type of characters that are allowed to be added to the string.</para>
        <para>Note that the character validation does not validate the entire string as being valid or not. It only does validation on a per-character level, resulting in the typed character either being added to the string or not.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.InputField.ContentType">
      <summary>
        <para>Specifies the type of the input text content.</para>
        <para>The ContentType affects character validation, keyboard type used (on platforms with on-screen keyboards), whether the InputField accepts multiple lines, and whether the text is autocorrected (on platforms that offer input auto-correction) or is treated as a password where the characters are not shown directly.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.InputField.InputType">
      <summary>Type of data expected by the input field.</summary>
    </member>
    <member name="T:UnityEngine.UI.InputField.LineType">
      <summary>The LineType is used to describe the behavior of the <see cref="UnityEngine.UI.InputField"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.LayoutElement">
      <summary>Add this component to a GameObject to make it into a layout element or override values on an existing layout element.</summary>
    </member>
    <member name="T:UnityEngine.UI.LayoutGroup">
      <summary>Abstract base class to use for layout groups.</summary>
    </member>
    <member name="T:UnityEngine.UI.LayoutRebuilder">
      <summary>Wrapper class for managing layout rebuilding of CanvasElement.</summary>
    </member>
    <member name="T:UnityEngine.UI.LayoutUtility">
      <summary>Utility functions for querying layout elements for their minimum, preferred, and flexible sizes.</summary>
    </member>
    <member name="T:UnityEngine.UI.Mask">
      <summary>
        <para>A component for masking children elements.</para>
        <para>By using this element any children elements that have masking enabled will mask where a sibling <see cref="UnityEngine.UI.Graphic"></see> would write 0 to the stencil buffer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.MaskableGraphic">
      <summary>A <see cref="UnityEngine.UI.Graphic"></see> that is capable of being masked out.</summary>
    </member>
    <member name="T:UnityEngine.UI.MaskUtilities">
      <summary>
        <para>Mask related utility class.</para>
        <para>This class provides masking-specific utility functions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Navigation">
      <summary>Structure storing details related to navigation.</summary>
    </member>
    <member name="T:UnityEngine.UI.Navigation.Mode">
      <summary>Navigation mode. Used by <see cref="UnityEngine.UI.Selectable"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.Outline">
      <summary>
        <para>Adds an outline to a graphic using IVertexModifier.</para>
        <para>Modify the generated vertices to add an outline to a sibling <see cref="UnityEngine.UI.Graphic"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.PositionAsUV1">
      <summary>An IVertexModifier which sets the raw vertex position into UV1 of the generated verts.</summary>
    </member>
    <member name="T:UnityEngine.UI.RawImage">
      <summary>
        <para>Displays a <see cref="UnityEngine.Texture2D"></see> for the UI System.</para>
        <para>Keep in mind that this will create an extra draw call with each RawImage present, so it's best to use it only for backgrounds or temporary visible graphics.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.RectMask2D">
      <summary>
        <para>A 2D rectangular mask that allows for clipping / masking of areas outside the mask.</para>
        <para>The RectMask2D behaves in a similar way to a standard <see cref="UnityEngine.UI.Mask"></see> component. It differs though in some of the restrictions that it has. A RectMask2D: *Only works in the 2D plane *Requires elements on the mask to be coplanar. *Does not require stencil buffer / extra draw calls *Requres fewer draw calls *Culls elements that are outside the mask area.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Scrollbar">
      <summary>
        <para>A standard scrollbar with a variable sized handle that can be dragged between 0 and 1.</para>
        <para>The slider component is a <see cref="UnityEngine.UI.Selectable"></see> that controls a handle which follow the current value and is sized accoring to the size property. The anchors of the handle RectTransforms are driven by the Scrollbar. The handle can be a direct child of the GameObject with the Scrollbar, or intermediary RectTransforms can be placed in between for additional control. When a change to the scrollbar value occurs, a callback is sent to any registered listeners of <see cref="UnityEngine.UI.Scrollbar.onValueChanged"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.Scrollbar.ScrollEvent">
      <summary>
        <see cref="UnityEngine.Events.UnityEvent">
        </see> callback for when a scrollbar is scrolled.</summary>
    </member>
    <member name="T:UnityEngine.UI.ScrollRect">
      <summary>
        <para>A component for making a child RectTransform scroll.</para>
        <para>ScrollRect will not do any clipping on its own. Combined with a <see cref="UnityEngine.UI.Mask"></see> component, it can be turned into a scroll view.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UI.ScrollRect.ScrollRectEvent">
      <summary>Event type used by the <see cref="UnityEngine.UI.ScrollRect"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.ScrollRect.MovementType">
      <summary>A setting for which behavior to use when content moves beyond the confines of its container.</summary>
    </member>
    <member name="T:UnityEngine.UI.ScrollRect.ScrollbarVisibility">
      <summary>Enum for which behavior to use for scrollbar visibility.</summary>
    </member>
    <member name="T:UnityEngine.UI.Selectable">
      <summary>Simple selectable object - derived from to create a selectable control.</summary>
    </member>
    <member name="T:UnityEngine.UI.Selectable.SelectionState">
      <summary>An enumeration of selected states of objects.</summary>
    </member>
    <member name="T:UnityEngine.UI.Selectable.Transition">
      <summary>Transition mode for a <see cref="UnityEngine.UI.Selectable"></see>.</summary>
    </member>
    <member name="T:UnityEngine.UI.ICanvasElement">
      <summary>This is an element that can live on a Canvas.</summary>
    </member>
    <member name="T:UnityEngine.UI.ILayoutElement">
      <summary>
        <para>A component is treated as a layout element by the auto layout system if it implements ILayoutElement.</para>
        <para>The layout system will invoke CalculateLayoutInputHorizontal before querying minWidth, preferredWidth, and flexibleWidth. It can potentially save performance if these properties are cached when CalculateLayoutInputHorizontal is invoked, so they don't need to be recalculated every time the properties are queried. The layout system will invoke CalculateLayoutInputVertical before querying minHeight, preferredHeight, and flexibleHeight. It can potentially save performance if these properties are cached when CalculateLayoutInputVertical is invoked, so they don't need to be recalculated every time the properties are queried. The minWidth, preferredWidth, and flexibleWidth properties should not rely on any properties of the RectTransform of the layout element, otherwise the behavior will be non-deterministic. The minHeight, preferredHeight, and flexibleHeight properties may rely on horizontal aspects of the RectTransform, such as the width or the X component of the position. Any properties of the RectTransforms on child layout elements may always be relied on.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.AbstractEventData">
      <summary>A class that can be used for sending simple events via the event system.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.AxisEventData">
      <summary>Event Data associated with Axis Events (Controller / Keyboard).</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.BaseEventData">
      <summary>A class that contains the base event data that is common to all event types in the new EventSystem.</summary>
    </member>
    <member name="T:UnityEngine.UI.Scrollbar.Direction">
      <summary>Setting that indicates one of four directions.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.BaseInput">
      <summary>Interface to the <see cref="UnityEngine.Input"></see> system used by the <see cref="UnityEngine.EventSystems.BaseInputModule"></see>. With this it is possible to bypass the Input system with your own but still use the same InputModule. For example this can be used to feed fake input into the UI or interface with a different input system.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.BaseInputModule">
      <summary>
        <para>A base module that raises events and sends them to GameObjects.</para>
        <para>An Input Module is a component of the <see cref="UnityEngine.EventSystems.EventSystem"></see> that is responsible for raising events and sending them to GameObjects for handling. The BaseInputModule is a class that all Input Modules in the EventSystem inherit from. Examples of provided modules are TouchInputModule and <see cref="UnityEngine.EventSystems.StandaloneInputModule"></see>, if these are inadequate for your project you can create your own by extending from the BaseInputModule.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.BaseRaycaster">
      <summary>
        <para>Base class for any RayCaster.</para>
        <para>A Raycaster is responsible for raycasting against scene elements to determine if the cursor is over them. Default Raycasters include <see cref="UnityEngine.EventSystems.PhysicsRaycaster"></see>, <see cref="UnityEngine.EventSystems.Physics2DRaycaster"></see>, <see cref="UnityEngine.UI.GraphicRaycaster"></see>. Custom raycasters can be added by extending this class.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.EventSystem">
      <summary>
        <para>Handles input, raycasting, and sending events.</para>
        <para>The EventSystem is responsible for processing and handling events in a Unity scene. A scene should only contain one EventSystem. The EventSystem works in conjunction with a number of modules and mostly just holds state and delegates functionality to specific, overrideable components. When the EventSystem is started it searches for any <see cref="UnityEngine.EventSystems.BaseInputModule"></see>s attached to the same <see cref="UnityEngine.GameObject"></see> and adds them to an internal list. On update each attached module receives an <see cref="UnityEngine.EventSystems.EventSystem.UpdateModules"></see> call, where the module can modify internal state. After each module has been Updated the active module has the Process call executed. This is where custom module processing can take place.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.EventTrigger">
      <summary>
        <para>Receives events from the EventSystem and calls registered functions for each event.</para>
        <para>The EventTrigger can be used to specify functions you wish to be called for each <see cref="UnityEngine.EventSystems.EventSystem"></see> event. You can assign multiple functions to a single event and whenever the EventTrigger receives that event it will call those functions in the order they were provided. NOTE: Attaching this component to a GameObject will make that object intercept ALL events, and no events will propagate to parent objects. There are two ways to intercept events: You could extend EventTrigger, and override the functions for the events you are interested in intercepting; as shown in this example:</para>
        <para>...or you can specify individual delegates:</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.EventTrigger.Entry">
      <summary>
        <para>An Entry in the EventSystem delegates list.</para>
        <para>It stores the callback and which event type should this callback be fired.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.EventTrigger.TriggerEvent">
      <summary>
        <para>UnityEvent class for Triggers.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.ExecuteEvents">
      <summary>Helper class that can be used to send <see cref="UnityEngine.EventSystems.IEventSystemHandler"></see> events to GameObjects.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.Physics2DRaycaster">
      <summary>
        <para>Raycaster for casting against 2D Physics components.</para>
        <para>See: <see cref="UnityEngine.EventSystems.BaseRaycaster"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.PhysicsRaycaster">
      <summary>
        <para>Raycaster for casting against 3D Physics components.</para>
        <para>See: <see cref="UnityEngine.EventSystems.BaseRaycaster"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.PointerEventData">
      <summary>Event payload associated with pointer (mouse / touch) events.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.PointerEventData.FramePressState">
      <summary>The state of a press for the given frame.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.PointerEventData.InputButton">
      <summary>Input press tracking.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.PointerInputModule">
      <summary>
        <para>A <see cref="UnityEngine.EventSystems.BaseInputModule"></see> for pointer input.</para>
        <para>Used by TouchInputModule and <see cref="UnityEngine.EventSystems.StandaloneInputModule"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData">
      <summary>Information about a mouse button event.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.RaycastResult">
      <summary>A hit result from a <see cref="UnityEngine.EventSystems.BaseRaycaster"></see>.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.StandaloneInputModule">
      <summary>
        <para>A <see cref="UnityEngine.EventSystems.BaseInputModule"></see> designed for mouse / keyboard / controller input.</para>
        <para>Input module for working with, mouse, keyboard, or controller.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.TouchInputModule">
      <summary>Input module used for touch based input.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.UIBehaviour">
      <summary>Base behaviour that has protected implementations of Unity lifecycle functions.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IBeginDragHandler">
      <summary>
        <para>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IBeginDragHandler.OnBeginDrag"></see> callbacks.</para>
        <para>Note: You need to implement IDragHandler in addition to IBeginDragHandler.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.ICancelHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.ICancelHandler.OnCancel"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IDeselectHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IDeselectHandler.OnDeselect"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IDragHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IDragHandler.OnDrag"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IDropHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IDropHandler.OnDrop"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IEndDragHandler">
      <summary>
        <para>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IEndDragHandler.OnEndDrag"></see> callbacks.</para>
        <para>Note: You need to implement IDragHandler in addition to IEndDragHandler.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IEventSystemHandler">
      <summary>Base class that all <see cref="UnityEngine.EventSystems.EventSystem"></see> events inherit from.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IInitializePotentialDragHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IInitializePotentialDragHandler.OnInitializePotentialDrag"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IMoveHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IMoveHandler.OnMove"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IPointerClickHandler">
      <summary>
        <para>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IPointerClickHandler.OnPointerClick"></see> callbacks.</para>
        <para>Use the IPointerClickHandler Interface to handle click input using OnPointerClick callbacks. Ensure an Event System exists in the Scene to allow click detection. For click detection on non-UI GameObjects, ensure a <see cref="UnityEngine.EventSystems.PhysicsRaycaster"></see> is attached to the Camera.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IPointerDownHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IPointerEnterHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IPointerEnterHandler.OnPointerEnter"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IPointerExitHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IPointerExitHandler.OnPointerExit"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IPointerUpHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IScrollHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IScrollHandler.OnScroll"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.ISelectHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.ISelectHandler.OnSelect"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.ISubmitHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.ISubmitHandler.OnSubmit"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.IUpdateSelectedHandler">
      <summary>Interface to implement if you wish to receive <see cref="UnityEngine.EventSystems.IUpdateSelectedHandler.OnUpdateSelected"></see> callbacks.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.EventHandle">
      <summary>Enum that tracks event State.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.EventTriggerType">
      <summary>The type of event the <see cref="UnityEngine.EventSystems.EventTrigger.TriggerEvent"></see> is intercepting.</summary>
    </member>
    <member name="T:UnityEngine.EventSystems.MoveDirection">
      <summary>
        <para>This is an 8 direction movement enum.</para>
        <para>MoveDirection provides a way of switching between moving states. You must assign these states to actions, such as moving the GameObject by an up vector when in the Up state. Having states like these are easier to identify than always having to include a large amount of vectors and calculations. Instead, you define what you want the state to do in only one part, and switch to the appropriate state when it is needed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.EnvelopeParent">
      <summary>Sizes the rectangle such that the parent rectangle is fully contained within.</summary>
    </member>
    <member name="M:UnityEngine.UI.BaseMeshEffect.ModifyMesh(UnityEngine.Mesh)">
      <summary>See:<see cref="UnityEngine.UI.IMeshModifier"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Button.onClick">
      <summary>
        <para>UnityEvent that is triggered when the button is pressed.</para>
        <para>Note: Triggered on MouseUp after MouseDown on the same object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.Button.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
      <summary>Registered IPointerClickHandler callback.</summary>
      <param name="eventData">Data passed in (Typically by the event system).</param>
    </member>
    <member name="M:UnityEngine.UI.Button.OnSubmit(UnityEngine.EventSystems.BaseEventData)">
      <summary>Registered ISubmitHandler callback.</summary>
      <param name="eventData">Data passed in (Typically by the event system).</param>
    </member>
    <member name="P:UnityEngine.UI.AnimationTriggers.disabledTrigger">
      <summary>Trigger to send to animator when entering disabled state.</summary>
    </member>
    <member name="P:UnityEngine.UI.AnimationTriggers.highlightedTrigger">
      <summary>Trigger to send to animator when entering highlighted state.</summary>
    </member>
    <member name="P:UnityEngine.UI.AnimationTriggers.normalTrigger">
      <summary>Trigger to send to animator when entering normal state.</summary>
    </member>
    <member name="P:UnityEngine.UI.AnimationTriggers.pressedTrigger">
      <summary>Trigger to send to animator when entering pressed state.</summary>
    </member>
    <member name="P:UnityEngine.UI.AspectRatioFitter.aspectMode">
      <summary>The mode to use to enforce the aspect ratio.</summary>
    </member>
    <member name="P:UnityEngine.UI.AspectRatioFitter.aspectRatio">
      <summary>The aspect ratio to enforce. This means width divided by height.</summary>
    </member>
    <member name="M:UnityEngine.UI.AspectRatioFitter.SetLayoutHorizontal">
      <summary>Method called by the layout system.</summary>
    </member>
    <member name="M:UnityEngine.UI.AspectRatioFitter.SetLayoutVertical">
      <summary>Method called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.ScaleMode.ConstantPixelSize">
      <summary>Using the Constant Pixel Size mode, positions and sizes of UI elements are specified in pixels on the screen.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.ScaleMode.ScaleWithScreenSize">
      <summary>Using the Scale With Screen Size mode, positions and sizes can be specified according to the pixels of a specified reference resolution. If the current screen resolution is larger then the reference resolution, the Canvas will keep having only the resolution of the reference resolution, but will scale up in order to fit the screen. If the current screen resolution is smaller than the reference resolution, the Canvas will similarly be scaled down to fit.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.ScaleMode.ConstantPhysicalSize">
      <summary>Using the Constant Physical Size mode, positions and sizes of UI elements are specified in physical units, such as millimeters, points, or picas.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.ScreenMatchMode.MatchWidthOrHeight">
      <summary>Scale the canvas area with the width as reference, the height as reference, or something in between.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.ScreenMatchMode.Expand">
      <summary>Expand the canvas area either horizontally or vertically, so the size of the canvas will never be smaller than the reference.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.ScreenMatchMode.Shrink">
      <summary>Crop the canvas area either horizontally or vertically, so the size of the canvas will never be larger than the reference.</summary>
    </member>
    <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.None">
      <summary>The aspect ratio is not enforced.</summary>
    </member>
    <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.WidthControlsHeight">
      <summary>Changes the height of the rectangle to match the aspect ratio.</summary>
    </member>
    <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.HeightControlsWidth">
      <summary>Changes the width of the rectangle to match the aspect ratio.</summary>
    </member>
    <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.FitInParent">
      <summary>Sizes the rectangle such that it's fully contained within the parent rectangle.</summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.defaultSpriteDPI">
      <summary>The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting.</summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.dynamicPixelsPerUnit">
      <summary>The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text.</summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.fallbackScreenDPI">
      <summary>The DPI to assume if the screen DPI is not known.</summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.matchWidthOrHeight">
      <summary>
        <para>Setting to scale the Canvas to match the width or height of the reference resolution, or a combination.</para>
        <para>If the setting is set to 0, the Canvas is scaled according to the difference between the current screen resolution width and the reference resolution width. If the setting is set to 1, the Canvas is scaled according to the difference between the current screen resolution height and the reference resolution height. For values in between 0 and 1, the scaling is based on a combination of the relative width and height. Consider an example where the reference resolution of 640x480, and the current screen resolution is a landscape mode of 480x640. If the scaleWidthOrHeight setting is set to 0, the Canvas is scaled by 0.75 because the current resolution width of 480 is 0.75 times the reference resolution width of 640. The Canvas resolution gets a resolution of 640x853.33. This resolution has the same width as the reference resolution width, but has the aspect ratio of the current screen resolution. Note that the Canvas resolution of 640x853.33 is the current screen resolution divided by the scale factor of 0.75. If the scaleWidthOrHeight setting is set to 1, the Canvas is scaled by 1.33 because the current resolution height of 640 is 1.33 times the reference resolution height of 480. The Canvas resolution gets a resolution of 360x480. This resolution has the same height as the reference resolution width, but has the aspect ratio of the current screen resolution. Note that the Canvas resolution of 360x480 is the current screen resolution divided by the scale factor of 1.33. If the scaleWidthOrHeight setting is set to 0.5, we find the horizontal scaling needed (0.75) and the vertical scaling needed (1.33) and find the average. However, we do the average in logarithmic space. A regular average of 0.75 and 1.33 would produce a result of 1.04. However, since multiplying by 1.33 is the same as diving by 0.75, the two scale factor really corresponds to multiplying by 0.75 versus dividing by 0.75, and the average of those two things should even out and produce a neutral result. The average in logarithmic space of 0.75 and 1.33 is exactly 1.0, which is what we want. The Canvas resolution hence ends up being 480x640 which is the current resolution divided by the scale factor of 1.0. The logic works the same for all values. The average between the horizontal and vertical scale factor is a weighted average based on the matchWidthOrHeight value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.physicalUnit">
      <summary>The physical unit to specify positions and sizes in.</summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.referencePixelsPerUnit">
      <summary>If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI.</summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.referenceResolution">
      <summary>
        <para>The resolution the UI layout is designed for.</para>
        <para>If the screen resolution is larger, the UI will be scaled up, and if it's smaller, the UI will be scaled down. This is done in accordance with the Screen Match Mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.scaleFactor">
      <summary>Scales all UI elements in the Canvas by this factor.</summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.screenMatchMode">
      <summary>A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution.</summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasScaler.uiScaleMode">
      <summary>Determines how UI elements in the Canvas are scaled.</summary>
    </member>
    <member name="M:UnityEngine.UI.Slider.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
      <summary>Evaluate current state and transition to pressed state.</summary>
      <param name="eventData">The EventData usually sent by the EventSystem.</param>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.Unit.Centimeters">
      <summary>Use centimeters. A centimeter is 1/100 of a meter.</summary>
    </member>
    <member name="P:UnityEngine.UI.Slider.onValueChanged">
      <summary>Callback executed when the value of the slider is changed.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.Unit.Millimeters">
      <summary>Use millimeters. A millimeter is 1/10 of a centimeter, and 1/1000 of a meter.</summary>
    </member>
    <member name="P:UnityEngine.UI.Slider.value">
      <summary>The current value of the slider.</summary>
    </member>
    <member name="P:UnityEngine.UI.Slider.wholeNumbers">
      <summary>Should the value only be allowed to be whole numbers?</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.Unit.Inches">
      <summary>Use inches.</summary>
    </member>
    <member name="M:UnityEngine.UI.Slider.FindSelectableOnDown">
      <summary>See member in base class.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.Unit.Points">
      <summary>Use points. One point is 1/12 of a pica, and 1/72 of an inch.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasScaler.Unit.Picas">
      <summary>Use picas. One pica is 1/6 of an inch.</summary>
    </member>
    <member name="M:UnityEngine.UI.Slider.FindSelectableOnLeft">
      <summary>See member in base class.</summary>
    </member>
    <member name="M:UnityEngine.UI.Slider.FindSelectableOnRight">
      <summary>See member in base class.</summary>
    </member>
    <member name="M:UnityEngine.UI.Slider.FindSelectableOnUp">
      <summary>See member in base class.</summary>
    </member>
    <member name="M:UnityEngine.UI.Slider.GraphicUpdateComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.GraphicUpdateComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Slider.LayoutComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.LayoutComplete"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.CanvasUpdateRegistry.instance">
      <summary>Get the singleton registry.</summary>
    </member>
    <member name="M:UnityEngine.UI.CanvasUpdateRegistry.IsRebuildingGraphics">
      <summary>Are graphics being rebuild.</summary>
      <returns>Rebuilding graphics.</returns>
    </member>
    <member name="M:UnityEngine.UI.CanvasUpdateRegistry.IsRebuildingLayout">
      <summary>Is layout being rebuilt?</summary>
      <returns>Rebuilding layout.</returns>
    </member>
    <member name="M:UnityEngine.UI.Slider.OnDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Handling for when the slider is dragged.</summary>
    </member>
    <member name="M:UnityEngine.UI.CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild(UnityEngine.UI.ICanvasElement)">
      <summary>Rebuild the graphics of the given element.</summary>
      <param name="element">Element to rebuild.</param>
    </member>
    <member name="M:UnityEngine.UI.Slider.OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>See: <see cref="UnityEngine.EventSystems.IInitializePotentialDragHandler.OnInitializePotentialDrag"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.CanvasUpdateRegistry.RegisterCanvasElementForLayoutRebuild(UnityEngine.UI.ICanvasElement)">
      <summary>Rebuild the layout of the given element.</summary>
      <param name="element">Element to rebuild.</param>
    </member>
    <member name="M:UnityEngine.UI.Slider.OnMove(UnityEngine.EventSystems.AxisEventData)">
      <summary>Handling for movement events.</summary>
    </member>
    <member name="M:UnityEngine.UI.Slider.Rebuild(UnityEngine.UI.CanvasUpdate)">
      <summary>Handling for when the canvas is rebuilt.</summary>
    </member>
    <member name="M:UnityEngine.UI.CanvasUpdateRegistry.TryRegisterCanvasElementForGraphicRebuild(UnityEngine.UI.ICanvasElement)">
      <summary>
        <para>Rebuild the layout of the given element.</para>
        <para>Returns false if already exists in rebuild queue.</para>
      </summary>
      <param name="element">Element to rebuild.</param>
      <returns>Was the element scheduled.</returns>
    </member>
    <member name="M:UnityEngine.UI.CanvasUpdateRegistry.TryRegisterCanvasElementForLayoutRebuild(UnityEngine.UI.ICanvasElement)">
      <summary>
        <para>Was the element scheduled.</para>
        <para>Returns false if already exists in rebuild queue.</para>
      </summary>
      <param name="element">Element to rebuild.</param>
      <returns>Was the element scheduled.</returns>
    </member>
    <member name="M:UnityEngine.UI.CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild(UnityEngine.UI.ICanvasElement)">
      <summary>Remove the given element from rebuild.</summary>
      <param name="element">Element to remove.</param>
    </member>
    <member name="P:UnityEngine.UI.Shadow.effectColor">
      <summary>Color for the effect.</summary>
    </member>
    <member name="P:UnityEngine.UI.Shadow.effectDistance">
      <summary>How far is the shadow from the graphic.</summary>
    </member>
    <member name="P:UnityEngine.UI.Shadow.useGraphicAlpha">
      <summary>Should the shadow inherit the alpha from the graphic?</summary>
    </member>
    <member name="P:UnityEngine.UI.Slider.direction">
      <summary>The direction of the slider, from minimum to maximum value.</summary>
    </member>
    <member name="P:UnityEngine.UI.Slider.fillRect">
      <summary>Optional RectTransform to use as fill for the slider.</summary>
    </member>
    <member name="P:UnityEngine.UI.Slider.handleRect">
      <summary>Optional RectTransform to use as a handle for the slider.</summary>
    </member>
    <member name="P:UnityEngine.UI.Slider.maxValue">
      <summary>The maximum allowed value of the slider.</summary>
    </member>
    <member name="P:UnityEngine.UI.Slider.minValue">
      <summary>The minimum allowed value of the slider.</summary>
    </member>
    <member name="P:UnityEngine.UI.Slider.normalizedValue">
      <summary>The current value of the slider normalized into a value between 0 and 1.</summary>
    </member>
    <member name="F:UnityEngine.UI.DefaultControls.Resources.background">
      <summary>Sprite used for background elements.</summary>
    </member>
    <member name="F:UnityEngine.UI.DefaultControls.Resources.checkmark">
      <summary>Sprite used for representation of an "on" state when present, such as a checkmark.</summary>
    </member>
    <member name="F:UnityEngine.UI.DefaultControls.Resources.dropdown">
      <summary>Sprite used to indicate that a button will open a dropdown when clicked.</summary>
    </member>
    <member name="F:UnityEngine.UI.DefaultControls.Resources.inputField">
      <summary>Sprite used as background for input fields.</summary>
    </member>
    <member name="F:UnityEngine.UI.DefaultControls.Resources.knob">
      <summary>Sprite used for knobs that can be dragged, such as on a slider.</summary>
    </member>
    <member name="F:UnityEngine.UI.DefaultControls.Resources.mask">
      <summary>Sprite used for masking purposes, for example to be used for the viewport of a scroll view.</summary>
    </member>
    <member name="F:UnityEngine.UI.DefaultControls.Resources.standard">
      <summary>The primary sprite to be used for graphical UI elements, used by the button, toggle, and dropdown controls, among others.</summary>
    </member>
    <member name="M:UnityEngine.UI.Text.GetTextAnchorPivot(UnityEngine.TextAnchor)">
      <summary>Convenience function to determine the vector offset of the anchor.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.mainTexture">
      <summary>
        <para>The graphic's texture. (Read Only).</para>
        <para>This is the Texture that gets passed to the CanvasRenderer, Material and then Shader _MainTex. When implementing your own Graphic you can override this to control which texture goes through the UI Rendering pipeline. Bear in mind that Unity tries to batch UI elements together to improve performance, so its ideal to work with atlas to reduce the number of draw calls.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.Text.OnRebuildRequested">
      <summary>
        <para>Editor-only callback that is issued by Unity if a rebuild of the <see cref="UnityEngine.UI.Graphic"></see> is required.</para>
        <para>Currently sent when an asset is reimported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ClipperRegistry.instance">
      <summary>Singleton instance.</summary>
    </member>
    <member name="M:UnityEngine.UI.ClipperRegistry.Cull">
      <summary>Perform the clipping on all registered <see cref="UnityEngine.UI.IClipper"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.ClipperRegistry.Register(UnityEngine.UI.IClipper)">
      <summary>Register an <see cref="UnityEngine.UI.IClipper"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.ClipperRegistry.Unregister(UnityEngine.UI.IClipper)">
      <summary>Unregister an <see cref="UnityEngine.UI.IClipper"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.ColorBlock.defaultColorBlock">
      <summary>Simple getter for the default ColorBlock.</summary>
    </member>
    <member name="P:UnityEngine.UI.ColorBlock.colorMultiplier">
      <summary>Multiplier applied to colors (allows brightening greater then base color).</summary>
    </member>
    <member name="P:UnityEngine.UI.ColorBlock.disabledColor">
      <summary>Disabled Color.</summary>
    </member>
    <member name="P:UnityEngine.UI.ColorBlock.fadeDuration">
      <summary>How long a color transition should take.</summary>
    </member>
    <member name="P:UnityEngine.UI.ColorBlock.highlightedColor">
      <summary>Highlighted Color.</summary>
    </member>
    <member name="P:UnityEngine.UI.ColorBlock.normalColor">
      <summary>Normal Color.</summary>
    </member>
    <member name="P:UnityEngine.UI.ColorBlock.pressedColor">
      <summary>Pressed Color.</summary>
    </member>
    <member name="F:UnityEngine.UI.ContentSizeFitter.FitMode.Unconstrained">
      <summary>Don't perform any resizing.</summary>
    </member>
    <member name="F:UnityEngine.UI.ContentSizeFitter.FitMode.MinSize">
      <summary>Resize to the minimum size of the content.</summary>
    </member>
    <member name="F:UnityEngine.UI.ContentSizeFitter.FitMode.PreferredSize">
      <summary>Resize to the preferred size of the content.</summary>
    </member>
    <member name="F:UnityEngine.UI.Slider.Direction.LeftToRight">
      <summary>From left to right.</summary>
    </member>
    <member name="F:UnityEngine.UI.Slider.Direction.RightToLeft">
      <summary>From right to left.</summary>
    </member>
    <member name="F:UnityEngine.UI.Slider.Direction.BottomToTop">
      <summary>From bottom to top.</summary>
    </member>
    <member name="F:UnityEngine.UI.Slider.Direction.TopToBottom">
      <summary>From top to bottom.</summary>
    </member>
    <member name="P:UnityEngine.UI.SpriteState.disabledSprite">
      <summary>Disabled sprite.</summary>
    </member>
    <member name="P:UnityEngine.UI.SpriteState.highlightedSprite">
      <summary>Highlighted sprite.</summary>
    </member>
    <member name="P:UnityEngine.UI.SpriteState.pressedSprite">
      <summary>Pressed sprite.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.alignByGeometry">
      <summary>
        <para>Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics.</para>
        <para>This can result in better fitting left and right alignment, but may result in incorrect positioning when attempting to overlay multiple fonts (such as a specialized outline font) on top of each other.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Text.alignment">
      <summary>The positioning of the text reliative to its <see cref="UnityEngine.RectTransform"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.cachedTextGenerator">
      <summary>The cached <see cref="UnityEngine.TextGenerator"></see> used when generating visible <see cref="UnityEngine.UI.Text"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.cachedTextGeneratorForLayout">
      <summary>The cached <see cref="UnityEngine.TextGenerator"></see> used when determine Layout.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.flexibleHeight">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.flexibleWidth">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.font">
      <summary>The <see cref="UnityEngine.Font"></see> used by the text.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.fontSize">
      <summary>The size that the <see cref="UnityEngine.Font"></see> should render at.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.fontStyle">
      <summary>
        <see cref="UnityEngine.FontStyle">
        </see> used by the text.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.horizontalOverflow">
      <summary>
        <para>Horizontal overflow mode.</para>
        <para>When set to <see cref="UnityEngine.HorizontalWrapMode.Overflow"></see>, text can exceed the horizontal boundaries of the Text graphic. When set to <see cref="UnityEngine.HorizontalWrapMode.Wrap"></see>, text will be word-wrapped to fit within the boundaries.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Text.layoutPriority">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.lineSpacing">
      <summary>Line spacing, specified as a factor of font line height. A value of 1 will produce normal line spacing.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.mainTexture">
      <summary>The <see cref="UnityEngine.Texture"></see> that comes from the <see cref="UnityEngine.Font"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.minHeight">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.minWidth">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.pixelsPerUnit">
      <summary>
        <para>(Read Only) Provides information about how fonts are scale to the screen.</para>
        <para>For dynamic fonts, the value is equivalent to the scale factor of the canvas. For non-dynamic fonts, the value is calculated from the requested text size and the size from the font.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Text.preferredHeight">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.preferredWidth">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.resizeTextForBestFit">
      <summary>Should the text be allowed to auto resized.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.resizeTextMaxSize">
      <summary>The maximum size the text is allowed to be. 1 = infinitly large.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.resizeTextMinSize">
      <summary>The minimum size the text is allowed to be.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.supportRichText">
      <summary>Whether this Text will support rich text.</summary>
    </member>
    <member name="P:UnityEngine.UI.Text.text">
      <summary>
        <para>The string value this Text displays.</para>
        <para>This is the string value of a Text component. Use this to read or edit the message displayed in Text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Text.verticalOverflow">
      <summary>Vertical overflow mode.</summary>
    </member>
    <member name="M:UnityEngine.UI.Text.CalculateLayoutInputHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.Text.CalculateLayoutInputVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.Text.FontTextureChanged">
      <summary>Called by the [FontUpdateTracker] when the texture associated with a font is modified.</summary>
    </member>
    <member name="M:UnityEngine.UI.Text.GetGenerationSettings(UnityEngine.Vector2)">
      <summary>Convenience function to populate the generation setting for the text.</summary>
      <param name="extents">The extents the text can draw in.</param>
      <returns>Generated settings.</returns>
    </member>
    <member name="P:UnityEngine.UI.ContentSizeFitter.horizontalFit">
      <summary>The fit mode to use to determine the width.</summary>
    </member>
    <member name="P:UnityEngine.UI.ContentSizeFitter.verticalFit">
      <summary>The fit mode to use to determine the height.</summary>
    </member>
    <member name="M:UnityEngine.UI.ContentSizeFitter.SetLayoutHorizontal">
      <summary>Method called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.ContentSizeFitter.SetLayoutVertical">
      <summary>Method called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.captionImage">
      <summary>The Image component to hold the image of the currently selected option.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.captionText">
      <summary>The Text component to hold the text of the currently selected option.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.itemImage">
      <summary>The Image component to hold the image of the item.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.itemText">
      <summary>The Text component to hold the text of the item.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.onValueChanged">
      <summary>A UnityEvent that is invoked when when a user has clicked one of the options in the dropdown list.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.options">
      <summary>The list of possible options. A text string and an image can be specified for each option.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.template">
      <summary>The Rect Transform of the template for the dropdown list.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.value">
      <summary>The index of the currently selected option. 0 is the first option, 1 is the second, and so on.</summary>
    </member>
    <member name="M:UnityEngine.UI.Dropdown.ClearOptions">
      <summary>Clear the list of options in the Dropdown.</summary>
    </member>
    <member name="M:UnityEngine.UI.Dropdown.Hide">
      <summary>Hide the dropdown list.</summary>
    </member>
    <member name="M:UnityEngine.UI.Dropdown.OnCancel(UnityEngine.EventSystems.BaseEventData)">
      <summary>
        <para>Called by a <see cref="UnityEngine.EventSystems.BaseInputModule"></see> when a Cancel event occurs.</para>
        <para>This will hide the dropdown list. See <see cref="UnityEngine.EventSystems.ICancelHandler.OnCancel"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.Dropdown.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
      <summary>Handling for when the dropdown is 'clicked'.</summary>
      <param name="eventData">Current event.</param>
    </member>
    <member name="M:UnityEngine.UI.Dropdown.OnSubmit(UnityEngine.EventSystems.BaseEventData)">
      <summary>What to do when the event system sends a submit Event.</summary>
      <param name="eventData">Current event.</param>
    </member>
    <member name="M:UnityEngine.UI.Dropdown.RefreshShownValue">
      <summary>Refreshes the text and image (if available) of the currently selected option. If you have modified the list of options, you should call this method afterwards to ensure that the visual state of the dropdown corresponds to the updated options.</summary>
    </member>
    <member name="M:UnityEngine.UI.Dropdown.Show">
      <summary>Show the dropdown list.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.OptionData.image">
      <summary>The image associated with the option.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.OptionData.text">
      <summary>The text associated with the option.</summary>
    </member>
    <member name="P:UnityEngine.UI.Dropdown.OptionDataList.options">
      <summary>The list of options for the dropdown list.</summary>
    </member>
    <member name="F:UnityEngine.UI.Toggle.graphic">
      <summary>
        <para>Graphic affected by the toggle.</para>
        <para>When the Toggle is in the 'off' state, Toggle.graphic's alpha is set to zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Toggle.group">
      <summary>Group the toggle belongs to.</summary>
    </member>
    <member name="P:UnityEngine.UI.Toggle.isOn">
      <summary>Return or set whether the Toggle is on or not.</summary>
    </member>
    <member name="F:UnityEngine.UI.Toggle.onValueChanged">
      <summary>Callback executed when the value of the toggle is changed.</summary>
    </member>
    <member name="F:UnityEngine.UI.Toggle.toggleTransition">
      <summary>Transition mode for the toggle.</summary>
    </member>
    <member name="M:UnityEngine.UI.Toggle.GraphicUpdateComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.GraphicUpdateComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Toggle.LayoutComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.LayoutComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Toggle.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
      <summary>Handling for when the toggle is 'clicked'.</summary>
      <param name="eventData">Current event.</param>
    </member>
    <member name="M:UnityEngine.UI.Toggle.OnSubmit(UnityEngine.EventSystems.BaseEventData)">
      <summary>Handling for when the submit key is pressed.</summary>
      <param name="eventData">Current event.</param>
    </member>
    <member name="M:UnityEngine.UI.Toggle.Rebuild(UnityEngine.UI.CanvasUpdate)">
      <summary>Handling for when the canvas is rebuilt.</summary>
    </member>
    <member name="F:UnityEngine.UI.Toggle.ToggleTransition.None">
      <summary>Show / hide the toggle instantly.</summary>
    </member>
    <member name="F:UnityEngine.UI.Toggle.ToggleTransition.Fade">
      <summary>Fade the toggle in / out.</summary>
    </member>
    <member name="P:UnityEngine.UI.ToggleGroup.allowSwitchOff">
      <summary>
        <para>Is it allowed that no toggle is switched on?</para>
        <para>If this setting is enabled, pressing the toggle that is currently switched on will switch it off, so that no toggle is switched on. If this setting is disabled, pressing the toggle that is currently switched on will not change its state. Note that even if allowSwitchOff is false, the Toggle Group will not enforce its constraint right away if no toggles in the group are switched on when the scene is loaded or when the group is instantiated. It will only prevent the user from switching a toggle off.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.ToggleGroup.ActiveToggles">
      <summary>
        <para>Returns the toggles in this group that are active.</para>
        <para>Toggles belonging to this group but are not active either because their GameObject is inactive or because the Toggle component is disabled, are not returned as part of the list.</para>
      </summary>
      <returns>The active toggles in the group.</returns>
    </member>
    <member name="M:UnityEngine.UI.ToggleGroup.AnyTogglesOn">
      <summary>Are any of the toggles on?</summary>
    </member>
    <member name="M:UnityEngine.UI.ToggleGroup.NotifyToggleOn(UnityEngine.UI.Toggle)">
      <summary>Notify the group that the given toggle is enabled.</summary>
    </member>
    <member name="M:UnityEngine.UI.ToggleGroup.RegisterToggle(UnityEngine.UI.Toggle)">
      <summary>Register a toggle with the group.</summary>
    </member>
    <member name="M:UnityEngine.UI.ToggleGroup.SetAllTogglesOff">
      <summary>
        <para>Switch all toggles off.</para>
        <para>This method can be used to switch all toggles off, regardless of whether the allowSwitchOff property is enabled or not.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.ToggleGroup.UnregisterToggle(UnityEngine.UI.Toggle)">
      <summary>Toggle to unregister.</summary>
    </member>
    <member name="M:UnityEngine.UI.IClipper.PerformClipping">
      <summary>
        <para>Called after layout and before <see cref="UnityEngine.UI.Graphic"></see> update of the Canvas update loop.</para>
        <para>Use this function to cull / clip children elements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.ILayoutController.SetLayoutHorizontal">
      <summary>Callback invoked by the auto layout system which handles horizontal aspects of the layout.</summary>
    </member>
    <member name="M:UnityEngine.UI.ILayoutController.SetLayoutVertical">
      <summary>Callback invoked by the auto layout system which handles vertical aspects of the layout.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.VerticalLayoutGroup.CalculateLayoutInputHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.VerticalLayoutGroup.CalculateLayoutInputVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.VerticalLayoutGroup.SetLayoutHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.VerticalLayoutGroup.SetLayoutVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="F:UnityEngine.UI.CanvasUpdate.Prelayout">
      <summary>Called before layout.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasUpdate.Layout">
      <summary>Called for layout.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasUpdate.PostLayout">
      <summary>Called after layout.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasUpdate.PreRender">
      <summary>Called before rendering.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasUpdate.LatePreRender">
      <summary>Called late, before render.</summary>
    </member>
    <member name="F:UnityEngine.UI.CanvasUpdate.MaxUpdateValue">
      <summary>Max enum value.</summary>
    </member>
    <member name="M:UnityEngine.UI.IMaterialModifier.GetModifiedMaterial(UnityEngine.Material)">
      <summary>Perform material modification in this function.</summary>
      <param name="baseMaterial">Configured Material.</param>
      <returns>Modified material.</returns>
    </member>
    <member name="M:UnityEngine.UI.IMeshModifier.ModifyMesh(UnityEngine.Mesh)">
      <summary>
        <para>Call used to modify mesh.</para>
        <para>Place any custom mesh processing in this function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.IClippable.gameObject">
      <summary>
        <see cref="UnityEngine.GameObject">
        </see> of the IClippable.</summary>
    </member>
    <member name="P:UnityEngine.UI.IClippable.rectTransform">
      <summary>
        <see cref="UnityEngine.RectTransform">
        </see> of the clippable.</summary>
    </member>
    <member name="M:UnityEngine.UI.IClippable.Cull(UnityEngine.Rect,System.Boolean)">
      <summary>Clip and cull the <see cref="UnityEngine.UI.IClippable"></see> given the clipRect.</summary>
      <param name="clipRect">Rectangle to clip against.</param>
      <param name="validRect">Is the <see cref="UnityEngine.Rect"></see> valid. If not then the rect has 0 size.</param>
    </member>
    <member name="M:UnityEngine.UI.IClippable.RecalculateClipping">
      <summary>Called when the state of a parent <see cref="UnityEngine.UI.IClippable"></see> changes.</summary>
    </member>
    <member name="M:UnityEngine.UI.IClippable.SetClipRect(UnityEngine.Rect,System.Boolean)">
      <summary>Set the clip rect for the <see cref="UnityEngine.UI.IClippable"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.VertexHelper.currentIndexCount">
      <summary>Get the number of indices set on the VertexHelper.</summary>
    </member>
    <member name="P:UnityEngine.UI.VertexHelper.currentVertCount">
      <summary>Current number of vertices in the buffer.</summary>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.AddTriangle(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Add a triangle to the buffer.</para>
        <para>Indicies are indicies into the positions array.</para>
      </summary>
      <param name="idx0">Index 0.</param>
      <param name="idx1">Index 1.</param>
      <param name="idx2">Index 2.</param>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.AddUIVertexQuad(UnityEngine.UIVertex[])">
      <summary>Add a quad to the stream.</summary>
      <param name="verts">4 Vertices representing the quad.</param>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.AddVert(UnityEngine.Vector3,UnityEngine.Color32,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Vector4)">
      <summary>Add a single vertex to the stream.</summary>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.AddVert(UnityEngine.Vector3,UnityEngine.Color32,UnityEngine.Vector2)">
      <summary>Add a single vertex to the stream.</summary>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.AddVert(UnityEngine.UIVertex)">
      <summary>Add a single vertex to the stream.</summary>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.Clear">
      <summary>Clear all vertices from the stream.</summary>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.Dispose">
      <summary>Cleanup allocated memory.</summary>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.FillMesh(UnityEngine.Mesh)">
      <summary>Fill the given mesh with the stream data.</summary>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.PopulateUIVertex(UnityEngine.UIVertex@,System.Int32)">
      <summary>Fill a <see cref="UnityEngine.UIVertex"></see> with data from index i of the stream.</summary>
      <param name="vertex">Vertex to populate.</param>
      <param name="i">Index to populate from.</param>
    </member>
    <member name="M:UnityEngine.UI.VertexHelper.SetUIVertex(UnityEngine.UIVertex,System.Int32)">
      <summary>Set a <see cref="UnityEngine.UIVertex"></see> at the given index.</summary>
    </member>
    <member name="M:UnityEngine.UI.IMaskable.RecalculateMasking">
      <summary>
        <para>Recalculate masking for this element and all children elements.</para>
        <para>Use this to update the internal state (recreate materials etc).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ILayoutIgnorer.ignoreLayout">
      <summary>
        <para>Should this RectTransform be ignored bvy the layout system?</para>
        <para>Setting this property to true will make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.defaultFontData">
      <summary>Get a font data with sensible defaults.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.alignByGeometry">
      <summary>
        <para>Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics.</para>
        <para>This can result in better fitting left and right alignment, but may result in incorrect positioning when attempting to overlay multiple fonts (such as a specialized outline font) on top of each other.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.alignment">
      <summary>How is the text aligned.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.bestFit">
      <summary>Is best fit used.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.font">
      <summary>Font to use.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.fontSize">
      <summary>Font size.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.fontStyle">
      <summary>Font Style.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.horizontalOverflow">
      <summary>Horizontal overflow mode.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.lineSpacing">
      <summary>Line spacing.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.maxSize">
      <summary>Maximum text size.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.minSize">
      <summary>Minimum text size.</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.richText">
      <summary>Should RichText be used?</summary>
    </member>
    <member name="P:UnityEngine.UI.FontData.verticalOverflow">
      <summary>Vertical overflow mode.</summary>
    </member>
    <member name="M:UnityEngine.UI.FontUpdateTracker.TrackText(UnityEngine.UI.Text)">
      <summary>Register a <see cref="UnityEngine.UI.Text"></see> element for receiving texture atlas rebuild calls.</summary>
    </member>
    <member name="M:UnityEngine.UI.FontUpdateTracker.UntrackText(UnityEngine.UI.Text)">
      <summary>Deregister a <see cref="UnityEngine.UI.Text"></see> element from receiving texture atlas rebuild calls.</summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.defaultGraphicMaterial">
      <summary>Default material used to draw UI elements if no explicit material was specified.</summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.canvas">
      <summary>
        <para>A reference to the Canvas this Graphic is rendering to.</para>
        <para>In the situation where the Graphic is used in a hierarchy with multiple Canvases, the Canvas closest to the root will be used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.canvasRenderer">
      <summary>The CanvasRenderer used by this Graphic.</summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.color">
      <summary>
        <para>Base color of the Graphic.</para>
        <para>The builtin UI Components use this as their vertex color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.defaultMaterial">
      <summary>Returns the default material for the graphic.</summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.depth">
      <summary>
        <para>Absolute depth of the graphic in the hierarchy, used by rendering and events.</para>
        <para>The depth is relative to the first root canvas. Here is an example hierarchy and the corresponding graphics depth: Canvas Graphic &lt;- 1 Graphic &lt;- 2 Nested Canvas Graphic &lt;- 3 Graphic &lt;- 4 Graphic &lt;- 5 This value is used to determine draw and event ordering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.mainTexture">
      <summary>
        <para>The graphic's texture. (Read Only).</para>
        <para>This is the Texture that gets passed to the CanvasRenderer, Material and then Shader _MainTex. When implementing your own Graphic you can override this to control which texture goes through the UI Rendering pipeline. Bear in mind that Unity tries to batch UI elements together to improve performance, so its ideal to work with atlas to reduce the number of draw calls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.material">
      <summary>The <see cref="UnityEngine.Material"></see> set by the user.</summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.materialForRendering">
      <summary>
        <para>The material that will be sent for Rendering (Read only).</para>
        <para>This is the material that actually gets sent to the CanvasRenderer. By default it's the same as <see cref="UnityEngine.UI.Graphic.material"></see>. When extending Graphic you can override this to send a different material to the CanvasRenderer than the one set by <see cref="UnityEngine.UI.Graphic.material"></see>. This is usefull if you want to modify the user set material in a non destructive manner.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.raycastTarget">
      <summary>Should this graphic be considered a target for raycasting?</summary>
    </member>
    <member name="P:UnityEngine.UI.Graphic.rectTransform">
      <summary>The <see cref="UnityEngine.RectTransform"></see> component used by the Graphic.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.CrossFadeAlpha(System.Single,System.Single,System.Boolean)">
      <summary>Tweens the alpha of the CanvasRenderer color associated with this Graphic.</summary>
      <param name="alpha">Target alpha.</param>
      <param name="duration">Duration of the tween in seconds.</param>
      <param name="ignoreTimeScale">Should ignore Time.scale?</param>
    </member>
    <member name="M:UnityEngine.UI.Graphic.CrossFadeColor(UnityEngine.Color,System.Single,System.Boolean,System.Boolean)">
      <summary>Tweens the CanvasRenderer color associated with this Graphic.</summary>
      <param name="targetColor">Target color.</param>
      <param name="duration">Tween duration.</param>
      <param name="ignoreTimeScale">Should ignore Time.scale?</param>
      <param name="useAlpha">Should also Tween the alpha channel?</param>
    </member>
    <member name="M:UnityEngine.UI.Graphic.GetPixelAdjustedRect">
      <summary>
        <para>Returns a pixel perfect Rect closest to the Graphic RectTransform.</para>
        <para>Note: This is only accurate if the Graphic root Canvas is in Screen Space.</para>
      </summary>
      <returns>Pixel perfect Rect.</returns>
    </member>
    <member name="M:UnityEngine.UI.Graphic.GraphicUpdateComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.GraphicUpdateComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.LayoutComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.LayoutComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.OnRebuildRequested">
      <summary>
        <para>Editor-only callback that is issued by Unity if a rebuild of the <see cref="UnityEngine.UI.Graphic"></see> is required.</para>
        <para>Currently sent when an asset is reimported.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.PixelAdjustPoint(UnityEngine.Vector2)">
      <summary>
        <para>Adjusts the given pixel to be pixel perfect.</para>
        <para>Note: This is only accurate if the Graphic root Canvas is in Screen Space.</para>
      </summary>
      <param name="point">Local space point.</param>
      <returns>Pixel perfect adjusted point.</returns>
    </member>
    <member name="M:UnityEngine.UI.Graphic.Raycast(UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>When a <see cref="UnityEngine.UI.GraphicRaycaster"></see> is raycasting into the scene it does two things. First it filters the elements using their <see cref="UnityEngine.RectTransform"></see> rect. Then it uses this Raycast function to determine the elements hit by the raycast.</summary>
      <param name="sp">Screen point.</param>
      <param name="eventCamera">Camera.</param>
      <returns>True if the provided point is a valid location for <see cref="UnityEngine.UI.GraphicRaycaster"></see> raycasts.</returns>
    </member>
    <member name="M:UnityEngine.UI.Graphic.Rebuild(UnityEngine.UI.CanvasUpdate)">
      <summary>Rebuilds the graphic geometry and its material on the PreRender cycle.</summary>
      <param name="update">The current step of the rendering <see cref="UnityEngine.UI.CanvasUpdate"></see> cycle.</param>
      <seealso cref="T:UnityEngine.UI.CanvasUpdateRegistry">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.Graphic.RegisterDirtyLayoutCallback(UnityEngine.Events.UnityAction)">
      <summary>Add a listener to receive notification when the graphics layout is dirtied.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.RegisterDirtyMaterialCallback(UnityEngine.Events.UnityAction)">
      <summary>Add a listener to receive notification when the graphics material is dirtied.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.RegisterDirtyVerticesCallback(UnityEngine.Events.UnityAction)">
      <summary>Add a listener to receive notification when the graphics vertices are dirtied.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.SetAllDirty">
      <summary>Mark the Graphic as dirty.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.SetLayoutDirty">
      <summary>Mark the layout as dirty.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.SetMaterialDirty">
      <summary>Mark the <see cref="UnityEngine.Material"></see> as dirty.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.SetNativeSize">
      <summary>Adjusts the graphic size to make it pixel-perfect.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.SetVerticesDirty">
      <summary>Mark the vertices as dirty.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.UnregisterDirtyLayoutCallback(UnityEngine.Events.UnityAction)">
      <summary>Remove a listener from receiving notifications when the graphics layout is dirtied.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.UnregisterDirtyMaterialCallback(UnityEngine.Events.UnityAction)">
      <summary>Remove a listener from receiving notifications when the graphics material is dirtied.</summary>
    </member>
    <member name="M:UnityEngine.UI.Graphic.UnregisterDirtyVerticesCallback(UnityEngine.Events.UnityAction)">
      <summary>Remove a listener from receiving notifications when the graphics vertices are dirtied.</summary>
      <param name="action">The delegate function to remove.</param>
    </member>
    <member name="F:UnityEngine.UI.GraphicRaycaster.BlockingObjects.None">
      <summary>Not blocked.</summary>
    </member>
    <member name="F:UnityEngine.UI.GraphicRaycaster.BlockingObjects.TwoD">
      <summary>2D physics blocking.</summary>
    </member>
    <member name="F:UnityEngine.UI.GraphicRaycaster.BlockingObjects.ThreeD">
      <summary>3D physics blocking.</summary>
    </member>
    <member name="F:UnityEngine.UI.GraphicRaycaster.BlockingObjects.All">
      <summary>Blocked by 2D and 3D.</summary>
    </member>
    <member name="M:UnityEngine.UI.GraphicRebuildTracker.TrackGraphic(UnityEngine.UI.Graphic)">
      <summary>Track a <see cref="UnityEngine.UI.Graphic"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.GraphicRebuildTracker.UnTrackGraphic(UnityEngine.UI.Graphic)">
      <summary>Untrack a <see cref="UnityEngine.UI.Graphic"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.GraphicRaycaster.blockingObjects">
      <summary>Type of objects that will block graphic raycasts.</summary>
    </member>
    <member name="P:UnityEngine.UI.GraphicRaycaster.eventCamera">
      <summary>See: <see cref="UnityEngine.EventSystems.BaseRaycaster"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.GraphicRaycaster.ignoreReversedGraphics">
      <summary>Should graphics facing away from the raycaster be considered?</summary>
    </member>
    <member name="P:UnityEngine.UI.GraphicRaycaster.eventCamera">
      <summary>The camera that will generate rays for this raycaster.</summary>
    </member>
    <member name="P:UnityEngine.UI.GraphicRaycaster.renderOrderPriority">
      <summary>
        <para>Priority of the raycaster based upon render order.</para>
        <para>Only valid for GraphicRaycaster.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.GraphicRaycaster.sortOrderPriority">
      <summary>
        <para>Priority of the raycaster based upon sort order.</para>
        <para>Only valid for GraphicRaycaster.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.GridLayoutGroup.cellSize">
      <summary>The size to use for each cell in the grid.</summary>
    </member>
    <member name="P:UnityEngine.UI.GridLayoutGroup.constraint">
      <summary>
        <para>Which constraint to use for the GridLayoutGroup.</para>
        <para>Specifying a constraint can make the GridLayoutGroup work better in conjunction with a <see cref="UnityEngine.UI.ContentSizeFitter"></see> component. When GridLayoutGroup is used on a RectTransform with a manually specified size, there's no need to specify a constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.GridLayoutGroup.constraintCount">
      <summary>How many cells there should be along the constrained axis.</summary>
    </member>
    <member name="P:UnityEngine.UI.GridLayoutGroup.spacing">
      <summary>The spacing to use between layout elements in the grid.</summary>
    </member>
    <member name="P:UnityEngine.UI.GridLayoutGroup.startAxis">
      <summary>
        <para>Which axis should cells be placed along first?</para>
        <para>When startAxis is set to horizontal, an entire row will be filled out before proceeding to the next row. When set to vertical, an entire column will be filled out before proceeding to the next column.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.GridLayoutGroup.startCorner">
      <summary>Which corner should the first cell be placed in?</summary>
    </member>
    <member name="M:UnityEngine.UI.GridLayoutGroup.CalculateLayoutInputHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.GridLayoutGroup.CalculateLayoutInputVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.GridLayoutGroup.SetLayoutHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.GridLayoutGroup.SetLayoutVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="P:UnityEngine.UI.GraphicRegistry.instance">
      <summary>Singleton instance.</summary>
    </member>
    <member name="M:UnityEngine.UI.GraphicRegistry.GetGraphicsForCanvas(UnityEngine.Canvas)">
      <summary>Return a list of <see cref="UnityEngine.UI.Graphic"></see>s that are registered on the <see cref="UnityEngine.Canvas"></see>.</summary>
      <param name="canvas">Input canvas.</param>
      <returns>Graphics on the input canvas.</returns>
    </member>
    <member name="M:UnityEngine.UI.GraphicRegistry.RegisterGraphicForCanvas(UnityEngine.Canvas,UnityEngine.UI.Graphic)">
      <summary>Store a link between the given canvas and graphic in the registry.</summary>
      <param name="c">Canvas to register.</param>
      <param name="graphic">Graphic to register.</param>
    </member>
    <member name="M:UnityEngine.UI.GraphicRegistry.UnregisterGraphicForCanvas(UnityEngine.Canvas,UnityEngine.UI.Graphic)">
      <summary>Deregister the given <see cref="UnityEngine.UI.Graphic"></see> from a <see cref="UnityEngine.Canvas"></see>.</summary>
      <param name="c">Canvas.</param>
      <param name="graphic">Graphic to deregister.</param>
    </member>
    <member name="M:UnityEngine.UI.HorizontalLayoutGroup.CalculateLayoutInputHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.HorizontalLayoutGroup.CalculateLayoutInputVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.HorizontalLayoutGroup.SetLayoutHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.HorizontalLayoutGroup.SetLayoutVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="F:UnityEngine.UI.GridLayoutGroup.Constraint.Flexible">
      <summary>Don't constrain the number of rows or columns.</summary>
    </member>
    <member name="F:UnityEngine.UI.GridLayoutGroup.Constraint.FixedColumnCount">
      <summary>Constraint the number of columns to a specified number.</summary>
    </member>
    <member name="F:UnityEngine.UI.GridLayoutGroup.Constraint.FixedRowCount">
      <summary>Constraint the number of rows to a specified number.</summary>
    </member>
    <member name="F:UnityEngine.UI.GridLayoutGroup.Corner.UpperLeft">
      <summary>Upper left.</summary>
    </member>
    <member name="F:UnityEngine.UI.GridLayoutGroup.Corner.UpperRight">
      <summary>Upper right.</summary>
    </member>
    <member name="F:UnityEngine.UI.GridLayoutGroup.Corner.LowerLeft">
      <summary>Lower left.</summary>
    </member>
    <member name="F:UnityEngine.UI.GridLayoutGroup.Corner.LowerRight">
      <summary>Lower right.</summary>
    </member>
    <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childControlHeight">
      <summary>
        <para>Returns true if the Layout Group controls the heights of its children. Returns false if children control their own heights.</para>
        <para>If set to false, the layout group will only affect the positions of the children while leaving the heights untouched. The heights of the children can be set via the respective RectTransforms in this case. If set to true, the heights of the children are automatically driven by the layout group according to their respective minimum, preferred, and flexible heights. This is useful if the heights of the children should change depending on how much space is available. In this case the height of each child cannot be set manually in the RectTransform, but the minimum, preferred and flexible height for each child can be controlled by adding a LayoutElement component to it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childControlWidth">
      <summary>
        <para>Returns true if the Layout Group controls the widths of its children. Returns false if children control their own widths.</para>
        <para>If set to false, the layout group will only affect the positions of the children while leaving the widths untouched. The widths of the children can be set via the respective RectTransforms in this case. If set to true, the widths of the children are automatically driven by the layout group according to their respective minimum, preferred, and flexible widths. This is useful if the widths of the children should change depending on how much space is available. In this case the width of each child cannot be set manually in the RectTransform, but the minimum, preferred and flexible width for each child can be controlled by adding a LayoutElement component to it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childForceExpandHeight">
      <summary>Whether to force the children to expand to fill additional available vertical space.</summary>
    </member>
    <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childForceExpandWidth">
      <summary>Whether to force the children to expand to fill additional available horizontal space.</summary>
    </member>
    <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.spacing">
      <summary>The spacing to use between layout elements in the layout group.</summary>
    </member>
    <member name="F:UnityEngine.UI.GridLayoutGroup.Axis.Horizontal">
      <summary>Horizontal.</summary>
    </member>
    <member name="F:UnityEngine.UI.GridLayoutGroup.Axis.Vertical">
      <summary>Vertical.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.OriginVertical.Bottom">
      <summary>Origin at the Bottom edge.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.OriginVertical.Top">
      <summary>Origin at the Top edge.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.defaultETC1GraphicMaterial">
      <summary>
        <para>Cache of the default <see cref="UnityEngine.Canvas"></see> Ericsson Texture Compression 1 (ETC1) and alpha Material.</para>
        <para>Stores the ETC1 supported Canvas Material that is returned from GetETC1SupportedCanvasMaterial(). Note: Always specify the UI/DefaultETC1 Shader in the <c>Always Included</c> Shader list, to use the ETC1 and alpha Material.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.alphaHitTestMinimumThreshold">
      <summary>
        <para>The alpha threshold specifies the minimum alpha a pixel must have for the event to considered a "hit" on the Image.</para>
        <para>Alpha values less than the threshold will cause raycast events to pass through the Image. An value of 1 would cause only fully opaque pixels to register raycast events on the Image. The alpha tested is retrieved from the image sprite only, while the alpha of the Image <see cref="UnityEngine.UI.Graphic.color"></see> is disregarded. alphaHitTestMinimumThreshold defaults to 0; all raycast events inside the Image rectangle are considered a hit. In order for greater than 0 to values to work, the sprite used by the Image must have readable pixels. This can be achieved by enabling Read/Write enabled in the advanced Texture Import Settings for the sprite and disabling atlassing for the sprite.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.fillAmount">
      <summary>
        <para>Amount of the Image shown when the <see cref="UnityEngine.UI.Image.type"></see> is set to <see cref="UnityEngine.UI.Image.Type.Filled"></see>.</para>
        <para>0-1 range with 0 being nothing shown, and 1 being the full Image.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Type.Simple">
      <summary>
        <para>Displays the full Image.</para>
        <para>This setting shows the entire image stretched across the Image's <see cref="UnityEngine.RectTransform"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.fillCenter">
      <summary>
        <para>Whether or not to render the center of a Tiled or Sliced image.</para>
        <para>This will only have any effect if the <see cref="UnityEngine.UI.Image.sprite"></see> has borders.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Type.Sliced">
      <summary>
        <para>Displays the Image as a 9-sliced graphic.</para>
        <para>A 9-sliced image displays a central area stretched across the image surrounded by a border comprising of 4 corners and 4 stretched edges. This has the effect of creating a resizable skinned rectangular element suitable for dialog boxes, windows, and general UI elements. Note: For this method to work properly the Sprite assigned to <see cref="UnityEngine.UI.Image.sprite"></see> needs to have <see cref="UnityEngine.Sprite.border"></see> defined. The slices can also be set up in the Sprite Editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.fillClockwise">
      <summary>
        <para>Whether the Image should be filled clockwise (true) or counter-clockwise (false).</para>
        <para>This willl only have any effect if the <see cref="UnityEngine.UI.Image.type"></see> is set to <see cref="UnityEngine.UI.Image.Type.Filled"></see> and <see cref="UnityEngine.UI.Image.fillMethod"></see> is set to any of the Radial methods.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.fillMethod">
      <summary>
        <para>What type of fill method to use.</para>
        <para>This willl only have any effect if the <see cref="UnityEngine.UI.Image.type"></see> is set to <see cref="UnityEngine.UI.Image.Type.Filled"></see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Type.Tiled">
      <summary>
        <para>Displays a sliced <see cref="UnityEngine.Sprite"></see> with its resizable sections tiled instead of stretched.</para>
        <para>A Tiled image behaves similarly to a <see cref="UnityEngine.UI.Image.Type.Sliced"></see> image, except that the resizable sections of the image are repeated instead of being stretched. This can be useful for detailed UI graphics that do not look good when stretched. It uses the <see cref="UnityEngine.Sprite.border"></see> value to determine how each part (border and center) should be tiled. The Image sections will repeat the corresponding section in the Sprite until the whole section is filled. The corner sections will be unaffected and will draw in the same way as a Sliced Image. The edges will repeat along their lengths. The center section will repeat across the whole central part of the Image. The Image section will repeat the corresponding section in the Sprite until the whole section is filled. Be aware that if you are tiling a Sprite with borders or a packed sprite, a mesh will be generated to create the tiles. The size of the mesh will be limited to 16250 quads; if your tiling would require more tiles, the size of the tiles will be enlarged to ensure that the number of generated quads stays below this limit. For optimum efficiency, use a Sprite with no borders and with no packing, and make sure the <see cref="UnityEngine.Sprite.texture"></see> wrap mode is set to <see cref="UnityEngine.TextureWrapMode.Repeat"></see>. These settings will prevent the generation of additional geometry. If this is not possible, limit the number of tiles in your Image. The slices can also be set up in the Sprite Editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.fillOrigin">
      <summary>
        <para>Controls the origin point of the Fill process. Value means different things with each fill method.</para>
        <para>You should cast to the appropriate origin type: Image.OriginHorizontal, Image.OriginVertical, Image.Origin90, Image.Origin180 or [[Image.Origin360] depending on the Image.Fillmethod.</para>
        <para>Note: This will only have any effect if the <see cref="UnityEngine.UI.Image.type"></see> is set to <see cref="UnityEngine.UI.Image.Type.Filled"></see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Type.Filled">
      <summary>
        <para>Displays only a portion of the Image.</para>
        <para>A Filled Image will display a section of the Sprite, with the rest of the RectTransform left transparent. The <see cref="UnityEngine.UI.Image.fillAmount"></see> determines how much of the Image to show, and <see cref="UnityEngine.UI.Image.fillMethod"></see> controls the shape in which the Image will be cut. This can be used for example to display circular or linear status information such as timers, health bars, and loading bars.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.flexibleHeight">
      <summary>See <see cref="UnityEngine.UI.ILayoutElement.flexibleHeight"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.flexibleWidth">
      <summary>See <see cref="UnityEngine.UI.ILayoutElement.flexibleWidth"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.hasBorder">
      <summary>True if the sprite used has borders.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.layoutPriority">
      <summary>See <see cref="UnityEngine.UI.ILayoutElement.layoutPriority"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.mainTexture">
      <summary>The image's texture. (ReadOnly).</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.material">
      <summary>The specified <see cref="UnityEngine.Material"></see> used by this Image. The default Material is used instead if one wasn't specified.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.minHeight">
      <summary>See <see cref="UnityEngine.UI.ILayoutElement.minHeight"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.minWidth">
      <summary>See <see cref="UnityEngine.UI.ILayoutElement.minWidth"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.overrideSprite">
      <summary>
        <para>Set an override sprite to be used for rendering.</para>
        <para>The <see cref="UnityEngine.UI.Image.overrideSprite"></see> variable allows a sprite to have the sprite changed. This change happens immediately. When the changed sprite is no longer needed the sprite can be reverted back to the original version. This happens when the overrideSprite is set to <c>null</c>. Note: The script example below has two buttons. The button textures are loaded from the <c>Resources</c> folder. (They are not used in the shown example). Two sprites are added to the example code. <c>Example1</c> and <c>Example2</c> are functions called by the button OnClick functions. Example1 calls overrideSprite and Example2 sets overrideSprite to null.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.preferredHeight">
      <summary>See <see cref="UnityEngine.UI.ILayoutElement.preferredHeight"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.preferredWidth">
      <summary>See <see cref="UnityEngine.UI.ILayoutElement.preferredWidth"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.preserveAspect">
      <summary>Whether this image should preserve its Sprite aspect ratio.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.sprite">
      <summary>
        <para>The sprite that is used to render this image.</para>
        <para>This returns the source Sprite of an Image. This Sprite can also be viewed and changed in the Inspector as part of an Image component. This can also be used to change the Sprite using a script.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.type">
      <summary>
        <para>How to display the image.</para>
        <para>Unity can interpret an Image in various different ways depending on the intended purpose. This can be used to display: - Whole images stretched to fit the RectTransform of the Image. - A 9-sliced image useful for various decorated UI boxes and other rectangular elements. - A tiled image with sections of the sprite repeated. - As a partial image, useful for wipes, fades, timers, status bars etc.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.Image.CalculateLayoutInputHorizontal">
      <summary>See <see cref="UnityEngine.UI.ILayoutElement.CalculateLayoutInputHorizontal"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Image.CalculateLayoutInputVertical">
      <summary>See <see cref="UnityEngine.UI.ILayoutElement.CalculateLayoutInputVertical"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Image.IsRaycastLocationValid(UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>See:<see cref="UnityEngine.ICanvasRaycastFilter"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Image.OnAfterDeserialize">
      <summary>
        <para>Serialization Callback.</para>
        <para>See <see cref="UnityEngine.ISerializationCallbackReceiver"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.Image.OnBeforeSerialize">
      <summary>
        <para>Serialization Callback.</para>
        <para>See <see cref="UnityEngine.ISerializationCallbackReceiver"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.Image.SetNativeSize">
      <summary>
        <para>Adjusts the image size to make it pixel-perfect.</para>
        <para>This means setting the Images <see cref="UnityEngine.RectTransform.sizeDelta"></see> to be equal to the Sprite dimensions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Image.mainTexture">
      <summary>
        <para>The graphic's texture. (Read Only).</para>
        <para>This is the Texture that gets passed to the CanvasRenderer, Material and then Shader _MainTex. When implementing your own Graphic you can override this to control which texture goes through the UI Rendering pipeline. Bear in mind that Unity tries to batch UI elements together to improve performance, so its ideal to work with atlas to reduce the number of draw calls.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin90.BottomLeft">
      <summary>Radial starting at the Bottom Left corner.</summary>
    </member>
    <member name="P:UnityEngine.UI.Image.material">
      <summary>The <see cref="UnityEngine.Material"></see> set by the user.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin90.TopLeft">
      <summary>Radial starting at the Top Left corner.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin90.TopRight">
      <summary>Radial starting at the Top Right corner.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin90.BottomRight">
      <summary>Radial starting at the Bottom Right corner.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.OriginHorizontal.Left">
      <summary>Origin at the Left side.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.OriginHorizontal.Right">
      <summary>Origin at the Right side.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin360.Bottom">
      <summary>Arc starting at the center of the Bottom edge.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin360.Right">
      <summary>Arc starting at the center of the Right edge.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin360.Top">
      <summary>Arc starting at the center of the Top edge.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin360.Left">
      <summary>Arc starting at the center of the Left edge.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutElement.flexibleHeight">
      <summary>The extra relative height this layout element should be allocated if there is additional available space.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutElement.flexibleWidth">
      <summary>The extra relative width this layout element should be allocated if there is additional available space.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutElement.ignoreLayout">
      <summary>
        <para>Should this RectTransform be ignored by the layout system?</para>
        <para>Setting this property to true will make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.FillMethod.Horizontal">
      <summary>
        <para>The Image will be filled Horizontally.</para>
        <para>The Image will be Cropped at either left or right size depending on Image.fillOriging at the <see cref="UnityEngine.UI.Image.fillAmount"></see></para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.FillMethod.Vertical">
      <summary>
        <para>The Image will be filled Vertically.</para>
        <para>The Image will be Cropped at either top or Bottom size depending on Image.fillOriging at the <see cref="UnityEngine.UI.Image.fillAmount"></see></para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.FillMethod.Radial90">
      <summary>
        <para>The Image will be filled Radially with the radial center in one of the corners.</para>
        <para>For this method the <see cref="UnityEngine.UI.Image.fillAmount"></see> represents an angle between 0 and 90 degrees. The Image will be cut by a line passing at the <see cref="UnityEngine.UI.Image.fillOrigin"></see> at the specified angle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.FillMethod.Radial180">
      <summary>
        <para>The Image will be filled Radially with the radial center in one of the edges.</para>
        <para>For this method the <see cref="UnityEngine.UI.Image.fillAmount"></see> represents an angle between 0 and 180 degrees. The Image will be cut by a line passing at the <see cref="UnityEngine.UI.Image.fillOrigin"></see> at the specified angle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.FillMethod.Radial360">
      <summary>
        <para>The Image will be filled Radially with the radial center at the center.</para>
        <para>For this method the <see cref="UnityEngine.UI.Image.fillAmount"></see> represents an angle between 0 and 360 degrees. The Arc defined by the center of the Image, the <see cref="UnityEngine.UI.Image.fillOrigin"></see> and the angle will be cut from the Image.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin180.Bottom">
      <summary>Center of the radial at the center of the Bottom edge.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin180.Left">
      <summary>Center of the radial at the center of the Left edge.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin180.Top">
      <summary>Center of the radial at the center of the Top edge.</summary>
    </member>
    <member name="F:UnityEngine.UI.Image.Origin180.Right">
      <summary>Center of the radial at the center of the Right edge.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.LineType.SingleLine">
      <summary>Only allows 1 line to be entered. Has horizontal scrolling and no word wrap. Pressing enter will submit the <see cref="UnityEngine.UI.InputField"></see>.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.LineType.MultiLineSubmit">
      <summary>Is a multiline <see cref="UnityEngine.UI.InputField"></see> with vertical scrolling and overflow. Pressing the return key will submit.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.LineType.MultiLineNewline">
      <summary>Is a multiline <see cref="UnityEngine.UI.InputField"></see> with vertical scrolling and overflow. Pressing the return key will insert a new line character.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.Alphanumeric">
      <summary>Allows letters A-Z, a-z and numbers 0-9.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.Name">
      <summary>The InputField is used for typing in a name, and enforces capitalization of the first letter of each word. Note that the user can circumvent the first letter capitalization rules by deleting automatically-capitalized letters.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.EmailAddress">
      <summary>The input is used for typing in an email address.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.Password">
      <summary>Allows all input and hides the typed characters by showing them as asterisks characters.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.Pin">
      <summary>Allows integer numbers and hides the typed characters by showing them as asterisks characters.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.Custom">
      <summary>Custom types that allows user-defined settings.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.InputType.Standard">
      <summary>The standard mobile keyboard.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.InputType.AutoCorrect">
      <summary>The mobile autocorrect keyboard.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.InputType.Password">
      <summary>The mobile password keyboard.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.OnSelect(UnityEngine.EventSystems.BaseEventData)">
      <summary>Set selection and transition to appropriate state.</summary>
      <param name="eventData">The EventData usually sent by the EventSystem.</param>
    </member>
    <member name="P:UnityEngine.UI.InputField.contentType">
      <summary>
        <para>Specifies the type of the input text content.</para>
        <para>The ContentType affects character validation, keyboard type used (on platforms with on-screen keyboards), whether the InputField accepts multiple lines, and whether the text is autocorrected (on platforms that offer input auto-correction) or is treated as a password where the characters are not shown directly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.customCaretColor">
      <summary>Should a custom caret color be used or should the textComponent.color be used.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.inputType">
      <summary>The type of input expected. See InputField.InputType.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.isFocused">
      <summary>Does the <see cref="UnityEngine.UI.InputField"></see> currently have focus and is able to process events.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.keyboardType">
      <summary>They type of mobile keyboard that will be used.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.lineType">
      <summary>The <see cref="UnityEngine.UI.InputField.LineType"></see> used by the <see cref="UnityEngine.UI.InputField"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.multiLine">
      <summary>If the input field supports multiple lines.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.onEndEdit">
      <summary>The Unity Event to call when editing has ended.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.onValidateInput">
      <summary>The function to call to validate the input characters.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.onValueChanged">
      <summary>Accessor to the <see cref="UnityEngine.UI.InputField.OnChangeEvent"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.placeholder">
      <summary>
        <para>This is an optional ‘empty’ graphic to show that the InputField text field is empty. Note that this ‘empty' graphic still displays even when the InputField is selected (that is; when there is focus on it). A placeholder graphic can be used to show subtle hints or make it more obvious that the control is an InputField.</para>
        <para>If a Text component is used as the placeholder, it's recommended to make the placeholder text look different from the real text of the InputField so they are not easily confused. For example, the placeholder text might be a more subtle color or have lower alpha value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.readOnly">
      <summary>
        <para>Set the <see cref="UnityEngine.UI.InputField"></see> to be read only.</para>
        <para>Setting read only allows for highlighting of text without allowing modifications via keyboard.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.selectionAnchorPosition">
      <summary>
        <para>The beginning point of the selection.</para>
        <para>When making a selection with a mouse, the anchor is where in the document the mouse button is initially pressed. Get: Returns the beginning position of selection Set: If Input.compositionString is 0 set the fixed position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.selectionColor">
      <summary>The color of the highlight to show which characters are selected.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.selectionFocusPosition">
      <summary>
        <para>The end point of the selection.</para>
        <para>When making a selection with a mouse, the focus is where in the document the mouse button is released. Get: Returns the end position of selection Set: If Input.compositionString is 0 set the variable position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.shouldHideMobileInput">
      <summary>Should the mobile keyboard input be hidden.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.text">
      <summary>
        <para>The current value of the input field.</para>
        <para>Note that null is invalid value for InputField.text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.textComponent">
      <summary>The <see cref="UnityEngine.UI.Text"></see> component that is going to be used to render the text to screen.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.wasCanceled">
      <summary>If the <see cref="UnityEngine.UI.InputField"></see> was canceled and will revert back to the original text upon <see cref="UnityEngine.UI.InputField.DeactivateInputField"></see>.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.CharacterValidation.None">
      <summary>No validation. Any input is valid.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.ActivateInputField">
      <summary>
        <para>Function to activate the <see cref="UnityEngine.UI.InputField"></see> to begin processing Events.</para>
        <para>Will only activate if deactivated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.CharacterValidation.Integer">
      <summary>
        <para>Allow whole numbers (positive or negative).</para>
        <para>Characters 0-9 and - (dash / minus sign) are allowed. The dash is only allowed as the first character.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.DeactivateInputField">
      <summary>Function to deactivate the <see cref="UnityEngine.UI.InputField"></see> to stop the processing of Events and send OnSubmit if not canceled.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.CharacterValidation.Decimal">
      <summary>Allows decimal numbers (positive or negative). Characters 0-9, . (dot), and - (dash / minus sign) are allowed. The dash is only allowed as the first character. Only one dot in the string is allowed.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.ForceLabelUpdate">
      <summary>Force the label to update immediatly. This will recalculate the positioning of the caret and the visible text.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.CharacterValidation.Alphanumeric">
      <summary>Allows letters A-Z, a-z and numbers 0-9.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.GraphicUpdateComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.GraphicUpdateComplete"></see>.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.CharacterValidation.Name">
      <summary>
        <para>Only allow names and enforces capitalization.</para>
        <para>Allows letters, spaces, and ' (apostrophe). A character after a space is automatically made upper case. A character not after a space is automatically made lowercase. A character after an apostrophe can be either upper or lower case. Only one apostrophe in the string is allowed. More than one space in a row is not allowed. A characters is considered a letter if it is categorized as a Unicode letter, as implemented by the Char.Isletter method in .Net.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.LayoutComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.LayoutComplete"></see>.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.CharacterValidation.EmailAddress">
      <summary>
        <para>Allows the characters that are allowed in an email address.</para>
        <para>Allows characters A-Z, a.z, 0-9, @, . (dot), !, #, $, %, &amp;, ', *, +, -, /, =, ?, ^, _, `, {, |, }, and ~. Only one @ is allowed in the string and more than one dot in a row are not allowed. Note that the character validation does not validate the entire string as being a valid email address since it only does validation on a per-character level, resulting in the typed character either being added to the string or not.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.MoveTextEnd(System.Boolean)">
      <summary>Move the caret index to end of text.</summary>
      <param name="shift">Only move the selectionPosition.</param>
    </member>
    <member name="M:UnityEngine.UI.InputField.MoveTextStart(System.Boolean)">
      <summary>Move the caret index to start of text.</summary>
      <param name="shift">Only move the selectionPosition.</param>
    </member>
    <member name="M:UnityEngine.UI.InputField.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Capture the OnBeginDrag callback from the <see cref="UnityEngine.EventSystems.EventSystem"></see> and ensure we should listen to the drag events to follow.</summary>
      <param name="eventData">The data passed by the <see cref="UnityEngine.EventSystems.EventSystem"></see>.</param>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.Standard">
      <summary>Allows all input.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.OnDeselect(UnityEngine.EventSystems.BaseEventData)">
      <summary>What to do when the event system sends a Deselect Event.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.Autocorrected">
      <summary>Allows all input and performs auto-correction on platforms that support it.</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.IntegerNumber">
      <summary>Allow whole numbers (positive or negative).</summary>
    </member>
    <member name="F:UnityEngine.UI.InputField.ContentType.DecimalNumber">
      <summary>Allows decimal numbers (positive or negative).</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.OnDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>What to do when the event system sends a Drag Event.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Capture the OnEndDrag callback from the <see cref="UnityEngine.EventSystems.EventSystem"></see> and cancel the listening of drag events.</summary>
      <param name="eventData">The eventData sent by the <see cref="UnityEngine.EventSystems.EventSystem"></see>.</param>
    </member>
    <member name="M:UnityEngine.UI.InputField.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
      <summary>What to do when the event system sends a pointer click Event.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
      <summary>What to do when the event system sends a pointer down Event.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.OnSubmit(UnityEngine.EventSystems.BaseEventData)">
      <summary>What to do when the event system sends a submit Event.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.OnUpdateSelected(UnityEngine.EventSystems.BaseEventData)">
      <summary>What to do when the event system sends a Update selected Event.</summary>
    </member>
    <member name="M:UnityEngine.UI.InputField.ProcessEvent(UnityEngine.Event)">
      <summary>Helper function to allow separate events to be processed by the <see cref="UnityEngine.UI.InputField"></see>.</summary>
      <param name="e">The <see cref="UnityEngine.Event"></see> to be processed.</param>
    </member>
    <member name="M:UnityEngine.UI.InputField.Rebuild(UnityEngine.UI.CanvasUpdate)">
      <summary>Rebuild the input fields geometry. (caret and highlight).</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutRebuilder.transform">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutRebuilder.GraphicUpdateComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.GraphicUpdateComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutRebuilder.IsDestroyed">
      <summary>Has the native representation of this LayoutRebuilder been destroyed?</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutRebuilder.LayoutComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.LayoutComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutRebuilder.Rebuild(UnityEngine.UI.CanvasUpdate)">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.Rebuild"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.asteriskChar">
      <summary>The character used for password fields.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(UnityEngine.RectTransform)">
      <summary>
        <para>Forces an immediate rebuild of the layout element and child layout elements affected by the calculations.</para>
        <para>Normal use of the layout system should not use this method. Instead <see cref="UnityEngine.UI.LayoutRebuilder.MarkLayoutForRebuild"></see> should be used instead, which triggers a delayed layout rebuild during the next layout pass. The delayed rebuild automatically handles objects in the entire layout hierarchy in the correct order, and prevents multiple recalculations for the same layout elements. However, for special layout calculation needs, <see cref="UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate"></see> can be used to get the layout of a sub-tree resolved immediately. This can even be done from inside layout calculation methods such as <see cref="UnityEngine.UI.ILayoutController.SetLayoutHorizontal"></see> or <see cref="UnityEngine.UI.ILayoutController.SetLayoutVertical"></see>. Usage should be restricted to cases where multiple layout passes are unavaoidable despite the extra cost in performance.</para>
      </summary>
      <param name="layoutRoot">The layout element to perform the layout rebuild on.</param>
    </member>
    <member name="P:UnityEngine.UI.InputField.caretBlinkRate">
      <summary>The blinking rate of the input caret, defined as the number of times the blink cycle occurs per second.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutRebuilder.MarkLayoutForRebuild(UnityEngine.RectTransform)">
      <summary>Mark the given <see cref="UnityEngine.RectTransform"></see> as needing it's layout to be recalculated during the next layout pass.</summary>
      <param name="rect">Rect to rebuild.</param>
    </member>
    <member name="P:UnityEngine.UI.InputField.caretColor">
      <summary>The custom caret color used if customCaretColor is set.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutUtility.GetFlexibleHeight(UnityEngine.RectTransform)">
      <summary>
        <para>Returns the flexible height of the layout element.</para>
        <para>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</para>
      </summary>
      <param name="rect">The RectTransform of the layout element to query.</param>
    </member>
    <member name="P:UnityEngine.UI.InputField.caretPosition">
      <summary>
        <para>Current InputField caret position (also selection tail).</para>
        <para>The location where entering new text will begin. If there is selected text this will refer to where the selection was finished.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.InputField.caretWidth">
      <summary>The width of the caret in pixels.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutUtility.GetFlexibleSize(UnityEngine.RectTransform,System.Int32)">
      <summary>
        <para>Returns the flexible size of the layout element.</para>
        <para>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</para>
      </summary>
      <param name="rect">The RectTransform of the layout element to query.</param>
      <param name="axis">The axis to query. This can be 0 or 1.</param>
    </member>
    <member name="P:UnityEngine.UI.InputField.characterLimit">
      <summary>How many characters the input field is limited to. 0 = infinite.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutUtility.GetFlexibleWidth(UnityEngine.RectTransform)">
      <summary>
        <para>Returns the flexible width of the layout element.</para>
        <para>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</para>
      </summary>
      <param name="rect">The RectTransform of the layout element to query.</param>
    </member>
    <member name="P:UnityEngine.UI.InputField.characterValidation">
      <summary>The type of validation to perform on a character.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutUtility.GetMinHeight(UnityEngine.RectTransform)">
      <summary>
        <para>Returns the minimum height of the layout element.</para>
        <para>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</para>
      </summary>
      <param name="rect">The RectTransform of the layout element to query.</param>
    </member>
    <member name="M:UnityEngine.UI.LayoutUtility.GetMinSize(UnityEngine.RectTransform,System.Int32)">
      <summary>
        <para>Returns the minimum size of the layout element.</para>
        <para>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</para>
      </summary>
      <param name="rect">The RectTransform of the layout element to query.</param>
      <param name="axis">The axis to query. This can be 0 or 1.</param>
    </member>
    <member name="M:UnityEngine.UI.LayoutUtility.GetMinWidth(UnityEngine.RectTransform)">
      <summary>
        <para>Returns the minimum width of the layout element.</para>
        <para>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</para>
      </summary>
      <param name="rect">The RectTransform of the layout element to query.</param>
    </member>
    <member name="M:UnityEngine.UI.LayoutUtility.GetPreferredHeight(UnityEngine.RectTransform)">
      <summary>
        <para>Returns the preferred height of the layout element.</para>
        <para>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</para>
      </summary>
      <param name="rect">The RectTransform of the layout element to query.</param>
    </member>
    <member name="M:UnityEngine.UI.LayoutUtility.GetPreferredSize(UnityEngine.RectTransform,System.Int32)">
      <summary>
        <para>Returns the preferred size of the layout element.</para>
        <para>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</para>
      </summary>
      <param name="rect">The RectTransform of the layout element to query.</param>
      <param name="axis">The axis to query. This can be 0 or 1.</param>
    </member>
    <member name="M:UnityEngine.UI.LayoutUtility.GetPreferredWidth(UnityEngine.RectTransform)">
      <summary>
        <para>Returns the preferred width of the layout element.</para>
        <para>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</para>
      </summary>
      <param name="rect">The RectTransform of the layout element to query.</param>
    </member>
    <member name="P:UnityEngine.UI.Mask.graphic">
      <summary>The graphic associated with the Mask.</summary>
    </member>
    <member name="P:UnityEngine.UI.Mask.rectTransform">
      <summary>Cached <see cref="UnityEngine.RectTransform"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Mask.showMaskGraphic">
      <summary>Show the graphic that is associated with the Mask render area.</summary>
    </member>
    <member name="M:UnityEngine.UI.Mask.GetModifiedMaterial(UnityEngine.Material)">
      <summary>See: <see cref="UnityEngine.UI.IMaterialModifier"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Mask.IsRaycastLocationValid(UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>See:<see cref="UnityEngine.ICanvasRaycastFilter"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Mask.MaskEnabled">
      <summary>See:IMask.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutElement.layoutPriority">
      <summary>
        <para>Called by the layout system.</para>
        <para>The LayoutElement component has a layout priority of 1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutElement.minHeight">
      <summary>The minimum height this layout element may be allocated.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutElement.minWidth">
      <summary>The minimum width this layout element may be allocated.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutElement.preferredHeight">
      <summary>The preferred height this layout element should be allocated if there is sufficient space.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutElement.preferredWidth">
      <summary>
        <para>The preferred width this layout element should be allocated if there is sufficient space.</para>
        <para>The preferredWidth can be set to -1 to remove the size.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutElement.CalculateLayoutInputHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.LayoutElement.CalculateLayoutInputVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="P:UnityEngine.UI.LayoutGroup.padding">
      <summary>The padding to add around the child layout elements.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutGroup.preferredHeight">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutGroup.preferredWidth">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="M:UnityEngine.UI.LayoutGroup.CalculateLayoutInputHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.LayoutGroup.CalculateLayoutInputVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.LayoutGroup.SetLayoutHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.LayoutGroup.SetLayoutVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="P:UnityEngine.UI.LayoutGroup.childAlignment">
      <summary>
        <para>The alignment to use for the child layout elements in the layout group.</para>
        <para>If some child layout elements specify no flexible width and height, the children may not take up all the available space inside the layout group. The alignment setting specifies how to align them within the layout group when this is the case.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutGroup.flexibleHeight">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutGroup.flexibleWidth">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutGroup.layoutPriority">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutGroup.minHeight">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.LayoutGroup.minWidth">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.Navigation.defaultNavigation">
      <summary>Return a <see cref="UnityEngine.UI.Navigation"></see> with sensible default values.</summary>
    </member>
    <member name="P:UnityEngine.UI.Navigation.mode">
      <summary>Navigation mode.</summary>
    </member>
    <member name="P:UnityEngine.UI.Navigation.selectOnDown">
      <summary>Specify a Selectable UI GameObject to highlight when the down arrow key is pressed.</summary>
    </member>
    <member name="P:UnityEngine.UI.Navigation.selectOnLeft">
      <summary>Specify a Selectable UI GameObject to highlight when the left arrow key is pressed.</summary>
    </member>
    <member name="M:UnityEngine.UI.MaskUtilities.FindRootSortOverrideCanvas(UnityEngine.Transform)">
      <summary>
        <para>Find a root <see cref="UnityEngine.Canvas"></see>.</para>
        <para>Finds either the most root canvas, or the first canvas that overrides sorting.</para>
      </summary>
      <param name="start">Search start.</param>
      <returns>Canvas transform.</returns>
    </member>
    <member name="M:UnityEngine.UI.MaskUtilities.GetRectMaskForClippable(UnityEngine.UI.IClippable)">
      <summary>Find the correct <see cref="UnityEngine.UI.RectMask2D"></see> for a given <see cref="UnityEngine.UI.IClippable"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.MaskUtilities.GetStencilDepth(UnityEngine.Transform,UnityEngine.Transform)">
      <summary>Find the stencil depth for a given element.</summary>
    </member>
    <member name="M:UnityEngine.UI.MaskUtilities.IsDescendantOrSelf(UnityEngine.Transform,UnityEngine.Transform)">
      <summary>Helper function to determine if the child is a descendant of father or is father.</summary>
      <param name="father">The transform to compare against.</param>
      <param name="child">The starting transform to search up the hierarchy.</param>
      <returns>Is child equal to father or is a descendant.</returns>
    </member>
    <member name="M:UnityEngine.UI.MaskUtilities.Notify2DMaskStateChanged(UnityEngine.Component)">
      <summary>Notify all IClippables under the given component that they need to recalculate clipping.</summary>
    </member>
    <member name="M:UnityEngine.UI.MaskUtilities.NotifyStencilStateChanged(UnityEngine.Component)">
      <summary>Notify all IMaskable under the given component that they need to recalculate masking.</summary>
    </member>
    <member name="P:UnityEngine.UI.MaskableGraphic.maskable">
      <summary>Does this graphic allow masking.</summary>
    </member>
    <member name="P:UnityEngine.UI.MaskableGraphic.onCullStateChanged">
      <summary>
        <para>Callback issued when culling changes.</para>
        <para>Called whene the culling state of this <see cref="UnityEngine.UI.MaskableGraphic"></see> either becomes culled or visible. You can use this to control other elements of your UI as culling happens.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.MaskableGraphic.Cull(UnityEngine.Rect,System.Boolean)">
      <summary>See <see cref="UnityEngine.UI.IClippable.Cull"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.MaskableGraphic.GetModifiedMaterial(UnityEngine.Material)">
      <summary>See <see cref="UnityEngine.UI.IMaterialModifier.GetModifiedMaterial"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.MaskableGraphic.RecalculateClipping">
      <summary>See: <see cref="UnityEngine.UI.IClippable.RecalculateClipping"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.MaskableGraphic.RecalculateMasking">
      <summary>See: <see cref="UnityEngine.UI.IMaskable.RecalculateMasking"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.MaskableGraphic.SetClipRect(UnityEngine.Rect,System.Boolean)">
      <summary>See <see cref="UnityEngine.UI.IClippable.SetClipRect"></see>.</summary>
    </member>
    <member name="P:UnityEngine.UI.Navigation.selectOnRight">
      <summary>Specify a Selectable UI GameObject to highlight when the right arrow key is pressed.</summary>
    </member>
    <member name="P:UnityEngine.UI.Navigation.selectOnUp">
      <summary>Specify a Selectable UI GameObject to highlight when the Up arrow key is pressed.</summary>
    </member>
    <member name="F:UnityEngine.UI.Navigation.Mode.None">
      <summary>
        <para>No navigation.</para>
        <para>No navigation is allowed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Navigation.Mode.Horizontal">
      <summary>
        <para>Horizontal Navigation.</para>
        <para>Navigation should only be allowed when left / right move events happen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Navigation.Mode.Vertical">
      <summary>
        <para>Vertical navigation.</para>
        <para>Navigation should only be allowed when up / down move events happen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Navigation.Mode.Automatic">
      <summary>
        <para>Automatic navigation.</para>
        <para>Attempt to find the 'best' next object to select. This should be based on a sensible heuristic.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Navigation.Mode.Explicit">
      <summary>
        <para>Explicit navigaion.</para>
        <para>User should explicitly specify what is selected by each move event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.RawImage.texture">
      <summary>The RawImage's texture.</summary>
    </member>
    <member name="P:UnityEngine.UI.RawImage.uvRect">
      <summary>The RawImage texture coordinates.</summary>
    </member>
    <member name="M:UnityEngine.UI.RawImage.SetNativeSize">
      <summary>
        <para>Adjusts the raw image size to make it pixel-perfect.</para>
        <para>This means setting the RawImage's <see cref="UnityEngine.RectTransform.sizeDelta"></see> to be equal to the Texture dimensions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.RawImage.mainTexture">
      <summary>
        <para>The graphic's texture. (Read Only).</para>
        <para>This is the Texture that gets passed to the CanvasRenderer, Material and then Shader _MainTex. When implementing your own Graphic you can override this to control which texture goes through the UI Rendering pipeline. Bear in mind that Unity tries to batch UI elements together to improve performance, so its ideal to work with atlas to reduce the number of draw calls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.RectMask2D.canvasRect">
      <summary>Get the <see cref="UnityEngine.Rect"></see> for the mask in canvas space.</summary>
    </member>
    <member name="P:UnityEngine.UI.RectMask2D.rectTransform">
      <summary>Get the <see cref="UnityEngine.RectTransform"></see> for the mask.</summary>
    </member>
    <member name="P:UnityEngine.UI.RawImage.mainTexture">
      <summary>The RawImage's texture. (ReadOnly).</summary>
    </member>
    <member name="M:UnityEngine.UI.RectMask2D.AddClippable(UnityEngine.UI.IClippable)">
      <summary>Add a [IClippable]] to be tracked by the mask.</summary>
    </member>
    <member name="M:UnityEngine.UI.RectMask2D.IsRaycastLocationValid(UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>See:<see cref="UnityEngine.ICanvasRaycastFilter"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.RectMask2D.PerformClipping">
      <summary>See: <see cref="UnityEngine.UI.IClipper.PerformClipping"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.RectMask2D.RemoveClippable(UnityEngine.UI.IClippable)">
      <summary>Remove an <see cref="UnityEngine.UI.IClippable"></see> from being tracked by the mask.</summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.allSelectables">
      <summary>
        <para>List of all the selectable objects currently active in the scene.</para>
        <para>UI.Selectable.allSelectables.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.animationTriggers">
      <summary>
        <para>The <see cref="UnityEngine.UI.AnimationTriggers"></see> for this selectable object.</para>
        <para>Modifications will not be visible if transition is not Animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.animator">
      <summary>Convenience function to get the Animator component on the GameObject.</summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.colors">
      <summary>
        <para>The <see cref="UnityEngine.UI.ColorBlock"></see> for this selectable object.</para>
        <para>Modifications will not be visible if transition is not ColorTint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.image">
      <summary>Convenience function that converts the referenced Graphic to a Image, if possible.</summary>
    </member>
    <member name="F:UnityEngine.UI.ScrollRect.MovementType.Unrestricted">
      <summary>Unrestricted movement. The content can move forever.</summary>
    </member>
    <member name="F:UnityEngine.UI.ScrollRect.MovementType.Elastic">
      <summary>Elastic movement. The content is allowed to temporarily move beyond the container, but is pulled back elastically.</summary>
    </member>
    <member name="F:UnityEngine.UI.ScrollRect.MovementType.Clamped">
      <summary>Clamped movement. The content can not be moved beyond its container.</summary>
    </member>
    <member name="F:UnityEngine.UI.ScrollRect.ScrollbarVisibility.Permanent">
      <summary>Always show the scrollbar.</summary>
    </member>
    <member name="F:UnityEngine.UI.ScrollRect.ScrollbarVisibility.AutoHide">
      <summary>Automatically hide the scrollbar when no scrolling is needed on this axis. The viewport rect will not be changed.</summary>
    </member>
    <member name="F:UnityEngine.UI.ScrollRect.ScrollbarVisibility.AutoHideAndExpandViewport">
      <summary>
        <para>Automatically hide the scrollbar when no scrolling is needed on this axis, and expand the viewport rect accordingly.</para>
        <para>When this setting is used, the scrollbar and the viewport rect become driven, meaning that values in the RectTransform are calculated automatically and can't be manually edited.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Selectable.Transition.Animation">
      <summary>Use an animation transition.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.GraphicUpdateComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.GraphicUpdateComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.LayoutComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.LayoutComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Handling for when the scrollbar value is begin being dragged.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.OnDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Handling for when the scrollbar value is dragged.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>See: <see cref="UnityEngine.EventSystems.IInitializePotentialDragHandler.OnInitializePotentialDrag"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.OnMove(UnityEngine.EventSystems.AxisEventData)">
      <summary>Handling for movement events.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
      <summary>Event triggered when pointer is pressed down on the scrollbar.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
      <summary>Event triggered when pointer is released after pressing on the scrollbar.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.Rebuild(UnityEngine.UI.CanvasUpdate)">
      <summary>Handling for when the canvas is rebuilt.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.content">
      <summary>The content that can be scrolled. It should be a child of the GameObject with ScrollRect on it.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.decelerationRate">
      <summary>
        <para>The rate at which movement slows down.</para>
        <para>The deceleration rate is the speed reduction per second. A value of 0.5 halves the speed each second. The default is 0.135. The deceleration rate is only used when <see cref="UnityEngine.UI.ScrollRect.inertia"></see> is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.elasticity">
      <summary>
        <para>The amount of elasticity to use when the content moves beyond the scroll rect.</para>
        <para>The default is 0.1. Elasticity is only used when the <see cref="UnityEngine.UI.ScrollRect.movementType"></see> is set to Elastic.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.flexibleHeight">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.flexibleWidth">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="F:UnityEngine.UI.Selectable.SelectionState.Normal">
      <summary>The UI object can be selected.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.horizontal">
      <summary>Should horizontal scrolling be enabled?</summary>
    </member>
    <member name="F:UnityEngine.UI.Selectable.SelectionState.Highlighted">
      <summary>The UI object is highlighted.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.horizontalNormalizedPosition">
      <summary>The horizontal scroll position as a value between 0 and 1, with 0 being at the left.</summary>
    </member>
    <member name="F:UnityEngine.UI.Selectable.SelectionState.Pressed">
      <summary>The UI object is pressed.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.horizontalScrollbar">
      <summary>Optional <see cref="UnityEngine.UI.Scrollbar"></see> object linked to the horizontal scrolling of the ScrollRect.</summary>
    </member>
    <member name="F:UnityEngine.UI.Selectable.SelectionState.Disabled">
      <summary>The UI object cannot be selected.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.horizontalScrollbarSpacing">
      <summary>The space between the scrollbar and the viewport.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.horizontalScrollbarVisibility">
      <summary>The mode of visibility for the horizontal scrollbar.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.inertia">
      <summary>
        <para>Should movement inertia be enabled?</para>
        <para>Inertia means that the scrollrect content will keep scrolling for a while after being dragged. It gradually slows down according to the <see cref="UnityEngine.UI.ScrollRect.decelerationRate"></see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UI.Selectable.Transition.None">
      <summary>No Transition.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.layoutPriority">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="F:UnityEngine.UI.Selectable.Transition.ColorTint">
      <summary>Use an color tint transition.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.minHeight">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="F:UnityEngine.UI.Selectable.Transition.SpriteSwap">
      <summary>Use a sprite swap transition.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.minWidth">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.movementType">
      <summary>The behavior to use when the content moves beyond the scroll rect.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.normalizedPosition">
      <summary>The scroll position as a <see cref="UnityEngine.Vector2"></see> between (0,0) and (1,1) with (0,0) being the lower left corner.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.onValueChanged">
      <summary>
        <para>Callback executed when the position of the child changes.</para>
        <para>
          <see cref="UnityEngine.UI.ScrollRect.onValueChanged">
          </see> is used to watch for changes in the <see cref="UnityEngine.UI.ScrollRect"></see> object. The onValueChanged call will use the <see cref="UnityEngine.UI.Button.ButtonClickedEvent.AddListener"></see> API to watch for changes. When changes happen script code provided by the user will be called. The UnityEvent.AddListener API for <see cref="UnityEngine.UI.ScrollRect.onValueChanged"></see> takes a <see cref="UnityEngine.Vector2"></see>. Note: The editor allows the onValueChanged value to be set up manually. For example the value can be set to run only a runtime. The object and script function to call are also provided here. The <see cref="UnityEngine.UI.ScrollRect.onValueChanged"></see> variable can be alternatively set-up at runtime. The script example below shows how this can be done. The script is attached to the <see cref="UnityEngine.UI.ScrollRect"></see> object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.preferredHeight">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.preferredWidth">
      <summary>Called by the layout system.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.scrollSensitivity">
      <summary>
        <para>The sensitivity to scroll wheel and track pad scroll events.</para>
        <para>Higher values indicate higher sensitivity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.velocity">
      <summary>
        <para>The current velocity of the content.</para>
        <para>The velocity is defined in units per second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.vertical">
      <summary>Should vertical scrolling be enabled?</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.verticalNormalizedPosition">
      <summary>The vertical scroll position as a value between 0 and 1, with 0 being at the bottom.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.verticalScrollbar">
      <summary>Optional <see cref="UnityEngine.UI.Scrollbar"></see> object linked to the vertical scrolling of the ScrollRect.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.verticalScrollbarSpacing">
      <summary>The space between the scrollbar and the viewport.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.verticalScrollbarVisibility">
      <summary>The mode of visibility for the vertical scrollbar.</summary>
    </member>
    <member name="P:UnityEngine.UI.ScrollRect.viewport">
      <summary>Reference to the viewport RectTransform that is the parent of the content RectTransform.</summary>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.CalculateLayoutInputHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.CalculateLayoutInputVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutElement">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.GraphicUpdateComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.GraphicUpdateComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.IsActive">
      <summary>See member in base class.</summary>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.LayoutComplete">
      <summary>See <see cref="UnityEngine.UI.ICanvasElement.LayoutComplete"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Handling for when the content is beging being dragged.</summary>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.OnDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Handling for when the content is dragged.</summary>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Handling for when the content has finished being dragged.</summary>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>See: <see cref="UnityEngine.EventSystems.IInitializePotentialDragHandler.OnInitializePotentialDrag"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.OnScroll(UnityEngine.EventSystems.PointerEventData)">
      <summary>See <see cref="UnityEngine.EventSystems.IScrollHandler.OnScroll"></see>.</summary>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.Rebuild(UnityEngine.UI.CanvasUpdate)">
      <summary>Rebuilds the scroll rect data after initialization.</summary>
      <param name="executing">The current step of the rendering CanvasUpdate cycle.</param>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.SetLayoutHorizontal">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.SetLayoutVertical">
      <summary>Called by the layout system.</summary>
      <seealso cref="T:UnityEngine.UI.ILayoutController">
      </seealso>
    </member>
    <member name="M:UnityEngine.UI.ScrollRect.StopMovement">
      <summary>Sets the velocity to zero on both axes so the content stops moving.</summary>
    </member>
    <member name="P:UnityEngine.UI.Scrollbar.direction">
      <summary>The direction of the scrollbar from minimum to maximum value.</summary>
    </member>
    <member name="P:UnityEngine.UI.Scrollbar.handleRect">
      <summary>The RectTransform to use for the handle.</summary>
    </member>
    <member name="P:UnityEngine.UI.Scrollbar.numberOfSteps">
      <summary>The number of steps to use for the value. A value of 0 disables use of steps.</summary>
    </member>
    <member name="P:UnityEngine.UI.Scrollbar.onValueChanged">
      <summary>Handling for when the scrollbar value is changed.</summary>
    </member>
    <member name="P:UnityEngine.UI.Scrollbar.size">
      <summary>The size of the scrollbar handle where 1 means it fills the entire scrollbar.</summary>
    </member>
    <member name="P:UnityEngine.UI.Scrollbar.value">
      <summary>The current value of the scrollbar, between 0 and 1.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.FindSelectableOnDown">
      <summary>See member in base class.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.FindSelectableOnLeft">
      <summary>See member in base class.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.FindSelectableOnRight">
      <summary>See member in base class.</summary>
    </member>
    <member name="M:UnityEngine.UI.Scrollbar.FindSelectableOnUp">
      <summary>See member in base class.</summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.interactable">
      <summary>UI.Selectable.interactable.</summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.navigation">
      <summary>The <see cref="UnityEngine.UI.Navigation"></see> setting for this selectable object.</summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.spriteState">
      <summary>
        <para>The <see cref="UnityEngine.UI.SpriteState"></see> for this selectable object.</para>
        <para>Modifications will not be visible if transition is not SpriteSwap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.targetGraphic">
      <summary>Graphic that will be transitioned upon.</summary>
    </member>
    <member name="P:UnityEngine.UI.Selectable.transition">
      <summary>The type of transition that will be applied to the targetGraphic when the state changes.</summary>
    </member>
    <member name="M:UnityEngine.UI.Selectable.FindSelectable(UnityEngine.Vector3)">
      <summary>
        <para>Finds the selectable object next to this one.</para>
        <para>The direction is determined by a Vector3 variable.</para>
      </summary>
      <param name="dir">The direction in which to search for a neighbouring Selectable object.</param>
      <returns>The neighbouring Selectable object. Null if none found.</returns>
    </member>
    <member name="M:UnityEngine.UI.Selectable.FindSelectableOnDown">
      <summary>
        <para>Find the selectable object below this one.</para>
        <para>UI.Selectable.FindSelectableOnDown.</para>
      </summary>
      <returns>The Selectable object below current.</returns>
    </member>
    <member name="M:UnityEngine.UI.Selectable.FindSelectableOnLeft">
      <summary>Find the selectable object to the left of this one.</summary>
      <returns>The Selectable object to the left of current.</returns>
    </member>
    <member name="M:UnityEngine.UI.Selectable.FindSelectableOnRight">
      <summary>Find the selectable object to the right of this one.</summary>
      <returns>The Selectable object to the right of current.</returns>
    </member>
    <member name="M:UnityEngine.UI.Selectable.FindSelectableOnUp">
      <summary>Find the selectable object above this one.</summary>
      <returns>The Selectable object above current.</returns>
    </member>
    <member name="M:UnityEngine.UI.Selectable.IsInteractable">
      <summary>UI.Selectable.IsInteractable.</summary>
    </member>
    <member name="M:UnityEngine.UI.Selectable.OnDeselect(UnityEngine.EventSystems.BaseEventData)">
      <summary>Unset selection and transition to appropriate state.</summary>
      <param name="eventData">The eventData usually sent by the EventSystem.</param>
    </member>
    <member name="M:UnityEngine.UI.Selectable.OnMove(UnityEngine.EventSystems.AxisEventData)">
      <summary>Determine in which of the 4 move directions the next selectable object should be found.</summary>
      <param name="eventData">The EventData usually sent by the EventSystem.</param>
    </member>
    <member name="M:UnityEngine.UI.Selectable.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
      <summary>Evaluate current state and transition to pressed state.</summary>
      <param name="eventData">The EventData usually sent by the EventSystem.</param>
    </member>
    <member name="M:UnityEngine.UI.Selectable.OnPointerEnter(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Evaluate current state and transition to appropriate state.</para>
        <para>New state could be pressed or hover depending on pressed state.</para>
      </summary>
      <param name="eventData">The EventData usually sent by the EventSystem.</param>
    </member>
    <member name="M:UnityEngine.UI.Selectable.OnPointerExit(UnityEngine.EventSystems.PointerEventData)">
      <summary>Evaluate current state and transition to normal state.</summary>
      <param name="eventData">The EventData usually sent by the EventSystem.</param>
    </member>
    <member name="M:UnityEngine.UI.Selectable.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Evaluate eventData and transition to appropriate state.</para>
        <para>New state will be based upon current hover state.</para>
      </summary>
      <param name="eventData">The EventData usually sent by the EventSystem.</param>
    </member>
    <member name="M:UnityEngine.UI.Selectable.OnSelect(UnityEngine.EventSystems.BaseEventData)">
      <summary>Set selection and transition to appropriate state.</summary>
      <param name="eventData">The EventData usually sent by the EventSystem.</param>
    </member>
    <member name="M:UnityEngine.UI.Selectable.Select">
      <summary>Selects this Selectable.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.AbstractEventData.used">
      <summary>Is the event used?</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.AbstractEventData.Reset">
      <summary>Reset the event.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.AbstractEventData.Use">
      <summary>Use the event.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.AxisEventData.moveDir">
      <summary>
        <see cref="UnityEngine.EventSystems.MoveDirection">
        </see> for this event.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.AxisEventData.moveVector">
      <summary>Raw input vector associated with this event.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseInputModule.input">
      <summary>The current <see cref="UnityEngine.EventSystems.BaseInput"></see> being used by the input module.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInputModule.ActivateModule">
      <summary>Called when the module is activated. Override this if you want custom code to execute when you activate your module.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInputModule.DeactivateModule">
      <summary>Called when the module is deactivated. Override this if you want custom code to execute when you deactivate your module.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInputModule.IsModuleSupported">
      <summary>Check to see if the module is supported. Override this if you have a platfrom specific module (eg. TouchInputModule that you do not want to activate on standalone.</summary>
      <returns>Is the module supported.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInputModule.IsPointerOverGameObject(System.Int32)">
      <summary>
        <para>Is the pointer with the given ID over an <see cref="UnityEngine.EventSystems.EventSystem"></see> object?</para>
        <para>If the module is pointer based, you can override it to return true if the pointer is over an <see cref="UnityEngine.EventSystems.EventSystem"></see> object. See <see cref="UnityEngine.EventSystems.EventSystem.IsPointerOverGameObject"></see>.</para>
      </summary>
      <param name="pointerId">Pointer ID.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInputModule.Process">
      <summary>
        <para>Process the current tick for the module.</para>
        <para>Executed once per Update call. Override for custom processing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInputModule.ShouldActivateModule">
      <summary>
        <para>Should be activated.</para>
        <para>Override to add custom logic.</para>
      </summary>
      <returns>Should the module be activated.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInputModule.UpdateModule">
      <summary>
        <para>Update the internal state of the Module.</para>
        <para>Called on all modules before process is sent to the one activated module.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseRaycaster.eventCamera">
      <summary>The camera that will generate rays for this raycaster.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseRaycaster.renderOrderPriority">
      <summary>
        <para>Priority of the raycaster based upon render order.</para>
        <para>Only valid for GraphicRaycaster.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseRaycaster.sortOrderPriority">
      <summary>
        <para>Priority of the raycaster based upon sort order.</para>
        <para>Only valid for GraphicRaycaster.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ICanvasElement.transform">
      <summary>Get the transform associated with the ICanvasElement.</summary>
    </member>
    <member name="M:UnityEngine.UI.ICanvasElement.GraphicUpdateComplete">
      <summary>Callback sent when this ICanvasElement has completed Graphic rebuild.</summary>
    </member>
    <member name="M:UnityEngine.UI.ICanvasElement.IsDestroyed">
      <summary>Return true if the element is considered destroyed. Used if the native representation has been destroyed.</summary>
    </member>
    <member name="M:UnityEngine.UI.ICanvasElement.LayoutComplete">
      <summary>Callback sent when this ICanvasElement has completed layout.</summary>
    </member>
    <member name="M:UnityEngine.UI.ICanvasElement.Rebuild(UnityEngine.UI.CanvasUpdate)">
      <summary>Rebuild the element for the given stage.</summary>
      <param name="executing">Stage being rebuild.</param>
    </member>
    <member name="P:UnityEngine.UI.ILayoutElement.flexibleHeight">
      <summary>The extra relative height this layout element should be allocated if there is additional available space.</summary>
    </member>
    <member name="P:UnityEngine.UI.ILayoutElement.flexibleWidth">
      <summary>
        <para>The extra relative width this layout element should be allocated if there is additional available space.</para>
        <para>Setting preferredWidth to -1 removed the preferredWidth.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ILayoutElement.layoutPriority">
      <summary>
        <para>The layout priority of this component.</para>
        <para>If multiple components on the same GameObject implement the ILayoutElement interface, the values provided by components that return a higher priority value are given priority. However, values less than zero are ignored. This way a component can override only select properties by leaving the remaning values to be -1 or other values less than zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UI.ILayoutElement.minHeight">
      <summary>The minimum height this layout element may be allocated.</summary>
    </member>
    <member name="P:UnityEngine.UI.ILayoutElement.minWidth">
      <summary>The minimum width this layout element may be allocated.</summary>
    </member>
    <member name="P:UnityEngine.UI.ILayoutElement.preferredHeight">
      <summary>The preferred height this layout element should be allocated if there is sufficient space.</summary>
    </member>
    <member name="P:UnityEngine.UI.ILayoutElement.preferredWidth">
      <summary>
        <para>The preferred width this layout element should be allocated if there is sufficient space.</para>
        <para>preferredWidth can be set to -1 to remove the size.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UI.ILayoutElement.CalculateLayoutInputHorizontal">
      <summary>The minWidth, preferredWidth, and flexibleWidth values may be calculated in this callback.</summary>
    </member>
    <member name="M:UnityEngine.UI.ILayoutElement.CalculateLayoutInputVertical">
      <summary>The minHeight, preferredHeight, and flexibleHeight values may be calculated in this callback.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseEventData.currentInputModule">
      <summary>A reference to the <see cref="UnityEngine.EventSystems.BaseInputModule"></see> that sent this event.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseEventData.selectedObject">
      <summary>The object currently considered selected by the <see cref="UnityEngine.EventSystems.EventSystem"></see>.</summary>
    </member>
    <member name="F:UnityEngine.UI.Scrollbar.Direction.LeftToRight">
      <summary>From left to right.</summary>
    </member>
    <member name="F:UnityEngine.UI.Scrollbar.Direction.RightToLeft">
      <summary>From right to left.</summary>
    </member>
    <member name="F:UnityEngine.UI.Scrollbar.Direction.BottomToTop">
      <summary>From bottom to top.</summary>
    </member>
    <member name="F:UnityEngine.UI.Scrollbar.Direction.TopToBottom">
      <summary>From top to bottom.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseInput.compositionCursorPos">
      <summary>Interface to <see cref="UnityEngine.Input.compositionCursorPos"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseInput.compositionString">
      <summary>Interface to <see cref="UnityEngine.Input.compositionString"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseInput.imeCompositionMode">
      <summary>Interface to <see cref="UnityEngine.Input.imeCompositionMode"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseInput.mousePosition">
      <summary>Interface to <see cref="UnityEngine.Input.mousePosition"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseInput.mousePresent">
      <summary>Interface to <see cref="UnityEngine.Input.mousePresent"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseInput.mouseScrollDelta">
      <summary>Interface to <see cref="UnityEngine.Input.mouseScrollDelta"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseInput.touchCount">
      <summary>Interface to <see cref="UnityEngine.Input.touchCount"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.BaseInput.touchSupported">
      <summary>Interface to <see cref="UnityEngine.Input.touchSupported"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInput.GetAxisRaw(System.String)">
      <summary>Interface to <see cref="UnityEngine.Input.GetAxisRaw"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInput.GetButtonDown(System.String)">
      <summary>Interface to <see cref="UnityEngine.Input.GetButtonDown"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInput.GetMouseButton(System.Int32)">
      <summary>Interface to <see cref="UnityEngine.Input.GetMouseButton"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInput.GetMouseButtonDown(System.Int32)">
      <summary>Interface to <see cref="UnityEngine.Input.GetMouseButtonDown"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInput.GetMouseButtonUp(System.Int32)">
      <summary>Interface to <see cref="UnityEngine.Input.GetMouseButtonUp"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseInput.GetTouch(System.Int32)">
      <summary>Interface to <see cref="UnityEngine.Input.GetTouch"></see>. Can be overridden to provide custom input instead of using the <see cref="UnityEngine.Input"></see> class.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTrigger.Entry.callback">
      <summary>The desired <see cref="UnityEngine.EventSystems.EventTrigger.TriggerEvent"></see> to be Invoked.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.EventSystem.ToString">
      <summary>Returns the name of the game object.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.EventTrigger.triggers">
      <summary>All the functions registered in this EventTrigger.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called before a drag is started.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnCancel(UnityEngine.EventSystems.BaseEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a Cancel event occurs.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="P:UnityEngine.EventSystems.EventSystem.current">
      <summary>Return the current EventSystem.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.EventSystem.alreadySelecting">
      <summary>Returns true if the EventSystem is already in a <see cref="UnityEngine.EventSystems.EventSystem.SetSelectedGameObject"></see>.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.EventSystem.currentInputModule">
      <summary>The currently active <see cref="UnityEngine.EventSystems.BaseInputModule"></see>.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnDeselect(UnityEngine.EventSystems.BaseEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a new object is being selected.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="P:UnityEngine.EventSystems.EventSystem.currentSelectedGameObject">
      <summary>The <see cref="UnityEngine.GameObject"></see> currently considered active by the <see cref="UnityEngine.EventSystems.EventSystem"></see>.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.EventSystem.firstSelectedGameObject">
      <summary>The <see cref="UnityEngine.GameObject"></see> that was selected first.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.EventSystem.isFocused">
      <summary>
        <para>Flag to say weather the EventSystem thinks it should be paused or not based upon focused state.</para>
        <para>Used to determine inside the indevidual InputModules if the module should be ticked while the application doesnt have focus.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EventSystems.EventSystem.pixelDragThreshold">
      <summary>The soft area for dragging in pixels.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> every time the pointer is moved during dragging.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="P:UnityEngine.EventSystems.EventSystem.sendNavigationEvents">
      <summary>Should the EventSystem allow navigation events (move / submit / cancel).</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.EventSystem.IsPointerOverGameObject">
      <summary>
        <para>Is the pointer with the given ID over an <see cref="UnityEngine.EventSystems.EventSystem"></see> object?</para>
        <para>If you use IsPointerOverGameObject() without a parameter, it points to the "left mouse button" (pointerId = -1); therefore when you use IsPointerOverGameObject for touch, you should consider passing a pointerId to it.</para>
        <para>Note that for touch, IsPointerOverGameObject should be used with <c>OnMouseDown()</c> or <c>Input.GetMouseButtonDown(0)</c> or <c>Input.GetTouch(0).phase == TouchPhase.Began</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.EventSystems.EventSystem.IsPointerOverGameObject(System.Int32)">
      <summary>
        <para>Is the pointer with the given ID over an <see cref="UnityEngine.EventSystems.EventSystem"></see> object?</para>
        <para>If you use IsPointerOverGameObject() without a parameter, it points to the "left mouse button" (pointerId = -1); therefore when you use IsPointerOverGameObject for touch, you should consider passing a pointerId to it.</para>
        <para>Note that for touch, IsPointerOverGameObject should be used with <c>OnMouseDown()</c> or <c>Input.GetMouseButtonDown(0)</c> or <c>Input.GetTouch(0).phase == TouchPhase.Began</c>.</para>
      </summary>
      <param name="pointerId">Pointer (touch / mouse) ID.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnDrop(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when an object accepts a drop.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> once dragging ends.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventSystem.SetSelectedGameObject(UnityEngine.GameObject,UnityEngine.EventSystems.BaseEventData)">
      <summary>Set the object as selected. Will send an OnDeselect the the old selected object and OnSelect to the new selected object.</summary>
      <param name="selected">GameObject to select.</param>
      <param name="pointer">Associated EventData.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventSystem.UpdateModules">
      <summary>Recalculate the internal list of BaseInputModules.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a drag has been found, but before it is valid to begin the drag.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnMove(UnityEngine.EventSystems.AxisEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a Move event occurs.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a Click event occurs.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a PointerDown event occurs.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerEnter(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when the pointer enters the object associated with this EventTrigger.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerExit(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when the pointer exits the object associated with this EventTrigger.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.pointerUpHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IPointerUpHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.scrollHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IScrollHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.selectHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.ISelectHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a PointerUp event occurs.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.submitHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.ISubmitHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.updateSelectedHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IUpdateSelectedHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.ExecuteEvents.CanHandleEvent(UnityEngine.GameObject)">
      <summary>Can the given <see cref="UnityEngine.GameObject"></see> handle the <see cref="UnityEngine.EventSystems.IEventSystemHandler"></see> of type T.</summary>
      <param name="go">GameObject.</param>
      <returns>Can Handle.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnScroll(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a Scroll event occurs.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnSelect(UnityEngine.EventSystems.BaseEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a Select event occurs.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnSubmit(UnityEngine.EventSystems.BaseEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a Submit event occurs.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.ExecuteEvents.GetEventHandler(UnityEngine.GameObject)">
      <summary>
        <para>Traverse the object hierarchy starting at <c>root</c>, and return the <see cref="UnityEngine.GameObject"></see> which implements the event handler of type &lt;T&gt;.</para>
        <para>NB: Traversal is performed upwards from the root object, not down.</para>
      </summary>
      <param name="root">Root <see cref="UnityEngine.GameObject"></see>.</param>
      <returns>Handling <see cref="UnityEngine.GameObject"></see>.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.EventTrigger.OnUpdateSelected(UnityEngine.EventSystems.BaseEventData)">
      <summary>
        <para>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when the object associated with this EventTrigger is updated.</para>
        <para>See <see cref="UnityEngine.EventSystems.EventTrigger"></see> for example usage.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTrigger.Entry.eventID">
      <summary>What type of event is the associated callback listening for.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.BaseRaycaster.ToString">
      <summary>Returns the name of the game object.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.beginDragHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IBeginDragHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.cancelHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.ICancelHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.deselectHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IDeselectHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.dragHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IDragHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.dropHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IDropHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.endDragHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IEndDragHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.initializePotentialDrag">
      <summary>
        <see cref="UnityEngine.EventSystems.IInitializePotentialDragHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.moveHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IMoveHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.pointerClickHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IPointerClickHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.pointerDownHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IPointerDownHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.pointerEnterHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IPointerEnterHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.ExecuteEvents.pointerExitHandler">
      <summary>
        <see cref="UnityEngine.EventSystems.IPointerExitHandler">
        </see> execute helper function.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.PointerInputModule.ToString">
      <summary>Returns the name of the game object.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerInputModule.kFakeTouchesId">
      <summary>Touch id for when simulating touches on a non touch device.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerInputModule.kMouseLeftId">
      <summary>Id of the cached left mouse pointer event.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerInputModule.kMouseMiddleId">
      <summary>Id of the cached middle mouse pointer event.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerInputModule.kMouseRightId">
      <summary>Id of the cached right mouse pointer event.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.PointerInputModule.IsPointerOverGameObject(System.Int32)">
      <summary>
        <para>Is the pointer with the given ID over an <see cref="UnityEngine.EventSystems.EventSystem"></see> object?</para>
        <para>If the module is pointer based, you can override it to return true if the pointer is over an <see cref="UnityEngine.EventSystems.EventSystem"></see> object. See <see cref="UnityEngine.EventSystems.EventSystem.IsPointerOverGameObject"></see>.</para>
      </summary>
      <param name="pointerId">Pointer ID.</param>
    </member>
    <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.depth">
      <summary>Get the depth of the configured camera.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.eventCamera">
      <summary>Get the camera that is used for this module.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.eventMask">
      <summary>Mask of allowed raycast events.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.finalEventMask">
      <summary>Logical and of <see cref="UnityEngine.Camera"></see> mask and <see cref="UnityEngine.EventSystems.PhysicsRaycaster.eventMask"></see>.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.maxRayIntersections">
      <summary>
        <para>Max number of ray intersection allowed to be found.</para>
        <para>A value of zero will represent using the allocating version of the raycast function where as any other value will use the non allocating version.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.eventCamera">
      <summary>The camera that will generate rays for this raycaster.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.button">
      <summary>The <see cref="UnityEngine.EventSystems.PointerEventData.InputButton"></see> for this event.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.clickCount">
      <summary>Number of clicks in a row.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.clickTime">
      <summary>The last time a click event was sent.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.delta">
      <summary>Pointer delta since last update.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.dragging">
      <summary>Is a drag operation currently occuring.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.enterEventCamera">
      <summary>The camera associated with the last OnPointerEnter event.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerEventData.hovered">
      <summary>List of objects in the hover stack.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.lastPress">
      <summary>
        <para>The <see cref="UnityEngine.GameObject"></see> for the last press event.</para>
        <para>The raw <see cref="UnityEngine.GameObject"></see> for the last press event. This means that it is the 'pressed' <see cref="UnityEngine.GameObject"></see> even if it can not receive the press event itself.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.pointerCurrentRaycast">
      <summary>
        <see cref="UnityEngine.EventSystems.RaycastResult">
        </see> associated with the current event.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.pointerDrag">
      <summary>The object that is receiving 'OnDrag'.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.pointerEnter">
      <summary>The object that received 'OnPointerEnter'.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.pointerId">
      <summary>Id of the pointer (touch id).</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.pointerPress">
      <summary>The <see cref="UnityEngine.GameObject"></see> that received the OnPointerDown.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.pointerPressRaycast">
      <summary>
        <see cref="UnityEngine.EventSystems.RaycastResult">
        </see> associated with the pointer press.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.position">
      <summary>Current pointer position.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.pressEventCamera">
      <summary>The camera associated with the last OnPointerPress event.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.pressPosition">
      <summary>Position of the press.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.rawPointerPress">
      <summary>The object that the press happened on even if it can not handle the press event.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.scrollDelta">
      <summary>The amount of scroll since the last update.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.PointerEventData.useDragThreshold">
      <summary>
        <para>Should a drag threshold be used?</para>
        <para>If you do not want a drag threshold set this to false in <see cref="UnityEngine.EventSystems.IInitializePotentialDragHandler.OnInitializePotentialDrag"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.EventSystems.PointerEventData.IsPointerMoving">
      <summary>Is the pointer moving.</summary>
      <returns>Moving.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.PointerEventData.IsScrolling">
      <summary>Is scroll being used on the input device.</summary>
      <returns>Scrolling.</returns>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerEventData.FramePressState.Pressed">
      <summary>Button was pressed this frame.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerEventData.FramePressState.Released">
      <summary>Button was released this frame.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerEventData.FramePressState.PressedAndReleased">
      <summary>Button was pressed and released this frame.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerEventData.FramePressState.NotChanged">
      <summary>Same as last frame.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerEventData.InputButton.Left">
      <summary>Left button.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerEventData.InputButton.Right">
      <summary>Right button.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerEventData.InputButton.Middle">
      <summary>Middle button.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.IDeselectHandler.OnDeselect(UnityEngine.EventSystems.BaseEventData)">
      <summary>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when a new object is being selected.</summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.IDragHandler.OnDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>When draging is occuring this will be called every time the cursor is moved.</summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="P:UnityEngine.EventSystems.StandaloneInputModule.cancelButton">
      <summary>Input manager name for the 'cancel' button.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.StandaloneInputModule.forceModuleActive">
      <summary>
        <para>Force this module to be active.</para>
        <para>If there is no module active with higher priority (ordered in the inspector) this module will be forced active even if valid enabling conditions are not met.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EventSystems.StandaloneInputModule.horizontalAxis">
      <summary>Input manager name for the horizontal axis button.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.StandaloneInputModule.inputActionsPerSecond">
      <summary>Number of keyboard / controller inputs allowed per second.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.StandaloneInputModule.repeatDelay">
      <summary>
        <para>Delay in seconds before the input actions per second repeat rate takes effect.</para>
        <para>If the same direction is sustained, the <see cref="UnityEngine.EventSystems.StandaloneInputModule.inputActionsPerSecond"></see> property can be used to control the rate at which events are fired. However, it can be desirable that the first repetition is delayed, so the user doesn't get repeated actions by accident.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EventSystems.StandaloneInputModule.submitButton">
      <summary>Maximum number of input events handled per second.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.StandaloneInputModule.verticalAxis">
      <summary>Input manager name for the vertical axis.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.StandaloneInputModule.ActivateModule">
      <summary>See <see cref="UnityEngine.EventSystems.BaseInputModule"></see>.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.StandaloneInputModule.DeactivateModule">
      <summary>See <see cref="UnityEngine.EventSystems.BaseInputModule"></see>.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.StandaloneInputModule.IsModuleSupported">
      <summary>See <see cref="UnityEngine.EventSystems.BaseInputModule"></see>.</summary>
      <returns>Supported.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.StandaloneInputModule.Process">
      <summary>See <see cref="UnityEngine.EventSystems.BaseInputModule"></see>.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.StandaloneInputModule.ShouldActivateModule">
      <summary>See <see cref="UnityEngine.EventSystems.BaseInputModule"></see>.</summary>
      <returns>Should activate.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.StandaloneInputModule.UpdateModule">
      <summary>See <see cref="UnityEngine.EventSystems.BaseInputModule"></see>.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.IBeginDragHandler.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Called by a <see cref="UnityEngine.EventSystems.BaseInputModule"></see> before a drag is started.</summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.ICancelHandler.OnCancel(UnityEngine.EventSystems.BaseEventData)">
      <summary>Called by a <see cref="UnityEngine.EventSystems.BaseInputModule"></see> when a Cancel event occurs.</summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.ReleasedThisFrame">
      <summary>Was the button released this frame?</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.RaycastResult.depth">
      <summary>
        <para>The relative depth of the element.</para>
        <para>Used by raycasters where elements may have the same unit distance, but have specific ordering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventSystems.RaycastResult.distance">
      <summary>Distance to the hit.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.RaycastResult.gameObject">
      <summary>The <see cref="UnityEngine.GameObject"></see> that was hit by the raycast.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.RaycastResult.index">
      <summary>Hit index.</summary>
    </member>
    <member name="P:UnityEngine.EventSystems.RaycastResult.isValid">
      <summary>Is there an associated module and a hit <see cref="UnityEngine.GameObject"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.RaycastResult.module">
      <summary>
        <see cref="UnityEngine.EventSystems.BaseInputModule">
        </see> that raised the hit.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.RaycastResult.screenPosition">
      <summary>The screen position from which the raycast was generated.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.RaycastResult.sortingLayer">
      <summary>
        <para>The SortingLayer of the hit object.</para>
        <para>For <see cref="UnityEngine.UI.Graphic"></see> elements this will be the values from that graphic's <see cref="UnityEngine.Canvas"></see> For 3D objects this will always be 0. For 2D objects if a <see cref="UnityEngine.SpriteRenderer"></see> is attached to the same object as the hit collider that <see cref="UnityEngine.SpriteRenderer"></see> sortingLayerID will be used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventSystems.RaycastResult.sortingOrder">
      <summary>
        <para>The SortingOrder for the hit object.</para>
        <para>For Graphic elements this will be the values from that graphics <see cref="UnityEngine.Canvas"></see> For 3D objects this will always be 0. For 2D objects if a <see cref="UnityEngine.SpriteRenderer"></see> is attached to the same object as the hit collider that <see cref="UnityEngine.SpriteRenderer"></see> sortingOrder will be used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventSystems.RaycastResult.worldNormal">
      <summary>The normal at the hit location of the raycast.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.RaycastResult.worldPosition">
      <summary>The world position of the where the raycast has hit.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.RaycastResult.Clear">
      <summary>Reset the result.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.TouchInputModule.DeactivateModule">
      <summary>Called when the module is deactivated. Override this if you want custom code to execute when you deactivate your module.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.TouchInputModule.IsModuleSupported">
      <summary>Check to see if the module is supported. Override this if you have a platfrom specific module (eg. TouchInputModule that you do not want to activate on standalone.</summary>
      <returns>Is the module supported.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.TouchInputModule.Process">
      <summary>
        <para>Process the current tick for the module.</para>
        <para>Executed once per Update call. Override for custom processing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.EventSystems.TouchInputModule.ShouldActivateModule">
      <summary>
        <para>Should be activated.</para>
        <para>Override to add custom logic.</para>
      </summary>
      <returns>Should the module be activated.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.TouchInputModule.UpdateModule">
      <summary>
        <para>Update the internal state of the Module.</para>
        <para>Called on all modules before process is sent to the one activated module.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.EventSystems.TouchInputModule.ToString">
      <summary>Returns the name of the game object.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.UIBehaviour.IsActive">
      <summary>Returns true if the <see cref="UnityEngine.GameObject"></see> and the <see cref="UnityEngine.Component"></see> are active.</summary>
      <returns>Active.</returns>
    </member>
    <member name="M:UnityEngine.EventSystems.UIBehaviour.IsDestroyed">
      <summary>Returns true if the native representation of the behaviour has been destroyed.</summary>
      <returns>True if Destroyed.</returns>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.buttonData">
      <summary>Pointer data associated with the mouse event.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.buttonState">
      <summary>The state of the button this frame.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.PressedThisFrame">
      <summary>Was the button pressed this frame?</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerEnter">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IPointerEnterHandler.OnPointerEnter"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerExit">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IPointerExitHandler.OnPointerExit"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerDown">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerUp">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerClick">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IPointerClickHandler.OnPointerClick"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.Drag">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IDragHandler.OnDrag"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.Drop">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IDropHandler.OnDrop"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.Scroll">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IScrollHandler.OnScroll"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.UpdateSelected">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IUpdateSelectedHandler.OnUpdateSelected"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.Select">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.ISelectHandler.OnSelect"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.Deselect">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IDeselectHandler.OnDeselect"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.Move">
      <summary>Intercepts a <see cref="UnityEngine.EventSystems.IMoveHandler.OnMove"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.InitializePotentialDrag">
      <summary>Intercepts IInitializePotentialDrag.InitializePotentialDrag.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.BeginDrag">
      <summary>Intercepts <see cref="UnityEngine.EventSystems.IBeginDragHandler.OnBeginDrag"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.EndDrag">
      <summary>Intercepts <see cref="UnityEngine.EventSystems.IEndDragHandler.OnEndDrag"></see>.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.Submit">
      <summary>Intercepts ISubmitHandler.Submit.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventTriggerType.Cancel">
      <summary>Intercepts <see cref="UnityEngine.EventSystems.ICancelHandler.OnCancel"></see>.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.IUpdateSelectedHandler.OnUpdateSelected(UnityEngine.EventSystems.BaseEventData)">
      <summary>Called by the <see cref="UnityEngine.EventSystems.EventSystem"></see> when the object associated with this EventTrigger is updated.</summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="F:UnityEngine.EventSystems.EventHandle.Unused">
      <summary>Unused.</summary>
    </member>
    <member name="F:UnityEngine.EventSystems.EventHandle.Used">
      <summary>Used.</summary>
    </member>
    <member name="M:UnityEngine.EventSystems.IMoveHandler.OnMove(UnityEngine.EventSystems.AxisEventData)">
      <summary>Called by a <see cref="UnityEngine.EventSystems.BaseInputModule"></see> when a move event occurs.</summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.IPointerClickHandler.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
      <summary>
        <para>Use this callback to detect clicks.</para>
        <para>Make sure you have an Event System in your Scene.</para>
      </summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="F:UnityEngine.EventSystems.MoveDirection.Left">
      <summary>
        <para>This is the Left state of <see cref="UnityEngine.EventSystems.MoveDirection"></see>. Assign functionality for moving to the left.</para>
        <para>Use the Left state for an easily identifiable way of moving a GameObject to the left (-1 , 0 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventSystems.MoveDirection.Up">
      <summary>
        <para>This is the Up state of <see cref="UnityEngine.EventSystems.MoveDirection"></see>. Assign functionality for moving in an upward direction.</para>
        <para>Use the Up state for an easily identifiable way of moving a GameObject upwards (0 , 1 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventSystems.MoveDirection.Right">
      <summary>
        <para>This is the Right state of <see cref="UnityEngine.EventSystems.MoveDirection"></see>. Assign functionality for moving to the right.</para>
        <para>Use the Right state for an easily identifiable way of moving a GameObject to the right (1 , 0 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventSystems.MoveDirection.Down">
      <summary>
        <para>The Down State of <see cref="UnityEngine.EventSystems.MoveDirection"></see>. Assign functionality for moving in a downward direction.</para>
        <para>Use the Down state for an easily identifiable way of moving a GameObject downwards (0 , -1 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventSystems.MoveDirection.None">
      <summary>
        <para>This is the None state. Assign functionality that stops movement.</para>
        <para>Use the None state for an easily identifiable way of stopping, resetting or initialising a GameObject's movement. This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.EventSystems.IDropHandler.OnDrop(UnityEngine.EventSystems.PointerEventData)">
      <summary>Called by a <see cref="UnityEngine.EventSystems.BaseInputModule"></see> on a target that can accept a drop.</summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.IEndDragHandler.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Called by a <see cref="UnityEngine.EventSystems.BaseInputModule"></see> when a drag is ended.</summary>
      <param name="eventData">Current event data.</param>
    </member>
    <member name="M:UnityEngine.EventSystems.IInitializePotentialDragHandler.OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
      <summary>Called by a <see cref="UnityEngine.EventSystems.BaseInputModule"></see> when a drag has been found but before it is valid to begin the drag.</summary>
    </member>
  </members>
</doc>