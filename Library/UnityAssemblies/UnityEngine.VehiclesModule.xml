<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.VehiclesModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.WheelCollider">
      <summary>
        <para>A special collider for vehicle wheels.</para>
        <para>Wheel collider is used to model vehicle wheels. It simulates a spring and damper suspension setup, and uses a slip based tire friction model to calculate wheel contact forces. Wheel's collision detection is performed by casting a ray from <see cref="UnityEngine.WheelCollider.center"></see> downwards the local y-axis. The wheel has a <see cref="UnityEngine.WheelCollider.radius"></see> and can extend downwards by <see cref="UnityEngine.WheelCollider.suspensionDistance"></see> amount. The wheel is controlled with <see cref="UnityEngine.WheelCollider.motorTorque"></see>, <see cref="UnityEngine.WheelCollider.brakeTorque"></see> and <see cref="UnityEngine.WheelCollider.steerAngle"></see> properties. Wheel collider computes friction separately from the rest of physics engine, using a slip based friction model. This allows for more realistic behaviour, but makes wheel colliders ignore standard <see cref="UnityEngine.PhysicMaterial"></see> settings. Simulation of different road materials is done by changing the <see cref="UnityEngine.WheelCollider.forwardFriction"></see> and <see cref="UnityEngine.WheelCollider.sidewaysFriction"></see> based on what material the wheel is hitting.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WheelHit">
      <summary>
        <para>Contact information for the wheel, reported by <see cref="UnityEngine.WheelCollider"></see>.</para>
        <para>Friction for the <see cref="UnityEngine.WheelCollider"></see> is computed separately from the rest of the physics, using a slip based tire friction model. This allows for more realistic behaviour, but makes wheel colliders ignore standard <see cref="UnityEngine.PhysicMaterial"></see> settings. The way to simulate different ground materials is to query <see cref="UnityEngine.WheelCollider"></see> for its collision information (see <see cref="UnityEngine.WheelCollider.GetGroundHit"></see>). Usually, you get the other collider the wheel is hitting, and modify the wheel's <see cref="UnityEngine.WheelCollider.forwardFriction"></see> and <see cref="UnityEngine.WheelCollider.sidewaysFriction"></see> based on the physic material of the ground. The other members of the WheelHit structure are usually queried for information purposes or special effects. For example, a "slipping tire" sound can be played if <see cref="UnityEngine.WheelHit.forwardSlip"></see> or <see cref="UnityEngine.WheelHit.sidewaysSlip"></see> exceed some threshold.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelHit.collider">
      <summary>The other <see cref="UnityEngine.Collider"></see> the wheel is hitting.</summary>
    </member>
    <member name="P:UnityEngine.WheelHit.force">
      <summary>The magnitude of the force being applied for the contact.</summary>
    </member>
    <member name="P:UnityEngine.WheelHit.forwardDir">
      <summary>The direction the wheel is pointing in.</summary>
    </member>
    <member name="P:UnityEngine.WheelHit.forwardSlip">
      <summary>Tire slip in the rolling direction. Acceleration slip is negative, braking slip is positive.</summary>
    </member>
    <member name="P:UnityEngine.WheelHit.normal">
      <summary>The normal at the point of contact.</summary>
    </member>
    <member name="P:UnityEngine.WheelHit.point">
      <summary>The point of contact between the wheel and the ground.</summary>
    </member>
    <member name="P:UnityEngine.WheelHit.sidewaysDir">
      <summary>The sideways direction of the wheel.</summary>
    </member>
    <member name="P:UnityEngine.WheelHit.sidewaysSlip">
      <summary>Tire slip in the sideways direction.</summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.brakeTorque">
      <summary>
        <para>Brake torque expressed in Newton metres.</para>
        <para>Must be positive.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.center">
      <summary>
        <para>The center of the wheel, measured in the object's local space.</para>
        <para>The center of the wheel describes the coordinate that the wheel would achieve if the car was suspended in mid-air. This is equivalent to the coordinate of the wheel center when the spring is at maximum elongation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.forceAppPointDistance">
      <summary>
        <para>Application point of the suspension and tire forces measured from the base of the resting wheel.</para>
        <para>This is specified as a distance along the local up vector of the vehicle's rigid body from the base of the wheel at its rest coordinate (the rest coordinate of the wheel is determined by the value WheelCollider.spring.targetPosition). This parameter simulates the effective roll center of the suspension geometry. For a standard family car the value of forceAppPointDistance should be tuned to place the application point approximately 0.3m below the rigid body center of mass. Moving the application point downwards introduces more roll when cornering, while moving it upwards results in less roll when cornering. The force application point is typically below the rigid body center of mass. Please note that having this parameter equal to zero could be undesirable as it contributes to simulation instability in certain configurations. Once you observe your vehicle failing to go asleep resting on flat surface, exhibiting jittering behavior or drifting along the surface when no user input is applied, check the forceAppPointDistance values. In the editor, when a WheelCollider game object is selected, there is a green spherical gizmo displayed to show where the force application point is at the moment. Try increasing forceAppPointDistance value gradually, until you're satisfied with the result.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.forwardFriction">
      <summary>Properties of tire friction in the direction the wheel is pointing in.</summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.isGrounded">
      <summary>Indicates whether the wheel currently collides with something (Read Only).</summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.mass">
      <summary>The mass of the wheel, expressed in kilograms. Must be larger than zero. Typical values would be in range (20,80).</summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.motorTorque">
      <summary>
        <para>Motor torque on the wheel axle expressed in Newton metres. Positive or negative depending on direction.</para>
        <para>To simulate brakes, do not use negative motor torque - use <see cref="UnityEngine.WheelCollider.brakeTorque"></see> instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.radius">
      <summary>
        <para>The radius of the wheel, measured in local space.</para>
        <para>The radius will be scaled by the transform's scale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.rpm">
      <summary>Current wheel axle rotation speed, in rotations per minute (Read Only).</summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.sidewaysFriction">
      <summary>Properties of tire friction in the sideways direction.</summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.sprungMass">
      <summary>
        <para>The mass supported by this WheelCollider.</para>
        <para>Vehicle simulation uses the sprung mass model where it would decompose the full mass of the car supported by all wheels at once into a set of sprung masses supported by each individual wheel. Then it would work out all the suspension and tire forces for each wheel-mass pair and, as the last step, it would integrate all forces applied to the vehicle's body. In the simplest case of a perfectly symmetric car with four wheels, all sprung masses would be equal to a quarter of the car's mass. This property is automatically computed based on the car's configuration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.steerAngle">
      <summary>
        <para>Steering angle in degrees, always around the local y-axis.</para>
        <para>At high velocities use only small steer angles; a few degrees should suffice.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.suspensionDistance">
      <summary>
        <para>Maximum extension distance of wheel suspension, measured in local space.</para>
        <para>Suspension always extends downwards the local y-axis. Suspension travel will be scaled by the transform's scale. The value <c>suspensionDistance</c> is the distance that the wheel travels as it moves along the local up vector of the rigid body from the coordinate of the wheel center at maximum spring elongation to the coordinateof the wheel center at maximum spring compression. It is expressed in metres. The range of suspension travel will be scaled by the transform's scale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.suspensionSpring">
      <summary>
        <para>The parameters of wheel's suspension. The suspension attempts to reach a target position by applying a linear force and a damping force.</para>
        <para>The value <see cref="UnityEngine.JointSpring.spring"></see> describes the stiffness of the spring. It is expressed in Newtons per metre. The spring strength has a profound influence on handling by modulating the time it takes for the vehicle to respond to bumps in the road and on the amount of load experienced by the tire. Larger values make the suspension reach the target position faster but at the cost of increased load and handling variability. Smaller values provide a smoother but less responsive ride. The value <see cref="UnityEngine.JointSpring.spring"></see> describes the rate at which the spring dissipates the energy stored in the spring. It is expressed in Newtons seconds per metre (equivalent to Newtons per unit speed). Larger values make the suspension reach the target position slower, while lower values make the car appear more bouncy. Vehicle suspensions typically have a response close to critical damping. The rest coordinate of the wheel is specified by <see cref="UnityEngine.JointSpring.targetPosition"></see>. This value describes the rest coordinate of the wheel as a fraction in range (0, 1) along the <c>suspensionDistance</c>. Zero value maps to full extension along the suspension travel, while a value of one maps to fully compressed suspension. Default value is 0.5, which sets the rest coordinate of the wheel to the mid-point between the suspension at maximum elongation and maximum compression. Typical values would be in range (0.3, 0.7).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.wheelDampingRate">
      <summary>The damping rate of the wheel. Must be larger than zero.</summary>
    </member>
    <member name="M:UnityEngine.WheelCollider.ConfigureVehicleSubsteps(System.Single,System.Int32,System.Int32)">
      <summary>
        <para>Configure vehicle sub-stepping parameters.</para>
        <para>Every time a fixed update happens, the vehicle simulation splits this fixed delta time into smaller sub-steps and calculates suspension and tire forces per each smaller delta. Then, it would sum up all resulting forces and torques, integrate them, and apply to the vehicle's body. Using this function you can customize how many sub-steps will be performed by the simulation above and below the speed threshold. It's enough to call this function only once per each vehicle, as it actually sets parameters to the vehicle but not to a wheel.</para>
      </summary>
      <param name="speedThreshold">The speed threshold of the sub-stepping algorithm.</param>
      <param name="stepsBelowThreshold">Amount of simulation sub-steps when vehicle's speed is below speedThreshold.</param>
      <param name="stepsAboveThreshold">Amount of simulation sub-steps when vehicle's speed is above speedThreshold.</param>
    </member>
    <member name="M:UnityEngine.WheelCollider.GetGroundHit(UnityEngine.WheelHit@)">
      <summary>
        <para>Gets ground collision data for the wheel.</para>
        <para>If the wheel collides with something, returns <c>true</c> and fills the <c>hit</c> structure. If the wheel is not colliding, returns <c>false</c> and leaves <c>hit</c> structure unchanged. The reported hit is always the closest one. Because the tire friction model does not automatically respond to other <see cref="UnityEngine.PhysicMaterial"></see>s, any simulation of different ground materials must be done manually by adjusting <see cref="UnityEngine.WheelCollider.forwardFriction"></see> and <see cref="UnityEngine.WheelCollider.sidewaysFriction"></see> based on collider's material returned here.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WheelCollider.GetWorldPose(UnityEngine.Vector3@,UnityEngine.Quaternion@)">
      <summary>Gets the world space pose of the wheel accounting for ground contact, suspension limits, steer angle, and rotation angle (angles in degrees).</summary>
      <param name="pos">Position of the wheel in world space.</param>
      <param name="quat">Rotation of the wheel in world space.</param>
    </member>
  </members>
</doc>