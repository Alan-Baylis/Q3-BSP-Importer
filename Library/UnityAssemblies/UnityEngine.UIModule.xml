<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.UIModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.ICanvasRaycastFilter">
      <summary>This element can filter raycasts. If the top level element is hit it can further 'check' if the location is valid.</summary>
    </member>
    <member name="T:UnityEngine.AdditionalCanvasShaderChannels">
      <summary>Enum mask of possible shader channel properties that can also be included when the <see cref="UnityEngine.Canvas"></see> mesh is created.</summary>
    </member>
    <member name="T:UnityEngine.RenderMode">
      <summary>RenderMode for the Canvas.</summary>
    </member>
    <member name="T:UnityEngine.RectTransformUtility">
      <summary>Utility class containing helper methods for working with <see cref="UnityEngine.RectTransform"></see>.</summary>
    </member>
    <member name="T:UnityEngine.Canvas">
      <summary>
        <para>Element that can be used for screen rendering.</para>
        <para>Elements on a canvas are rendered AFTER scene rendering, either from an attached camera or using overlay mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CanvasGroup">
      <summary>
        <para>A <see cref="UnityEngine.Canvas"></see> placable element that can be used to modify children Alpha, Raycasting, Enabled state.</para>
        <para>A canvas group can be used to modify the state of children elements. An example of this would be a window which fades in over time, by modifying the alpha value of the group the children elements well be affected. The result alpha will be the multiplied result of any nested groups, multiplied with the canvas elements alpha. Canvas Groups can also be configured to not block raycasts (anything on the group will not be considerered for graphic raycasting), and whether elements are interactable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CanvasRenderer">
      <summary>A component that will render to the screen after all normal rendering has completed when attached to a <see cref="UnityEngine.Canvas"></see>. Designed for GUI application.</summary>
    </member>
    <member name="F:UnityEngine.AdditionalCanvasShaderChannels.None">
      <summary>No additional shader parameters are needed.</summary>
    </member>
    <member name="F:UnityEngine.AdditionalCanvasShaderChannels.TexCoord1">
      <summary>Include UV1 on the mesh vertices.</summary>
    </member>
    <member name="F:UnityEngine.AdditionalCanvasShaderChannels.TexCoord2">
      <summary>Include UV2 on the mesh vertices.</summary>
    </member>
    <member name="F:UnityEngine.AdditionalCanvasShaderChannels.TexCoord3">
      <summary>Include UV3 on the mesh vertices.</summary>
    </member>
    <member name="F:UnityEngine.AdditionalCanvasShaderChannels.Normal">
      <summary>
        <para>Include the normals on the mesh vertices.</para>
        <para>This channel isn't likely needed unless you are expecting lighting to be applied to the <see cref="UnityEngine.Canvas"></see>. Reminder that a Overlay <see cref="UnityEngine.Canvas"></see> can not have lighting applied.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AdditionalCanvasShaderChannels.Tangent">
      <summary>
        <para>Include the Tangent on the mesh vertices.</para>
        <para>This channel isn't likely needed unless you are expecting lighting to be applied to the <see cref="UnityEngine.Canvas"></see>. Reminder that a Overlay <see cref="UnityEngine.Canvas"></see> can not have lighting applied.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ICanvasRaycastFilter.IsRaycastLocationValid(UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>Given a point and a camera is the raycast valid.</summary>
      <param name="sp">Screen position.</param>
      <param name="eventCamera">Raycast camera.</param>
      <returns>Valid.</returns>
    </member>
    <member name="F:UnityEngine.RenderMode.ScreenSpaceOverlay">
      <summary>Render at the end of the scene using a 2D Canvas.</summary>
    </member>
    <member name="F:UnityEngine.RenderMode.ScreenSpaceCamera">
      <summary>Render using the <see cref="UnityEngine.Camera"></see> configured on the Canvas.</summary>
    </member>
    <member name="F:UnityEngine.RenderMode.WorldSpace">
      <summary>Render using any <see cref="UnityEngine.Camera"></see> in the scene that can render the layer.</summary>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.FlipLayoutAxes(UnityEngine.RectTransform,System.Boolean,System.Boolean)">
      <summary>
        <para>Flips the horizontal and vertical axes of the RectTransform size and alignment, and optionally its children as well.</para>
        <para>This swaps the horizontal and vertical axis in the size and alignment of the RectTransform. This can also be thought of as a diagonal flip. Any actual content such as images or text will not be flipped or rotated but may be resized and aligned differently. An example usage is to instantiate a control designed for alignment along one axis (like a horizontal slider) and flip the axes so the layout becomes suitable for use along the other axis (like a vertical slider). When used with the recursive argument set to true, the children are always flipped with the keepPositioning option set to false so that they properly follow the flip of the parent.</para>
      </summary>
      <param name="rect">The RectTransform to flip.</param>
      <param name="keepPositioning">Flips around the pivot if true. Flips within the parent rect if false.</param>
      <param name="recursive">Flip the children as well?</param>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.FlipLayoutOnAxis(UnityEngine.RectTransform,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Flips the alignment of the RectTransform along the horizontal or vertical axis, and optionally its children as well.</para>
        <para>This flips the alignment of the RectTransform. Any actual content such as images or text will not be flipped but may aligned differently. An example usage is to instantiate a control designed in a left to right manner (like a horizontal slider where 0 is to the left) and flip it horizontally so the layout becomes suitable for use in the opposite direction (like a horizontal slider where 0 is to the right). When used with the recursive argument set to true, the children are always flipped with the keepPositioning option set to false so that they properly follow the flip of the parent.</para>
      </summary>
      <param name="rect">The RectTransform to flip.</param>
      <param name="axis">The axis to flip along. 0 is horizontal and 1 is vertical.</param>
      <param name="keepPositioning">Flips around the pivot if true. Flips within the parent rect if false.</param>
      <param name="recursive">Flip the children as well?</param>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.PixelAdjustPoint(UnityEngine.Vector2,UnityEngine.Transform,UnityEngine.Canvas)">
      <summary>Convert a given point in screen space into a pixel correct point.</summary>
      <returns>Pixel adjusted point.</returns>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.PixelAdjustRect(UnityEngine.RectTransform,UnityEngine.Canvas)">
      <summary>Given a rect transform, return the corner points in pixel accurate coordinates.</summary>
      <returns>Pixel adjusted rect.</returns>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.RectangleContainsScreenPoint(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>Does the RectTransform contain the screen point as seen from the given camera?</summary>
      <param name="rect">The RectTransform to test with.</param>
      <param name="screenPoint">The screen point to test.</param>
      <param name="cam">The camera from which the test is performed from. (Optional)</param>
      <returns>True if the point is inside the rectangle.</returns>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.ScreenPointToLocalPointInRectangle(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Camera,UnityEngine.Vector2@)">
      <summary>
        <para>Transform a screen space point to a position in the local space of a RectTransform that is on the plane of its rectangle.</para>
        <para>The cam parameter should be the camera associated with the screen point. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be null. When ScreenPointToLocalPointInRectangle is used from within an event handler that provides a PointerEventData object, the correct camera can be obtained by using PointerEventData.enterEventData (for hover functionality) or <see cref="UnityEngine.EventSystems.PointerEventData.pressEventCamera"></see> (for click functionality). This will automatically use the correct camera (or null) for the given event.</para>
      </summary>
      <param name="rect">The RectTransform to find a point inside.</param>
      <param name="screenPoint">Screen space position.</param>
      <param name="cam">The camera associated with the screen space position.</param>
      <param name="localPoint">Point in local space of the rect transform.</param>
      <returns>Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.</returns>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.ScreenPointToWorldPointInRectangle(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Camera,UnityEngine.Vector3@)">
      <summary>
        <para>Transform a screen space point to a position in world space that is on the plane of the given RectTransform.</para>
        <para>The cam parameter should be the camera associated with the screen point. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be null. When ScreenPointToWorldPointInRectangle is used from within an event handler that provides a PointerEventData object, the correct camera can be obtained by using PointerEventData.enterEventData (for hover functionality) or <see cref="UnityEngine.EventSystems.PointerEventData.pressEventCamera"></see> (for click functionality). This will automatically use the correct camera (or null) for the given event.</para>
      </summary>
      <param name="rect">The RectTransform to find a point inside.</param>
      <param name="screenPoint">Screen space position.</param>
      <param name="cam">The camera associated with the screen space position.</param>
      <param name="worldPoint">Point in world space.</param>
      <returns>Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.</returns>
    </member>
    <member name="P:UnityEngine.CanvasGroup.alpha">
      <summary>Set the alpha of the group.</summary>
    </member>
    <member name="P:UnityEngine.CanvasGroup.blocksRaycasts">
      <summary>Does this group block raycasting (allow collision).</summary>
    </member>
    <member name="P:UnityEngine.Canvas.sortingLayerID">
      <summary>
        <para>Unique ID of the Canvas' sorting layer.</para>
        <para>See <see cref="UnityEngine.Renderer"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.sortingLayerName">
      <summary>
        <para>Name of the Canvas' sorting layer.</para>
        <para>See <see cref="UnityEngine.Renderer"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.sortingOrder">
      <summary>
        <para>Canvas' order within a sorting layer.</para>
        <para>See <see cref="UnityEngine.Renderer"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.targetDisplay">
      <summary>
        <para>For Overlay mode, display index on which the UI canvas will appear.</para>
        <para>This setting makes a Canvas render into the specified display. Maximum number of secondary displays (eg. monitors) supported is 8.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.worldCamera">
      <summary>
        <see cref="UnityEngine.Camera">
        </see> used for sizing the <see cref="UnityEngine.Canvas"></see> when in Screen Space - Camera. Also used as the <see cref="UnityEngine.Camera"></see> that events will be sent through for a World Space [[Canvas].</summary>
    </member>
    <member name="M:UnityEngine.Canvas.ForceUpdateCanvases">
      <summary>
        <para>Force all canvases to update their content.</para>
        <para>A canvas performs its layout and content generation calculations at the end of a frame, just before rendering, in order to ensure that it's based on all the latest changes that may have happened during that frame. This means that in the Start callback and the first Update callback, the layout and content under the canvas may not be up-to-date. Code that relies on up-to-date layout or content can call this method to ensure it before executing code that relies on it.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Canvas.GetDefaultCanvasMaterial">
      <summary>Returns the default material that can be used for rendering normal elements on the Canvas.</summary>
    </member>
    <member name="M:UnityEngine.Canvas.GetETC1SupportedCanvasMaterial">
      <summary>
        <para>Gets or generates the ETC1 Material.</para>
        <para>Uses the UI/DefaultETC1 Shader which must be specified in the <c>Always Included</c> Shader list.</para>
      </summary>
      <returns>The generated ETC1 Material from the Canvas.</returns>
    </member>
    <member name="P:UnityEngine.Canvas.additionalShaderChannels">
      <summary>
        <para>Get or set the mask of additional shader channels to be used when creating the <see cref="UnityEngine.Canvas"></see> mesh.</para>
        <para>The <see cref="UnityEngine.Canvas"></see> will always include Position, Color, and Uv0 shader channels when generating the mesh for a overlay <see cref="UnityEngine.Canvas"></see> and will also include Normal and Tangent for ScreenSpace.Camera and World space <see cref="UnityEngine.Canvas"></see>. These are the optional additional parameters to be copied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.cachedSortingLayerValue">
      <summary>Cached calculated value based upon SortingLayerID.</summary>
    </member>
    <member name="P:UnityEngine.Canvas.isRootCanvas">
      <summary>Is this the root <see cref="UnityEngine.Canvas"></see>?</summary>
    </member>
    <member name="P:UnityEngine.Canvas.normalizedSortingGridSize">
      <summary>
        <para>The normalized grid size that the canvas will split the renderable area into.</para>
        <para>During rendering, the canvas splits the renderable area (bounds of all UI elements) into a grid. This is the normalized size of that grid. For example if you have a renderable area of 100 units with a sortingGridNormalizedSize of 0.1f then each grid cell would be 10 units. Note: a value of 0 will default to 0.1f.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.overridePixelPerfect">
      <summary>Allows for nested canvases to override pixelPerfect settings inherited from parent canvases.</summary>
    </member>
    <member name="P:UnityEngine.Canvas.overrideSorting">
      <summary>
        <para>Override the sorting of canvas.</para>
        <para>Allows for nested canvas's to ignore the parent draw order and draw ontop or below.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.pixelPerfect">
      <summary>
        <para>Force elements in the canvas to be aligned with pixels. Only applies with renderMode is Screen Space.</para>
        <para>Enabling pixelPerfect can make elements appear sharper and prevent blurriness. However, if many elements are scaled or rotated, or use subtle animated position or scaling, it may be advantageous to disable pixelPerfect, since the movement will be smoother without.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.pixelRect">
      <summary>
        <para>Get the render rect for the <see cref="UnityEngine.Canvas"></see>.</para>
        <para>If in overlay mode this will be the screen dimensions. If in world mode this will be the camera screen viewport rect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.planeDistance">
      <summary>How far away from the camera is the Canvas generated.</summary>
    </member>
    <member name="P:UnityEngine.Canvas.referencePixelsPerUnit">
      <summary>
        <para>The number of pixels per unit that is considered the default.</para>
        <para>Sprites have a Pixels Per Unit that control the pixel density of the sprite. For sprites that have the same Pixels Per Unit as the Reference Pixels Per Unit in the Canvas, the pixel density will be one to one.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.renderMode">
      <summary>Is the <see cref="UnityEngine.Canvas"></see> in World or Overlay mode?</summary>
    </member>
    <member name="P:UnityEngine.Canvas.renderOrder">
      <summary>
        <para>The render order in which the canvas is being emitted to the scene.</para>
        <para>Note: Currently only Screen Space - Overlay canvas's are ordered correctly as Screen Space - Camera and World Space are emitted and sorted based upon distance from the camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.rootCanvas">
      <summary>Returns the <see cref="UnityEngine.Canvas"></see> closest to root, by checking through each parent and returning the last canvas found. If no other canvas is found then the canvas will return itself.</summary>
    </member>
    <member name="P:UnityEngine.Canvas.scaleFactor">
      <summary>Used to scale the entire canvas, while still making it fit the screen. Only applies with renderMode is Screen Space.</summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.absoluteDepth">
      <summary>Depth of the renderer relative to the root canvas.</summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.cull">
      <summary>Indicates whether geometry emitted by this renderer is ignored.</summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.hasMoved">
      <summary>True if any change has occured that would invalidate the positions of generated geometry.</summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.hasPopInstruction">
      <summary>
        <para>Enable 'render stack' pop draw call.</para>
        <para>When rendering using the hierarchy the renderer can insert a 'pop'. The pop instruction is executed after all children have been rendered. The canvas renderer is rerendered using the configured pop materials. See: <see cref="UnityEngine.CanvasRenderer.SetPopMaterial"></see><see cref="UnityEngine.CanvasRenderer.popMaterialCount"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.hasRectClipping">
      <summary>True if rect clipping has been enabled on this renderer.</summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.materialCount">
      <summary>The number of materials usable by this renderer.</summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.popMaterialCount">
      <summary>The number of materials usable by this renderer. Used internally for masking.</summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.relativeDepth">
      <summary>Depth of the renderer realative to the parent canvas.</summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.Clear">
      <summary>Remove all cached vertices.</summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.DisableRectClipping">
      <summary>Disables rectangle clipping for this CanvasRenderer.</summary>
      <seealso cref="M:UnityEngine.CanvasRenderer.EnableRectClipping(UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.EnableRectClipping(UnityEngine.Rect)">
      <summary>Enables rect clipping on the CanvasRendered. Geometry outside of the specified rect will be clipped (not rendered).</summary>
      <seealso cref="M:UnityEngine.CanvasRenderer.DisableRectClipping">
      </seealso>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.GetAlpha">
      <summary>Get the current alpha of the renderer.</summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.GetColor">
      <summary>Get the current color of the renderer.</summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.GetMaterial(System.Int32)">
      <summary>Gets the current <see cref="UnityEngine.Material"></see> assigned to the CanvasRenderer.</summary>
      <param name="index">The material index to retrieve (0 if this parameter is omitted).</param>
      <returns>Result.</returns>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.GetMaterial">
      <summary>Gets the current <see cref="UnityEngine.Material"></see> assigned to the CanvasRenderer.</summary>
      <returns>Result.</returns>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.GetPopMaterial(System.Int32)">
      <summary>Gets the current <see cref="UnityEngine.Material"></see> assigned to the CanvasRenderer. Used internally for masking.</summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetAlpha(System.Single)">
      <summary>Set the alpha of the renderer. Will be multiplied with the <see cref="UnityEngine.UIVertex"></see> alpha and the <see cref="UnityEngine.Canvas"></see> alpha.</summary>
      <param name="alpha">Alpha.</param>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetAlphaTexture(UnityEngine.Texture)">
      <summary>The Alpha Texture that will be passed to the Shader under the _AlphaTex property.</summary>
      <param name="texture">The Texture to be passed.</param>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetColor(UnityEngine.Color)">
      <summary>Set the color of the renderer. Will be multiplied with the <see cref="UnityEngine.UIVertex"></see> color and the <see cref="UnityEngine.Canvas"></see> color.</summary>
      <param name="color">Renderer multiply color.</param>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetMaterial(UnityEngine.Material,System.Int32)">
      <summary>Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.</summary>
      <param name="material">Material for rendering.</param>
      <param name="index">Material index.</param>
      <seealso cref="M:UnityEngine.CanvasRenderer.SetTexture(UnityEngine.Texture)">
      </seealso>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetMaterial(UnityEngine.Material,UnityEngine.Texture)">
      <summary>Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.</summary>
      <param name="material">Material for rendering.</param>
      <param name="texture">Material texture overide.</param>
      <seealso cref="M:UnityEngine.CanvasRenderer.SetTexture(UnityEngine.Texture)">
      </seealso>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetMesh(UnityEngine.Mesh)">
      <summary>Sets the Mesh used by this renderer.</summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetPopMaterial(UnityEngine.Material,System.Int32)">
      <summary>Set the material for the canvas renderer. Used internally for masking.</summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetTexture(UnityEngine.Texture)">
      <summary>Sets the texture used by this renderer's material.</summary>
    </member>
    <member name="P:UnityEngine.CanvasGroup.ignoreParentGroups">
      <summary>
        <para>Should the group ignore parent groups?</para>
        <para>If set to true the group will ignore any parent group settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CanvasGroup.interactable">
      <summary>Is the group interactable (are the elements beneath the group enabled).</summary>
    </member>
    <member name="M:UnityEngine.CanvasGroup.IsRaycastLocationValid(UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>Returns true if the Group allows raycasts.</summary>
    </member>
  </members>
</doc>