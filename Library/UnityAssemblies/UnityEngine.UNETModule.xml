<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.UNETModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.Networking.Types.NetworkAccessLevel">
      <summary>Describes the access levels granted to this client.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NetworkID">
      <summary>Network ID, used for match making.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NodeID">
      <summary>The NodeID is the ID used in Relay matches to track nodes in a network.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.SourceID">
      <summary>Identifies a specific game instance.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ChannelQOS">
      <summary>Defines parameters of channels.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ConnectionConfig">
      <summary>
        <para>This class defines parameters of connection between two peers, this definition includes various timeouts and sizes as well as channel configuration.</para>
        <para>The NetworkServer and NetworkClient classes can be configured with instances of this class. This causes the settings in the ConnectionConfig to be applied to the transport layer connection of the NetworkConnections owned by these objects. The NetworkManager has a ConnectionConfig object that is used to configure servers and clients that it creates. The default channel connection configuration used by the high level components of the networking system is: * channel 0 - Reliable Sequenced channel * channel 1 - Unreliable channel. Some of the attributes of this ConnectionConfig instance can be modified using the Inspector UI for the NetworkManager in the Editor. Important: Some parameters of ConnectionConfig should be exactly the same for connected peers. If they are different, a CRCMismatch error is received when trying to establish a connection. These parameters are: - PacketSize - FragmentSize - ResendTimeout - DisconnectTimeout - ConnectTimeout - PingTimeout - ReducedPingTimeout - AllCostTimeout - IsAckLong - UsePlatformSpecificProtocols.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ConnectionSimulatorConfig">
      <summary>Create configuration for network simulator; You can use this class in editor and developer build only.</summary>
    </member>
    <member name="T:UnityEngine.Networking.GlobalConfig">
      <summary>
        <para>Defines global paramters for network library.</para>
        <para>The NetworkManager has a GlobalConfig instance ( NetworkManager.globalConfig ) that is used to configure the network when started by the NetworkManager. Some of the attributes of this instance can be modified from the NetworkManager inspector UI in the editor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.HostTopology">
      <summary>
        <para>Class defines network topology for host (socket opened by <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see> function). This topology defines: (1) how many connection with default config will be supported and (2) what will be special connections (connections with config different from default).</para>
        <para>Example: p2p game with 10 people in the room and connection to chat server, in this case it will be 10 default connections and one special. The NetworkServer and NetworkClient classed can be configured with a HostTopology instance.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.MatchInfo">
      <summary>
        <para>Details about a UNET MatchMaker match.</para>
        <para>This is a data object that represents the data returned from <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch"></see> and <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.MatchInfoSnapshot">
      <summary>
        <para>A class describing the match information as a snapshot at the time the request was processed on the MatchMaker.</para>
        <para>The information in this class is part of the data list returned when listing open matches through MatchMaker. It describes the instantaneous state at the time the request was handled.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.MatchInfoSnapshot.MatchInfoDirectConnectSnapshot">
      <summary>
        <para>A class describing one member of a match and what direct connect information other clients have supplied.</para>
        <para>A "MatchInfoDirectConnectSnapshot" instance contains mostly optional data which a connection can supply when it creates or joins a match. That info is then returned in these results so that other clients can directly connect to that client instead of going through the internet via a relay server.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.NetworkMatch">
      <summary>
        <para>A component for communicating with the Unity Multiplayer Matchmaking service.</para>
        <para>This class aggregates all the supported JSON calls into functions that are callable for games that wish to interact with the MatchMaker service. The example code below shows how to use NetworkMatch API.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NetworkAccessToken">
      <summary>Access token used to authenticate a client session for the purposes of allowing or disallowing match operations requested by that client.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.AppID">
      <summary>The AppID identifies the application on the Unity Cloud or UNET servers.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.HostPriority">
      <summary>An Enum representing the priority of a client in a match, starting at 0 and increasing.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransport">
      <summary>Transport Layer API.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Utility">
      <summary>Networking Utility.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ConnectionAcksType">
      <summary>Defines size of the buffer holding reliable messages, before they will be acknowledged.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkError">
      <summary>Possible <see cref="UnityEngine.Networking.NetworkTransport"></see> errors.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkEventType">
      <summary>Event that is returned when calling the <see cref="UnityEngine.Networking.NetworkTransport.Receive"></see> and <see cref="UnityEngine.Networking.NetworkTransport.ReceiveFromHost"></see> functions.</summary>
    </member>
    <member name="T:UnityEngine.Networking.QosType">
      <summary>Enumeration of all supported quality of service channel modes.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ReactorModel">
      <summary>Define how unet will handle network io operation.</summary>
    </member>
    <member name="M:UnityEngine.Networking.HostTopology.GetSpecialConnectionConfig(System.Int32)">
      <summary>Return reference to special connection config. Parameters of this config can be changed.</summary>
      <param name="i">Config id.</param>
      <returns>Connection config.</returns>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.AckDelay">
      <summary>Defines the duration in milliseconds that the receiver waits for before it sends an acknowledgement back without waiting for any data payload. Default value = 33. Network clients that send data to a server may do so using many different quality of service (QOS) modes, some of which (reliable modes) expect the server to send back acknowledgement of receipt of data sent. Servers must periodically acknowledge data packets received over channels with reliable QOS modes by sending packets containing acknowledgement data (also known as "acks") back to the client. If the server were to send an acknowledgement immediately after receiving each packet from the client there would be significant overhead (the acknowledgement is a 32 or 64 bit integer, which is very small compared to the whole size of the packet which also contains the IP and the UDP header). AckDelay allows the server some time to accumulate a list of received reliable data packets to acknowledge, and decreases traffic overhead by combining many acknowledgements into a single packet.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.AcksType">
      <summary>Determines the size of the buffer used to store reliable messages that are waiting for acknowledgement. It can be set to Acks32, Acks64, Acks96, or Acks128. Depends of this setting buffer can hold 32, 64, 96, or 128 messages. Default value = Ack32. Messages sent on reliable quality of service channels are stored in a special buffer while they wait for acknowledgement from the peer. This buffer can be either 32, 64, 96 or 128 positions long. It is recommended to begin with this value set to Ack32, which defines a buffer up to 32 messages in size. If you receive NoResources errors often when you send reliable messages, change this value to the next possible size.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.AllCostTimeout">
      <summary>Defines the timeout in milliseconds after which messages sent via the AllCost channel will be re-sent without waiting for acknowledgement. Default value = 20 ms. AllCost delivery quality of service (QOS) is a special QOS for delivering game-critical information, such as when the game starts, or when bullets are shot. Due to packets dropping, sometimes reliable messages cannot be delivered and need to be re-sent. Reliable messages will re-sent after RTT+Delta time, (RTT is round trip time) where RTT is a dynamic value and can reach couple of hundred milliseconds. For the AllCost delivery channel this timeout can be user-defined to force game critical information to be re-sent.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.BandwidthPeakFactor">
      <summary>
        <para>Defines, when multiplied internally by <see cref="UnityEngine.Networking.ConnectionConfig.InitialBandwidth"></see>, the maximum bandwidth that can be used under burst conditions.</para>
        <para>If you do not send any data for some time, the bandwidth available to your app is the full bandwidth specified in <see cref="UnityEngine.Networking.ConnectionConfig.InitialBandwidth"></see>. However, it is possible to occupy more than this bandwidth for a short period of time, known as a burst. This property limits the bandwidth that can be used during such a burst. This parameter can be considered to be a smoothing factor for oscillating traffic; if traffic is irregular and the peak bandwidth is high, the network may see spikes of bandwidth use leading to packets being discarded by traffic shaping or management functions elsewhere in the network.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ChannelCount">
      <summary>(Read Only) The number of channels in the current configuration.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.Channels">
      <summary>The list of channels belonging to the current configuration. Note: any ConnectionConfig passed as a parameter to a function in Unity Multiplayer is deep copied (that is, an entirely new copy is made, with no references to the original).</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ConnectTimeout">
      <summary>Timeout in ms which library will wait before it will send another connection request.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.DisconnectTimeout">
      <summary>Defines the timeout in milliseconds before a connection is considered to have been disconnected. Default value = 2000. Unity Multiplayer defines conditions under which a connection is considered as disconnected. Disconnection can happen for the following reasons: (1) A disconnection request was received. (2) The connection has not received any traffic at all for a time longer than DisconnectTimeout (Note that live connections receive regular keep-alive packets, so in this case "no traffic" means not only no user traffic but also absence of any keep-alive traffic as well). (3) Flow control determines that the time between sending packets is longer than DisconnectTimeout. Keep-alive packets are regularly delivered from peers and contain statistical information. This information includes values of packet loss due to network and peer overflow conditions. Setting NetworkDropThreshold and OverflowDropThreshold defines thresholds for flow control which can decrease packet frequency. When the time before sending the next packet is longer than DisconnectTimeout, the connection will be considered as disconnected and a disconnect event is received.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.FragmentSize">
      <summary>Defines the fragment size for fragmented messages (for QOS: ReliableFragmented and UnreliableFragmented). Default value = 500. Under fragmented quality of service modes, the original message is split into fragments (up to 64) of up to FragmentSize bytes each. The fragment size depends on the frequency and size of reliable messages sent. Each reliable message potentially could be re-sent, so you need to choose a fragment size less than the remaining free space in a UDP packet after retransmitted reliable messages are added to the packet. For example, if <see cref="UnityEngine.Networking.ConnectionConfig.PacketSize"></see> is 1440 bytes, and a reliable message's average size is 200 bytes, it would be wise to set this parameter to 900 – 1000 bytes.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.InitialBandwidth">
      <summary>
        <para>Gets or sets the bandwidth in bytes per second that can be used by Unity Multiplayer. No traffic over this limit is allowed. Unity Multiplayer may internally reduce the bandwidth it uses due to flow control. The default value is 1500MB/sec (1,536,000 bytes per second). The default value is intentionally a large number to allow all traffic to pass without delay.</para>
        <para>If you do not set the initial bandwidth yourself, Unity Multiplayer calculates a default value when it starts according to the formula: PacketSize * MinUpdateTimeout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxCombinedReliableMessageCount">
      <summary>Defines the maximum number of small reliable messages that can be included in one combined message. Default value = 10. Since each message sent to a server contains IP information and a UDP header, duplicating this information for every message sent can be inefficient in the case where there are many small messages being sent frequently. Many small reliable messages can be combined into one longer reliable message, saving space in the waiting buffer. Unity Multiplayer will automatically combine up to MaxCombinedReliableMessageCount small messages into one message. To qualify as a small message, the data payload of the message should not be greater than MaxCombinedReliableMessageSize.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxCombinedReliableMessageSize">
      <summary>Defines the maximum size in bytes of a reliable message which is considered small enough to include in a combined message. Default value = 100. Since each message sent to a server contains IP information and a UDP header, duplicating this information for every message sent can be inefficient in the case where there are many small messages being sent frequently. Many small reliable messages can be combined into one longer reliable message, saving space in the waiting buffer. Unity Multiplayer will automatically combine up to MaxCombinedReliableMessageCount small messages into one message. To qualify as a small message, the data payload of the message should not be greater than MaxCombinedReliableMessageSize.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxConnectionAttempt">
      <summary>Defines the maximum number of times Unity Multiplayer will attempt to send a connection request without receiving a response before it reports that it cannot establish a connection. Default value = 10.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxSentMessageQueueSize">
      <summary>Defines maximum number of messages that can be held in the queue for sending. Default value = 128. This buffer serves to smooth spikes in traffic and decreases network jitter. If the queue is full, a NoResources error will result from any calls to Send(). Setting this value greater than around 300 is likely to cause significant delaying of message delivering and can make game unplayable.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MinUpdateTimeout">
      <summary>Defines minimum time in milliseconds between sending packets. This duration may be automatically increased if required by flow control. Default value = 10. When Send() is called, Unity Multiplayer won’t send the message immediately. Instead, once every SendTimeout milliseconds each connection is checked to see if it has something to send. While initial and minimal send timeouts can be set, these may be increased internally due to network conditions or buffer overflows.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.NetworkDropThreshold">
      <summary>Defines the percentage (from 0 to 100) of packets that need to be dropped due to network conditions before the SendUpdate timeout is automatically increased (and send rate is automatically decreased). Default value = 5. To avoid receiver overflow, Unity Multiplayer supports flow control. Each ping packet sent between connected peers contains two values: (1) Packets lost due to network conditions. (2) Packets lost because the receiver does not have free space in its incoming buffers. Like OverflowDropThreshold, both values are reported in percent. Use NetworkDropThreshold and OverflowDropThreshold to set thresholds for these values. If a value reported in the ping packet exceeds the corresponding threshold, Unity Multiplayer increases the sending timeout for packets up to a maximum value of DisconnectTimeout. Note: wireless networks usually exhibit 5% or greater packet loss. For wireless networks it is advisable to use a NetworkDropThreshold of 40-50%.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.OverflowDropThreshold">
      <summary>Defines the percentage (from 0 to 100) of packets that need to be dropped due to lack of space in internal buffers before the SendUpdate timeout is automatically increased (and send rate is automatically decreased). Default value = 5. To avoid receiver overflow, Unity Multiplayer supports flow control. Each ping packet sent between connected peers contains two values: (1) Packets lost due to network conditions. (2) Packets lost because the receiver does not have free space in its incoming buffers. Like NetworkDropThreshold, both values are reported in percent. Use NetworkDropThreshold and OverflowDropThreshold to set thresholds for these values. If a value reported in the ping packet exceeds the corresponding threshold, Unity Multiplayer increases the sending timeout for packets up to a maximum value of DisconnectTimeout. Note: wireless networks usually exhibit 5% or greater packet loss. For wireless networks it is advisable to use a NetworkDropThreshold of 40-50%.</summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.MaxHosts">
      <summary>Defines how many hosts you can use. Default Value = 16. Max value = 128.</summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.MaxNetSimulatorTimeout">
      <summary>Deprecated. Defines maximum delay for network simulator.</summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.MaxPacketSize">
      <summary>
        <para>Defines maximum possible packet size in bytes for all network connections.</para>
        <para>The packet size associated with specific connections must be lower than this value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.MaxTimerTimeout">
      <summary>Defines the maximum timeout in milliseconds for any configuration. The default value is 12 seconds (12000ms).</summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.MinNetSimulatorTimeout">
      <summary>Deprecated. Defines the minimal timeout for network simulator. You cannot set up any delay less than this value.</summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.MinTimerTimeout">
      <summary>
        <para>Defines the minimum timeout in milliseconds recognised by the system. The default value is 1 ms.</para>
        <para>This timeout will do nothing if it is smaller than <see cref="UnityEngine.Networking.GlobalConfig.ThreadAwakeTimeout"></see>, since Unity Multiplayer threads check against timeouts at least this often.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ReactorMaximumReceivedMessages">
      <summary>
        <para>This property determines the initial size of the queue that holds messages received by Unity Multiplayer before they are processed.</para>
        <para>Although the size of this queue is increased by Unity Multiplayer if required, it is useful to set up initial size of this queue with a sensible value to avoid this additional runtime memory allocation. The following formula is a good general guideline: 2 * max(topology.ReceivedMessagePoolSize) * hostNumber Where topology is the <see cref="UnityEngine.Networking.HostTopology"></see> of the current network and hostNumber is the maximum number of hosts that can be open.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ReactorMaximumSentMessages">
      <summary>
        <para>Defines the initial size of the send queue. Messages are placed in this queue ready to be sent in packets to their destination.</para>
        <para>This property determines the initial size of the queue that holds messages before they are combined into packets and sent through the network. Although the size of this queue is increased by Unity Multiplayer if required, it is useful to set up the initial size with a sensible value to avoid this additional runtime memory allocation. The following formula is a good general guideline: 2 * max(topology.SentMessagePoolSize) * hostNumber Where topology is the <see cref="UnityEngine.Networking.HostTopology"></see> of the current network and hostNumber is the maximum number of hosts that can be open.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ReactorModel">
      <summary>
        <para>Defines reactor model for the network library.</para>
        <para>With the select model, received packets will be handled as soon as they arrive. With the fixed rate model, incoming packets will only be handled periodically. The select model is good for non-mobile devices, where the battery life is not important. Fixed rate is not as CPU intensive and will save battery life on mobile devices but this decreases performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ThreadAwakeTimeout">
      <summary>Defines (1) for select reactor, minimum time period, when system will check if there are any messages for send (2) for fixrate reactor, minimum interval of time, when system will check for sending and receiving messages.</summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ThreadPoolSize">
      <summary>
        <para>Defines how many worker threads are available to handle incoming and outgoing messages.</para>
        <para>Works for server-capable platforms (Mac OS X, Windows and Linux) only and will be ignored on other platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.DefaultConfig">
      <summary>Defines config for default connections in the topology.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.MaxDefaultConnections">
      <summary>Defines how many connection with default config be permitted.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.ReceivedMessagePoolSize">
      <summary>
        <para>Defines the maximum number of messages that each host can hold in its pool of received messages. The default size is 128.</para>
        <para>Messages received by hosts that have a full pool are dropped.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.SentMessagePoolSize">
      <summary>
        <para>Defines the maximum number of messages that each host can hold in its pool of messages waiting to be sent. The default size is 128.</para>
        <para>Messages to be sent that are passed to hosts that have a full pool are dropped.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.SpecialConnectionConfigs">
      <summary>List of special connection configs.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.SpecialConnectionConfigsCount">
      <summary>Returns count of special connection added to topology.</summary>
    </member>
    <member name="M:UnityEngine.Networking.HostTopology.AddSpecialConnectionConfig(UnityEngine.Networking.ConnectionConfig)">
      <summary>Add special connection to topology (for example if you need to keep connection to standalone chat server you will need to use this function). Returned id should be use as one of parameters (with ip and port) to establish connection to this server.</summary>
      <param name="config">Connection config for special connection.</param>
      <returns>Id of this connection. You should use this id when you call <see cref="UnityEngine.Networking.NetworkTransport.Connect"></see>.</returns>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.PacketSize">
      <summary>Defines maximum packet size (in bytes) (including payload and all header). Packet can contain multiple messages inside. Default value = 1500. Note that this default value is suitable for local testing only. Usually you should change this value; a recommended setting for PC or mobile is 1470. For games consoles this value should probably be less than ~1100. Wrong size definition can cause packet dropping.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.PingTimeout">
      <summary>Defines the duration in milliseconds between keep-alive packets, also known as pings. Default value = 500. The ping frequency should be long enough to accumulate good statistics and short enough to compare with DisconnectTimeout. A good guideline is to have more than 3 pings per disconnect timeout, and more than 5 messages per ping. For example, with a DisconnectTimeout of 2000ms, a PingTimeout of 500ms works well.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ResendTimeout">
      <summary>Defines the maximum wait time in milliseconds before the "not acknowledged" message is re-sent. Default value = 1200. It does not make a lot of sense to wait for acknowledgement forever. This parameter sets an upper time limit at which point reliable messages are re-sent.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.SendDelay">
      <summary>
        <para>Gets or sets the delay in milliseconds after a call to Send() before packets are sent. During this time, new messages may be combined in queued packets. Default value: 10ms.</para>
        <para>Unity Multiplayer can combine many messages into a single packet. This is more efficient for the network, because duplicating packet header information for each message consumes unnecessary bandwidth. SendDelay gets or sets the delay during which messages sent using the Send() function are combined into the same packet. Combination of packets is also limited by maximum packet size, and packet sending is limited by bandwidth limitations. Consider the following example situation: A Unity Multiplayer game sends messages about every 1 millisecond. Each message is approximately 1/3 the size of a packet. SendDelay has been set to 5ms. Let us consider a 5ms duration of gameplay. When the first message to be sent is received by Unity Multiplayer, the delay begins. Over the next 5ms, four more messages to be sent are received. Since the packets can fit about three messages, Unity Multiplayer creates two packets, the first containing the first three messages and the second containing the last two. The delay expires and the two packets are sent out. Unity Multiplayer then waits for a new message and, on receipt, starts a new delay.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.SSLCAFilePath">
      <summary>
        <para>Defines the path to the file containing the certification authority (CA) certificate for WebSocket via SSL communication.</para>
        <para>SSL WebSocket (WSS) communication is supported. To configure a WSS server, set <see cref="UnityEngine.Networking.ConnectionConfig.SSLPrivateKeyFilePath"></see> and <see cref="UnityEngine.Networking.ConnectionConfig.SSLCertFilePath"></see>. If you want to validate a certificate, set SSLCAFilePath. Leave this property unset if you use self-signed certificates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.SSLCertFilePath">
      <summary>
        <para>Defines path to SSL certificate file, for WebSocket via SSL communication.</para>
        <para>SSL WebSocket (WSS) communication is supported. To configure a WSS server, set <see cref="UnityEngine.Networking.ConnectionConfig.SSLPrivateKeyFilePath"></see> and <see cref="UnityEngine.Networking.ConnectionConfig.SSLCAFilePath"></see>. If you use self-signed certificates you don't need to set <see cref="UnityEngine.Networking.ConnectionConfig.SSLCAFilePath"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.SSLPrivateKeyFilePath">
      <summary>
        <para>Defines the path to the file containing the private key for WebSocket via SSL communication.</para>
        <para>SSL WebSocket (WSS) communication is supported. To configure a WSS server, set <see cref="UnityEngine.Networking.ConnectionConfig.SSLCertFilePath"></see> and <see cref="UnityEngine.Networking.ConnectionConfig.SSLCAFilePath"></see>. If you use self-signed certificates, you don't need to set <see cref="UnityEngine.Networking.ConnectionConfig.SSLCAFilePath"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.UdpSocketReceiveBufferMaxSize">
      <summary>Defines the size in bytes of the receiving buffer for UDP sockets. It is useful to set this parameter equal to the maximum size of a fragmented message. Default value is OS specific (usually 8kb).</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.UsePlatformSpecificProtocols">
      <summary>
        <para>When starting a server use protocols that make use of platform specific optimisations where appropriate rather than cross-platform protocols. (Sony consoles only).</para>
        <para>Set this flag to use platform specific protocols if the platform support them. Use when creating the server only. Not applicable when creating client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.WebSocketReceiveBufferMaxSize">
      <summary>WebSocket only. Defines the buffer size in bytes for received frames on a WebSocket host. If this value is 0 (the default), a 4 kilobyte buffer is used. Any other value results in a buffer of that size, in bytes. WebSocket message fragments are called "frames". A WebSocket host has a buffer to store incoming message frames. Therefore this buffer should be set to the largest legal frame size supported. If an incoming frame exceeds the buffer size, no error is reported. However, the buffer will invoke the user callback in order to create space for the overflow.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.AddChannel(UnityEngine.Networking.QosType)">
      <summary>Adds a new channel to the configuration and returns the unique id of that channel. Channels are logical delimiters of traffic between peers. Every time you send data to a peer, you should use two ids: connection id and channel id. Channels are not only logically separate traffic but could each be configured with a different quality of service (QOS). In the example below, a configuration is created containing two channels with Unreliable and Reliable QOS types. This configuration is then used for sending data.</summary>
      <param name="value">Add new channel to configuration.</param>
      <returns>Channel id, user can use this id to send message via this channel.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.GetChannel(System.Byte)">
      <summary>Return the QoS set for the given channel or throw an out of range exception.</summary>
      <param name="idx">Index in array.</param>
      <returns>Channel QoS.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.Validate(UnityEngine.Networking.ConnectionConfig)">
      <summary>Validate parameters of connection config. Will throw exceptions if parameters are incorrect.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionSimulatorConfig.Dispose">
      <summary>Destructor.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.SourceID.Invalid">
      <summary>Invalid SourceID.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ChannelQOS.QOS">
      <summary>Channel quality of service.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.Invalid">
      <summary>Invalid access level, signifying no access level has been granted/specified.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.User">
      <summary>User access level. This means you can do operations which affect yourself only, like disconnect yourself from the match.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.Owner">
      <summary>Access level Owner, generally granting access for operations key to the peer host server performing it's work.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.Admin">
      <summary>Administration access level, generally describing clearence to perform game altering actions against anyone inside a particular match.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkID.Invalid">
      <summary>Invalid NetworkID.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NodeID.Invalid">
      <summary>The invalid case of a NodeID.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.MatchInfoDirectConnectSnapshot.hostPriority">
      <summary>
        <para>The host priority for this direct connect info. Host priority describes the order in which this match member occurs in the list of clients attached to a match.</para>
        <para>Host priority starts at 0 for the host and increases for other clients in the match.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.MatchInfoDirectConnectSnapshot.nodeId">
      <summary>
        <para>NodeID of the match member this info refers to.</para>
        <para>A NodeID is the 16-bit identifier for a specific seat in a match. It is allocated by the matchmaker when creating or joining a match, and is used primarily when talking to the Relay server about a specific seat.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.MatchInfoDirectConnectSnapshot.privateAddress">
      <summary>
        <para>The private network address supplied for this direct connect info.</para>
        <para>The private network address contains the address supplied by this member when it created or joined a match. This property is optional, and will not contain information if you do not assign this value when a player creates or joins a match. The purpose of assigning this value is so that you can broadcast one player's local network address to other players directly across a Local Area Network, allowing them to connect directly to each other.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.MatchInfoDirectConnectSnapshot.publicAddress">
      <summary>
        <para>The public network address supplied for this direct connect info.</para>
        <para>The public network address contains the address supplied by this member when it created or joined a match. This property is optional, and will not contain information if you do not assign this value when a player creates or joins a match. The purpose of assigning this value is so that you can broadcast one player'snetwork address to other players directly over the internet, allowing them to connect directly to each other rather than requiring a relay server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.averageEloScore">
      <summary>
        <para>The average Elo score of the match.</para>
        <para>An Elo score is an optional data field describing a skill level. This averageEloScore is the average of all seats currently participating in the described match. For this field to be non-zero, your clients must supply an Elo score when creating or joining a match. The average score will automatically updated based on this.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.currentSize">
      <summary>
        <para>The current number of players in the match.</para>
        <para>This is the current number of players in this match, including the host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.directConnectInfos">
      <summary>
        <para>The collection of direct connect info classes describing direct connection information supplied to the MatchMaker.</para>
        <para>This contains the list of direct connect infos for a match. Direct connect infos are optional data objects describing alternate ways to connect to the specified seat. If you have set up your clients to supply this information, this list will contain the private and public addresses for each client. This is useful for allowing the clients to connect to each other directly across the Internet or a LAN. A direct connect info is not required or supplied when a seat is only accessible via Relay server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.hostNodeId">
      <summary>
        <para>The NodeID of the host for this match.</para>
        <para>The NodeID for the host is published to everyone in the match. This indicates which connected match member is the Unity Multiplayer server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.isPrivate">
      <summary>Describes if the match is private. Private matches are unlisted in ListMatch results.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.matchAttributes">
      <summary>The collection of match attributes on this match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.maxSize">
      <summary>The maximum number of players this match can grow to.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.name">
      <summary>The text name for this match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfoSnapshot.networkId">
      <summary>
        <para>The network ID for this match.</para>
        <para>This identifier is a 64-bit number indicating a unique match in the matchmaker. You should use it in any request to the matchmaker that needs to adjust the state of an existing match. This number is globally unique and never reused.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.accessToken">
      <summary>
        <para>The binary access token this client uses to authenticate its session for future commands.</para>
        <para>This is a binary identifier generated to help identify and authenticate a multiplayer client to matchmaker. To associate it with a match, you must make sure that Utility.SetAccessTokenForNetwork() is given this identifier and the network ID associated with the match in question. Once you have done this, you can then make calls to the matchmaker that require its use, such as <see cref="UnityEngine.Networking.Match.NetworkMatch.DropConnection"></see>. If the default callback MatchMakingClient functions are used for OnMatchCreate and OnMatchJoin this is set automatically.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.address">
      <summary>
        <para>IP address of the host of the match,.</para>
        <para>This is the address of the match to which a connection should be made. When using Relay server, this will be the IP address of the Relay server that has been told to reserve a seat for this client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.domain">
      <summary>
        <para>The numeric domain for the match.</para>
        <para>This is a number, chosen by the developer that can be used to silo use of the MatchMaker within a single game. For instance if app domain 1 creates a match, that match will only appear to <see cref="UnityEngine.Networking.Match.NetworkMatch.ListMatches"></see> requests with domain 1. This can be useful to handle different versions of a single game that may not be able to play with each other.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.networkId">
      <summary>
        <para>The unique ID of this match.</para>
        <para>This identifier is a 64bit number indicating the unique match number in MatchMaker. It's used for talking to MatchMaker and specifying a particular match for any request that needs to adjust the state of an existing match. This number is globally unique and never reused.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.nodeId">
      <summary>
        <para>NodeID for this member client in the match.</para>
        <para>A NodeID is the 16-bit identifier for a specific seat in a match. It is allocated by the MatchMaker when creating or joining a match, and is used primarially when talking to the Relay Server about a specific seat.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.port">
      <summary>
        <para>Port of the host of the match.</para>
        <para>This is the port of the match to which a connection should be made. When using Relay server, this will be the port on the Relay server that has been told to reserve a seat for this client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.usingRelay">
      <summary>
        <para>This flag indicates whether or not the match is using a Relay server.</para>
        <para>This value will be true if the MatchInfo relates to a Relay server seat allocated by the MatchMaker.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.NetworkMatch.baseUri">
      <summary>
        <para>The base URI of the MatchMaker that this NetworkMatch will communicate with.</para>
        <para>The default address for the MatchMaker is mm.unet.unity3d.com Using this address will connect a client to the nearest datacenter geographically. However, because data centers are siloed from each other you will only see matches occuring inside your current data center. If a player of your game is traveling to another part of the world, for instance, they may interact with a different set of players that are in that data center. You can override this behavior by specifying a particular data center. Keep in mind generally as distance grows so does latency, which is why we run data centers spread out over the world. To connect to a specific data center use one of the following addresses: United States: us1-mm.unet.unity3d.com Europe: eu1-mm.unet.unity3d.com Singapore: ap1-mm.unet.unity3d.com.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.AppID.Invalid">
      <summary>Invalid AppID.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.HostPriority.Invalid">
      <summary>The Invalid case for a HostPriority. An Invalid host priority is not a valid host.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessToken.array">
      <summary>Binary field for the actual token.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Types.NetworkAccessToken.GetByteString">
      <summary>Accessor to get an encoded string from the m_array data.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Types.NetworkAccessToken.IsValid">
      <summary>Checks if the token is a valid set of data with respect to default values (returns true if the values are not default, does not validate the token is a current legitimate token with respect to the server's auth framework).</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetRemoteDelayTimeMS(System.Int32,System.Int32,System.Int32,System.Byte@)">
      <summary>Returns the delay for the timestamp received.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <param name="remoteTime">Timestamp delivered from peer.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Init">
      <summary>Initializes the NetworkTransport. Should be called before any other operations on the NetworkTransport are done.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.IsBroadcastDiscoveryRunning">
      <summary>Check if the broadcast discovery sender is running.</summary>
      <returns>True if it is running. False if it is not running.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.QueueMessageForSending(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Byte@)">
      <summary>Function is queueing but not sending messages.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <param name="channelId">The channel ID to send on.</param>
      <param name="buffer">Buffer containing the data to send.</param>
      <param name="size">Size of the buffer.</param>
      <returns>True if success.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Receive(System.Int32@,System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32@,System.Byte@)">
      <summary>Called to poll the underlying system for events.</summary>
      <param name="hostId">Host ID associated with the event.</param>
      <param name="connectionId">The connectionID that received the event.</param>
      <param name="channelId">The channel ID associated with the event.</param>
      <param name="buffer">The buffer that will hold the data received.</param>
      <param name="bufferSize">Size of the buffer supplied.</param>
      <param name="receivedSize">The actual receive size of the data.</param>
      <returns>Type of event returned.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ReceiveFromHost(System.Int32,System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32@,System.Byte@)">
      <summary>Similar to <see cref="UnityEngine.Networking.NetworkTransport.Receive"></see> but will only poll for the provided hostId.</summary>
      <param name="hostId">The host ID to check for events.</param>
      <param name="connectionId">The connection ID that received the event.</param>
      <param name="channelId">The channel ID associated with the event.</param>
      <param name="buffer">The buffer that will hold the data received.</param>
      <param name="bufferSize">Size of the buffer supplied.</param>
      <param name="receivedSize">The actual receive size of the data.</param>
      <returns>Type of event returned.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ReceiveRelayEventFromHost(System.Int32,System.Byte@)">
      <summary>Polls the host for the following events: <see cref="UnityEngine.Networking.NetworkEventType.ConnectEvent"></see> and <see cref="UnityEngine.Networking.NetworkEventType.DisconnectEvent"></see>. Can only be called by the relay group owner.</summary>
      <param name="hostId">The host ID to check for events.</param>
      <returns>Type of event returned.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.RemoveHost(System.Int32)">
      <summary>Closes the opened socket, and closes all connections belonging to that socket.</summary>
      <param name="hostId">Host ID to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Send(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Byte@)">
      <summary>Send data to peer.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <param name="channelId">The channel ID to send on.</param>
      <param name="buffer">Buffer containing the data to send.</param>
      <param name="size">Size of the buffer.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.SendMulticast(System.Int32,System.Int32,System.Byte@)">
      <summary>Add a connection for the multicast send.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.SendQueuedMessages(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Sends messages, previously queued by <see cref="UnityEngine.Networking.NetworkTransport.QueueMessageForSending"></see> function.</para>
        <para>Unlike Send() function which uses SendDelay configuration parameter to determine when it will really combine incoming messages to packet and send it out, this function don't send messages but store all of them in incoming queue. The real immideate send will happene when user call SendBatch(hostId, ConnectioId). This function allow precise define time of sending (for example once per frame). To use this scenario you should set SendDelay = 0, or you will get additional SendDelay delay when you call SendBatch().</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>True if hostId and connectioId are valid.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.SetBroadcastCredentials(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte@)">
      <summary>Sets the credentials required for receiving broadcast messages. Should any credentials of a received broadcast message not match, the broadcast discovery message is dropped.</summary>
      <param name="hostId">Host ID associated with this broadcast.</param>
      <param name="key">Key part of the credentials associated with this broadcast.</param>
      <param name="version">Version part of the credentials associated with this broadcast.</param>
      <param name="subversion">Subversion part of the credentials associated with this broadcast.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Shutdown">
      <summary>Shut down the NetworkTransport.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.StartBroadcastDiscovery(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte@)">
      <summary>Starts sending a broadcasting message in all local subnets.</summary>
      <param name="hostId">Host ID which should be reported via broadcast (broadcast receivers will connect to this host).</param>
      <param name="broadcastPort">Port used for the broadcast message.</param>
      <param name="key">Key part of the credentials associated with this broadcast.</param>
      <param name="version">Version part of the credentials associated with this broadcast.</param>
      <param name="subversion">Subversion part of the credentials associated with this broadcast.</param>
      <param name="buffer">Complimentary message. This message will delivered to the receiver with the broadcast event.</param>
      <param name="size">Size of message.</param>
      <param name="timeout">Specifies how often the broadcast message should be sent in milliseconds.</param>
      <returns>Return true if broadcasting request has been submitted.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.StartSendMulticast(System.Int32,System.Int32,System.Byte[],System.Int32,System.Byte@)">
      <summary>Start to multicast send.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="channelId">The channel ID.</param>
      <param name="buffer">Buffer containing the data to send.</param>
      <param name="size">Size of the buffer.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.StopBroadcastDiscovery">
      <summary>Stop sending the broadcast discovery message.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransport.IsStarted">
      <summary>Deprecated.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology,System.Int32,System.String)">
      <summary>
        <para>Creates a host based on <see cref="UnityEngine.Networking.HostTopology"></see>.</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology"></see> associated with the host.</param>
      <param name="port">Port to bind to (when 0 is selected, the OS will choose a port at random).</param>
      <param name="ip">IP address to bind to.</param>
      <returns>Returns the ID of the host that was created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology,System.Int32)">
      <summary>
        <para>Creates a host based on <see cref="UnityEngine.Networking.HostTopology"></see>.</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology"></see> associated with the host.</param>
      <param name="port">Port to bind to (when 0 is selected, the OS will choose a port at random).</param>
      <returns>Returns the ID of the host that was created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology)">
      <summary>
        <para>Creates a host based on <see cref="UnityEngine.Networking.HostTopology"></see>.</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology"></see> associated with the host.</param>
      <returns>Returns the ID of the host that was created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(UnityEngine.Networking.HostTopology,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
        <para>Create a host and configure them to simulate Internet latency (works on Editor and development build only).</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available. The simulated latency will vary according to exponential distribution.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology"></see> associated with the host.</param>
      <param name="minTimeout">Minimum simulated delay in milliseconds.</param>
      <param name="maxTimeout">Maximum simulated delay in milliseconds.</param>
      <param name="port">Port to bind to (when 0 is selected, the OS will choose a port at random).</param>
      <param name="ip">IP address to bind to.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(UnityEngine.Networking.HostTopology,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Create a host and configure them to simulate Internet latency (works on Editor and development build only).</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available. The simulated latency will vary according to exponential distribution.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology"></see> associated with the host.</param>
      <param name="minTimeout">Minimum simulated delay in milliseconds.</param>
      <param name="maxTimeout">Maximum simulated delay in milliseconds.</param>
      <param name="port">Port to bind to (when 0 is selected, the OS will choose a port at random).</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(UnityEngine.Networking.HostTopology,System.Int32,System.Int32)">
      <summary>
        <para>Create a host and configure them to simulate Internet latency (works on Editor and development build only).</para>
        <para>An optional host IP address can be provided. This is usually useful on machines where multiple Ethernet cards are available. The simulated latency will vary according to exponential distribution.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology"></see> associated with the host.</param>
      <param name="minTimeout">Minimum simulated delay in milliseconds.</param>
      <param name="maxTimeout">Maximum simulated delay in milliseconds.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddWebsocketHost(UnityEngine.Networking.HostTopology,System.Int32)">
      <summary>
        <para>Created web socket host.</para>
        <para>This function is only supported for the Editor and Standalone Player on Windows, Linux and macOS. Topology is used to define how many clients can connect, and how many messages should be preallocated in the send and receive pool. All other parameters are ignored.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology"></see> associated with the host.</param>
      <param name="port">Port to bind to.</param>
      <returns>Web socket host id.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddWebsocketHost(UnityEngine.Networking.HostTopology,System.Int32,System.String)">
      <summary>
        <para>Created web socket host.</para>
        <para>This function is only supported for the Editor and Standalone Player on Windows, Linux and macOS. Topology is used to define how many clients can connect, and how many messages should be preallocated in the send and receive pool. All other parameters are ignored.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology"></see> associated with the host.</param>
      <param name="port">Port to bind to.</param>
      <param name="ip">IP address to bind to.</param>
      <returns>Web socket host id.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddWebsocketHost(UnityEngine.Networking.HostTopology,System.Int32)">
      <summary>
        <para>Created web socket host.</para>
        <para>This function is only supported for the Editor and Standalone Player on Windows, Linux and macOS. Topology is used to define how many clients can connect, and how many messages should be preallocated in the send and receive pool. All other parameters are ignored.</para>
      </summary>
      <param name="topology">The <see cref="UnityEngine.Networking.HostTopology"></see> associated with the host.</param>
      <param name="port">Port to bind to.</param>
      <returns>Web socket host id.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Connect(System.Int32,System.String,System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Tries to establish a connection to another peer.</para>
        <para>
          <see cref="UnityEngine.Networking.NetworkTransport.Connect">
          </see> can still fail despite returning a non-zero connection id, so make sure to poll <see cref="UnityEngine.Networking.NetworkTransport.Receive"></see> or <see cref="UnityEngine.Networking.NetworkTransport.ReceiveFromHost"></see> to listen for events. If everything is OK a <see cref="UnityEngine.Networking.NetworkEventType.ConnectEvent"></see> will be returned.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection (retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</param>
      <param name="address">IPv4 address of the other peer.</param>
      <param name="port">Port of the other peer.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectAsNetworkHost(System.Int32,System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID,System.Byte@)">
      <summary>
        <para>Create dedicated connection to Relay server.</para>
        <para>Calling this function sets the connection as the owner of the network group on the Relay server. This client should call <see cref="UnityEngine.Networking.NetworkTransport.ReceiveRelayEventFromHost"></see> periodically to be notified about connection/disconnection events to/from Relay server.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection (Retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</param>
      <param name="address">IPv4 address of the relay.</param>
      <param name="port">Port of the relay.</param>
      <param name="network">GUID for the relay match, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.networkId"></see>.</param>
      <param name="source">GUID for the source, can be retrieved by calling <see cref="UnityEngine.Networking.Utility.GetSourceID"></see>.</param>
      <param name="node">Slot ID for this user, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.CreateMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.nodeId"></see>.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectEndPoint(System.Int32,System.Net.EndPoint,System.Int32,System.Byte@)">
      <summary>
        <para>Try to establish connection to other peer, where the peer is specified using a C# System.EndPoint.</para>
        <para>This is primarily useful on platforms (such as Xbox One) that require passing in special structures representing the remote host (as compared to the usual IP/port combination). This is also useful for libraries relying on using an IPEndPoint object.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection (Retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</param>
      <param name="exceptionConnectionId">Set to 0 in the case of a default connection.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectToNetworkPeer(System.Int32,System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID,System.Int32,System.Single,System.Byte@)">
      <summary>
        <para>Create a connection to another peer in the Relay group.</para>
        <para>Similar to <see cref="UnityEngine.Networking.NetworkTransport.Connect"></see> but using the Relay server.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection (retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</param>
      <param name="address">IP address of the peer, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.address"></see>.</param>
      <param name="port">Port of the peer, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.port"></see>.</param>
      <param name="exceptionConnectionId">Set to 0 in the case of a default connection.</param>
      <param name="relaySlotId">ID of the remote peer in relay.</param>
      <param name="network">GUID for the relay match, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.networkId"></see>.</param>
      <param name="source">GUID for the source, can be retrieved by calling <see cref="UnityEngine.Networking.Utility.GetSourceID"></see>.</param>
      <param name="node">Slot ID reserved for the user, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.nodeId"></see>.</param>
      <param name="bytesPerSec">Average bandwidth (bandwidth will be throttled on this level).</param>
      <param name="bucketSizeFactor">Allowed peak bandwidth (peak bandwidth = factor*bytesPerSec, recommended value is 2.0) If data has not been sent for a long time, it is allowed to send more data, with factor 2 it is allowed send 2*bytesPerSec bytes per sec.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectToNetworkPeer(System.Int32,System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID,System.Byte@)">
      <summary>
        <para>Create a connection to another peer in the Relay group.</para>
        <para>Similar to <see cref="UnityEngine.Networking.NetworkTransport.Connect"></see> but using the Relay server.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection (retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</param>
      <param name="address">IP address of the peer, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.address"></see>.</param>
      <param name="port">Port of the peer, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.port"></see>.</param>
      <param name="exceptionConnectionId">Set to 0 in the case of a default connection.</param>
      <param name="relaySlotId">ID of the remote peer in relay.</param>
      <param name="network">GUID for the relay match, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.networkId"></see>.</param>
      <param name="source">GUID for the source, can be retrieved by calling <see cref="UnityEngine.Networking.Utility.GetSourceID"></see>.</param>
      <param name="node">Slot ID reserved for the user, retrieved by calling <see cref="UnityEngine.Networking.Match.NetworkMatch.JoinMatch"></see> and using the <see cref="UnityEngine.Networking.Match.MatchInfo.nodeId"></see>.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectWithSimulator(System.Int32,System.String,System.Int32,System.Int32,System.Byte@,UnityEngine.Networking.ConnectionSimulatorConfig)">
      <summary>
        <para>Connect with simulated latency.</para>
        <para>Establishes a connection between peers and configures it to simulate Internet latency (only works with the Editor and development builds).</para>
      </summary>
      <param name="hostId">Host ID associated with this connection (Retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</param>
      <param name="address">IPv4 address of the other peer.</param>
      <param name="port">Port of the other peer.</param>
      <param name="exeptionConnectionId">Set to 0 in the case of a default connection.</param>
      <param name="conf">A <see cref="UnityEngine.Networking.ConnectionSimulatorConfig"></see> defined for this connection.</param>
      <returns>A unique connection identifier on success (otherwise zero).</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Disconnect(System.Int32,System.Int32,System.Byte@)">
      <summary>Send a disconnect signal to the connected peer and close the connection. Poll <see cref="UnityEngine.Networking.NetworkTransport.Receive"></see>() to be notified that the connection is closed. This signal is only sent once (best effort delivery). If this packet is dropped for some reason, the peer closes the connection by timeout.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">The connection ID of the connection you want to close.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.DisconnectNetworkHost(System.Int32,System.Byte@)">
      <summary>This will disconnect the host and disband the group. DisconnectNetworkHost can only be called by the group owner on the relay server.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.FinishSendMulticast(System.Int32,System.Byte@)">
      <summary>Finalizes sending of a message to a group of connections. Only one multicast message at a time is allowed per host.</summary>
      <param name="hostId">Host ID associated with this connection (retrieved when calling <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetAckBufferCount(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Returns size of reliable buffer.</para>
        <para>If occupied size == 32 (def) or 64 (if isAckLong == true) no new reliable message can be sent.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>Size of ack buffer.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetAssetId(UnityEngine.GameObject)">
      <summary>The Unity Multiplayer spawning system uses assetIds to identify what remote objects to spawn. This function allows you to get the assetId for the prefab associated with an object.</summary>
      <param name="go">Target GameObject to get assetId for.</param>
      <returns>The assetId of the game object's prefab.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionInfo(System.Int32,System.String@,System.Int32@,System.Byte@)">
      <summary>After <see cref="UnityEngine.Networking.NetworkTransport.Receive"></see>() returns <see cref="UnityEngine.Networking.NetworkEventType.BroadcastEvent"></see>, this function will return the connection information of the broadcast sender. This information can then be used for connecting to the broadcast sender.</summary>
      <param name="hostId">ID of the broadcast receiver.</param>
      <param name="address">IPv4 address of broadcast sender.</param>
      <param name="port">Port of broadcast sender.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionMessage(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Byte@)">
      <summary>After <see cref="UnityEngine.Networking.NetworkTransport.Receive"></see>() returns <see cref="UnityEngine.Networking.NetworkEventType.BroadcastEvent"></see>, this function returns a complimentary message from the broadcast sender.</summary>
      <param name="hostId">ID of broadcast receiver.</param>
      <param name="buffer">Message buffer provided by caller.</param>
      <param name="bufferSize">Buffer size.</param>
      <param name="receivedSize">Received size (if received size &gt; bufferSize, corresponding error will be set).</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetConnectionInfo(System.Int32,System.Int32,System.String@,System.Int32@,UnityEngine.Networking.Types.NetworkID@,UnityEngine.Networking.Types.NodeID@,System.Byte@)">
      <summary>Returns the connection parameters for the specified connectionId. These parameters can be sent to other users to establish a direct connection to this peer. If this peer is connected to the host via Relay, the Relay-related parameters are set.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of connection.</param>
      <param name="address">IP address.</param>
      <param name="port">Port.</param>
      <param name="network">Relay network guid.</param>
      <param name="dstNode">Destination slot id.</param>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetCurrentRTT(System.Int32,System.Int32,System.Byte@)">
      <summary>Return the round trip time for the given connectionId.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>Current round trip time in ms.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetIncomingMessageQueueSize(System.Int32,System.Byte@)">
      <summary>
        <para>Returns the number of received messages waiting in the queue for processing.</para>
        <para>Messages received by Unity Multiplayer are stored in a queue ready to be processed. This function tells you how many messages are in the queue. If the queue ever reaches its capacity (which is given by <see cref="UnityEngine.Networking.GlobalConfig.ReactorMaximumReceivedMessages"></see>), any further received messages are dropped.</para>
      </summary>
      <param name="hostId">Host ID associated with this queue.</param>
      <param name="error">Error code.</param>
      <returns>The number of messages in the queue.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetIncomingPacketCount(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Returns how many packets have been received from start for connection.</para>
        <para>To determine the packet rate for the connection, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>The absolute number of packets received since the connection was established.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetIncomingPacketCountForAllHosts">
      <summary>
        <para>Returns how many packets have been received from start. (from <see cref="UnityEngine.Networking.NetworkTransport.Init"></see> call).</para>
        <para>To define packet rate, you can call this function periodically.</para>
      </summary>
      <returns>Packets count received from start for all hosts.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetIncomingPacketDropCountForAllHosts">
      <summary>How many packets have been dropped due lack space in incoming queue (absolute value, countinf from start).</summary>
      <returns>Dropping packet count.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetIncomingPacketLossCount(System.Int32,System.Int32,System.Byte@)">
      <summary>Returns how many incoming packets have been lost due transmitting (dropped by network).</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>The absolute number of packets that have been lost since the connection was established.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetMaxAllowedBandwidth(System.Int32,System.Int32,System.Byte@)">
      <summary>Gets the currently-allowed network bandwidth in bytes per second. The value returned can vary because bandwidth can be throttled by flow control. If the bandwidth is throttled to zero, the connection is disconnected.ted.</summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>Currently-allowed bandwidth in bytes per second.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetNetworkTimestamp">
      <summary>Get a network timestamp. Can be used in your messages to investigate network delays together with Networking.GetRemoteDelayTimeMS.</summary>
      <returns>Timestamp.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingFullBytesCount">
      <summary>
        <para>Returns how much raw data (in bytes) have been sent from start for all hosts (from <see cref="UnityEngine.Networking.NetworkTransport.Init"></see> call).</para>
        <para>To determine the rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <returns>Total data (user payload, protocol specific data, ip and udp headers) (in bytes) sent from start for all hosts.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingFullBytesCountForConnection(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Returns how much raw data (in bytes) have been sent from start for connection (from call <see cref="UnityEngine.Networking.NetworkTransport.Connect"></see> for active connect or from connection request receiving for passive connect).</para>
        <para>To determine the rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>Total data (user payload, protocol specific data, ip and udp headers) (in bytes) sent from start for connection.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingFullBytesCountForHost(System.Int32,System.Byte@)">
      <summary>
        <para>Returns how much raw data (in bytes) have been sent from start for the host (from call <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</para>
        <para>To determine the rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">ID of the host.</param>
      <returns>Total data (user payload, protocol specific data, ip and udp headers) (in bytes) sent from start for the host.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingMessageCount">
      <summary>
        <para>Returns how many messages have been sent from start (from <see cref="UnityEngine.Networking.NetworkTransport.Init"></see> call).</para>
        <para>To determine the message rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <returns>Messages count sent from start (from call <see cref="UnityEngine.Networking.NetworkTransport.Init"></see>) for all hosts.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingMessageCountForConnection(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Returns how many packets have been sent from start for connection (from call <see cref="UnityEngine.Networking.NetworkTransport.Connect"></see> for active connect or from connection request receiving for passive connect).</para>
        <para>To determine the message rate for the connection, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>Messages count sending from start for connection.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingMessageCountForHost(System.Int32,System.Byte@)">
      <summary>
        <para>Returns how many messages have been sent from start for host (from call <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</para>
        <para>To determine the message rate for the host, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">ID of the host.</param>
      <returns>Messages count sending from start for the host.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingMessageQueueSize(System.Int32,System.Byte@)">
      <summary>
        <para>Returns the number of messages waiting in the outgoing message queue to be sent.</para>
        <para>Messages waiting to be sent are placed in a queue. This queue can store GlobalConfig.MaxSentMessageQueueSize messages. If the queue is full when <see cref="UnityEngine.Networking.NetworkTransport.Send"></see> is called, Send() returns false allowing you to attempt to send your message again later or take other action.</para>
      </summary>
      <param name="hostId">Host ID associated with this queue.</param>
      <param name="error">Error code.</param>
      <returns>The number of messages waiting in the outgoing message queue to be sent.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingPacketCount">
      <summary>
        <para>Returns how many packets have been sent from start (from call <see cref="UnityEngine.Networking.NetworkTransport.Init"></see>) for all hosts.</para>
        <para>To determine the packet rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <returns>Packets count sent from networking library start (from call <see cref="UnityEngine.Networking.NetworkTransport.Init"></see>) for all hosts.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingPacketCountForConnection(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Returns how many packets have been sent for connection from it start (from call <see cref="UnityEngine.Networking.NetworkTransport.Connect"></see> for active connect or from connection request receiving for passive connect).</para>
        <para>To determine the packet rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>Packets count sent for connection from it start.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingPacketCountForHost(System.Int32,System.Byte@)">
      <summary>
        <para>Returns how many packets have been sent for host from it start (from call <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</para>
        <para>To determine the packet rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">ID of the host.</param>
      <returns>Count packets have been sent from host start.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingPacketNetworkLossPercent(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Returns the value in percent of the number of sent packets that were dropped by the network and not received by the peer.</para>
        <para>This value is calculated from packets dropped by the network between subsequent “keep alive” or ping packets. The packet rate is set, so the number of packets lost can be calculated from the expected number of incoming packets and the actual number of incoming packets.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>The number of packets dropped by the network in the last ping timeout period expressed as an integer percentage from 0 to 100.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingPacketOverflowLossPercent(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Returns the value in percent of the number of sent packets that were dropped by the peer.</para>
        <para>This value is calculated from packets dropped by the peer between subsequent “keep alive” or ping packets. The packet rate is set, so the number of packets lost can be calculated from the expected number of incoming packets and the actual number of incoming packets. Peers can drop packets when they receive too many in a short time, or are unable to process the packets they have received due to lack of resources.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>The number of packets dropped by the peer in the last ping timeout period expressed as an integer percentage from 0 to 100.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingSystemBytesCount">
      <summary>
        <para>Returns how much user payload and protocol system headers (in bytes) have been sent from start (from <see cref="UnityEngine.Networking.NetworkTransport.Init"></see> call).</para>
        <para>To determine the rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <returns>Total payload and protocol system headers (in bytes) sent from start for all hosts.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingSystemBytesCountForConnection(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Returns how much payload and protocol system headers (in bytes) have been sent from start for connection (from call <see cref="UnityEngine.Networking.NetworkTransport.Connect"></see> for active connect or from connection request receiving for passive connect).</para>
        <para>To determine the rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>Total user payload and protocol system headers (in bytes) sent from start for connection.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingSystemBytesCountForHost(System.Int32,System.Byte@)">
      <summary>
        <para>Returns how much payload and protocol system headers (in bytes) have been sent from start for the host (from call <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</para>
        <para>To determine the rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">ID of the host.</param>
      <returns>Total user payload and protocol system headers (in bytes) sent from start for the host.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingUserBytesCount">
      <summary>
        <para>Returns how much payload (user) bytes have been sent from start (from <see cref="UnityEngine.Networking.NetworkTransport.Init"></see> call).</para>
        <para>To determine the payload rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <returns>Total payload (in bytes) sent from start for all hosts.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingUserBytesCountForConnection(System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Returns how much payload (user) bytes have been sent from start for connection (from call <see cref="UnityEngine.Networking.NetworkTransport.Connect"></see> for active connect or from connection request receiving for passive connect).</para>
        <para>To determine the payload rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">Host ID associated with this connection.</param>
      <param name="connectionId">ID of the connection.</param>
      <returns>Total payload (in bytes) sent from start for connection.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetOutgoingUserBytesCountForHost(System.Int32,System.Byte@)">
      <summary>
        <para>Returns how much payload (user) bytes have been sent from start for the host (from call <see cref="UnityEngine.Networking.NetworkTransport.AddHost"></see>).</para>
        <para>To determine the payload rate, sample this value periodically and divide the difference by the intervening time period.</para>
      </summary>
      <param name="hostId">ID of the host.</param>
      <returns>Total payload (in bytes) sent from start for the host.</returns>
      <seealso cref="T:UnityEngine.Networking.NetworkError">
      </seealso>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.Ok">
      <summary>The operation completed successfully.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongHost">
      <summary>The specified host not available.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongConnection">
      <summary>The specified connectionId doesn't exist.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongChannel">
      <summary>The specified channel doesn't exist.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.NoResources">
      <summary>Not enough resources are available to process this request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.BadMessage">
      <summary>Not a data message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.Timeout">
      <summary>Connection timed out.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.MessageToLong">
      <summary>The message is too long to fit the buffer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongOperation">
      <summary>Operation is not supported.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.VersionMismatch">
      <summary>The protocol versions are not compatible. Check your library versions.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.CRCMismatch">
      <summary>The <see cref="UnityEngine.Networking.ConnectionConfig"></see> does not match the other endpoint.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.DNSFailure">
      <summary>The address supplied to connect to was invalid or could not be resolved.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.UsageError">
      <summary>
        <para>This error will occur if any function is called with inappropriate parameter values.</para>
        <para>For example, GetConnectionAddress should contain a buffer large enough to keep the address.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.DataEvent">
      <summary>Data event received. Indicating that data was received.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.ConnectEvent">
      <summary>Connection event received. Indicating that a new connection was established.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.DisconnectEvent">
      <summary>Disconnection event received.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.Nothing">
      <summary>No new event was received.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.BroadcastEvent">
      <summary>Broadcast discovery event received. To obtain sender connection info and possible complimentary message from them, call <see cref="UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionInfo"></see>() and <see cref="UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionMessage"></see>() functions.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.Unreliable">
      <summary>There is no guarantee of delivery or ordering.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.UnreliableFragmented">
      <summary>There is no guarantee of delivery or ordering, but allowing fragmented messages with up to 32 fragments per message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.UnreliableSequenced">
      <summary>There is no guarantee of delivery and all unordered messages will be dropped. Example: VoIP.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.Reliable">
      <summary>Each message is guaranteed to be delivered but not guaranteed to be in order.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableFragmented">
      <summary>Each message is guaranteed to be delivered, also allowing fragmented messages with up to 32 fragments per message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableSequenced">
      <summary>Each message is guaranteed to be delivered and in order.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.StateUpdate">
      <summary>An unreliable message. Only the last message in the send buffer is sent. Only the most recent message in the receive buffer will be delivered.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableStateUpdate">
      <summary>A reliable message. Note: Only the last message in the send buffer is sent. Only the most recent message in the receive buffer will be delivered.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.AllCostDelivery">
      <summary>A reliable message that will be re-sent with a high frequency until it is acknowledged.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.UnreliableFragmentedSequenced">
      <summary>There is garantee of ordering, no guarantee of delivery, but allowing fragmented messages with up to 32 fragments per message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableFragmentedSequenced">
      <summary>Each message is guaranteed to be delivered in order, also allowing fragmented messages with up to 32 fragments per message.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Utility.GetAccessTokenForNetwork(UnityEngine.Networking.Types.NetworkID)">
      <summary>Utility function to get this client's access token for a particular network, if it has been set.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Utility.GetSourceID">
      <summary>Utility function to get the client's SourceID for unique identification.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Utility.SetAccessTokenForNetwork(UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.NetworkAccessToken)">
      <summary>Utility function that accepts the access token for a network after it's received from the server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ConnectionAcksType.Acks32">
      <summary>Ack buffer can hold 32 messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ConnectionAcksType.Acks64">
      <summary>Ack buffer can hold 64 messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ConnectionAcksType.Acks96">
      <summary>Ack buffer can hold 96 messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ConnectionAcksType.Acks128">
      <summary>Ack buffer can hold 128 messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ReactorModel.SelectReactor">
      <summary>Network thread will sleep up to threadawake timeout, or up to receive event on socket will happened. Awaked thread will try to read up to maxpoolsize packets from socket and will try update connections ready to send (with fixing awaketimeout rate).</summary>
    </member>
    <member name="F:UnityEngine.Networking.ReactorModel.FixRateReactor">
      <summary>Network thread will sleep up to threadawake timeout, after that it will try receive up to maxpoolsize amount of messages and then will try perform send operation for connection whihc ready to send.</summary>
    </member>
  </members>
</doc>