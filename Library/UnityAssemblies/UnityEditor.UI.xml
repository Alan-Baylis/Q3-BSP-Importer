<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEditor.UI</name>
  </assembly>
  <members>
    <member name="T:UnityEditor.EventSystems.EventSystemEditor">
      <summary>
        <para>Custom Editor for the EventSystem Component.</para>
        <para>Extend this class to write a custom editor for an EventSystem-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EventSystems.EventTriggerEditor">
      <summary>
        <para>Custom Editor for the EventTrigger Component.</para>
        <para>Extend this class to write a custom editor for an EventTrigger-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.AnimationTriggersDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.AnimationTriggers"></see>.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.AnimationTriggers"></see> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer"></see> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.AspectRatioFitterEditor">
      <summary>Custom Editor for the AspectRatioFitter component.</summary>
    </member>
    <member name="T:UnityEditor.UI.ButtonEditor">
      <summary>
        <para>Custom Editor for the Button Component.</para>
        <para>Extend this class to write a custom editor for an Button-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.CanvasScalerEditor">
      <summary>Custom Editor for the CanvasScaler component.</summary>
    </member>
    <member name="T:UnityEditor.UI.ColorBlockDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.ColorBlock"></see>.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.ColorBlock"></see> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer"></see> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.ContentSizeFitterEditor">
      <summary>
        <para>Custom Editor for the ContentSizeFitter Component.</para>
        <para>Extend this class to write a custom editor for an ContentSizeFitter-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.DropdownEditor">
      <summary>
        <para>Custom editor for the Dropdown component.</para>
        <para>Extend this class to write a custom editor for an Dropdown-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.FontDataDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.FontData"></see>.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.FontData"></see> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer"></see> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.GraphicEditor">
      <summary>Extend this class to write your own graphic editor.</summary>
    </member>
    <member name="T:UnityEditor.UI.GridLayoutGroupEditor">
      <summary>
        <para>Custom Editor for the GridLayout Component.</para>
        <para>Extend this class to write a custom editor for an GridLayout-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.HorizontalOrVerticalLayoutGroupEditor">
      <summary>The Editor for the <see cref="UnityEngine.UI.HorizontalOrVerticalLayoutGroup"></see> class.</summary>
    </member>
    <member name="T:UnityEditor.UI.ImageEditor">
      <summary>
        <para>Custom Editor for the Image Component.</para>
        <para>Extend this class to write a custom editor for an Image-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.InputFieldEditor">
      <summary>
        <para>Custom Editor for the InputField Component.</para>
        <para>Extend this class to write a custom editor for an InputField-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.LayoutElementEditor">
      <summary>Editor for the <see cref="UnityEngine.UI.LayoutElement"></see> component.</summary>
    </member>
    <member name="T:UnityEditor.UI.MaskEditor">
      <summary>
        <para>Custom Editor for the Mask component.</para>
        <para>Extend this class to write a custom editor for a Mask-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.NavigationDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.Navigation"></see>.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.Navigation"></see> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer"></see> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.RawImageEditor">
      <summary>
        <para>Custom editor for RawImage.</para>
        <para>Extend this class to write a custom editor for a RawImage-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.RectMask2DEditor">
      <summary>
        <para>Custom editor for the RectMask2d component.</para>
        <para>Extend this class to write a custom editor for a Mask-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.ScrollbarEditor">
      <summary>
        <para>Custom Editor for the Scrollbar Component.</para>
        <para>Extend this class to write a custom editor for an Scrollbar-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.ScrollRectEditor">
      <summary>Editor for the <see cref="UnityEngine.UI.ScrollRect"></see> component.</summary>
    </member>
    <member name="T:UnityEditor.UI.SelectableEditor">
      <summary>
        <para>Custom Editor for the Selectable Component.</para>
        <para>Extend this class to write a custom editor for an Selectable-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.SelfControllerEditor">
      <summary>Base class for custom editors that are for components that implement the SelfControllerEditor interface.</summary>
    </member>
    <member name="T:UnityEditor.UI.SliderEditor">
      <summary>
        <para>Custom Editor for the Slider Component.</para>
        <para>Extend this class to write a custom editor for an Slider-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.SpriteStateDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.SpriteState"></see>.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.SpriteState"></see> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer"></see> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.TextEditor">
      <summary>
        <para>Custom Editor for the Text Component.</para>
        <para>Extend this class to write a custom editor for an Text-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.ToggleEditor">
      <summary>
        <para>Custom Editor for the Toggle Component.</para>
        <para>Extend this class to write a custom editor for an Toggle-derived component.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EventSystems.EventTriggerEditor.OnInspectorGUI">
      <summary>Implement specific EventTrigger inspector GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
      <seealso cref="M:UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI">
      </seealso>
    </member>
    <member name="M:UnityEditor.EventSystems.EventSystemEditor.HasPreviewGUI">
      <summary>Can this component be previewed in its current state?</summary>
      <returns>True if this component can be Previewed in its current state.</returns>
    </member>
    <member name="M:UnityEditor.EventSystems.EventSystemEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.EventSystems.EventSystemEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>Custom preview for Image component.</summary>
      <param name="rect">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
      <seealso cref="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      </seealso>
    </member>
    <member name="M:UnityEditor.EventSystems.EventSystemEditor.RequiresConstantRepaint">
      <summary>Does this edit require to be repainted constantly in its current state?</summary>
    </member>
    <member name="M:UnityEditor.UI.AnimationTriggersDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to specify how tall the GUI for this field is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <returns>The height in pixels.</returns>
    </member>
    <member name="M:UnityEditor.UI.AnimationTriggersDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>Override this method to make your own GUI for the property.</summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
    </member>
    <member name="M:UnityEditor.UI.InputFieldEditor.OnInspectorGUI">
      <summary>See: <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.ColorBlockDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to specify how tall the GUI for this field is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <returns>The height in pixels.</returns>
    </member>
    <member name="M:UnityEditor.UI.ColorBlockDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>Override this method to make your own GUI for the property.</summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
    </member>
    <member name="M:UnityEditor.UI.ContentSizeFitterEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.GetInfoString">
      <summary>A string cointaining the Image details to be used as a overlay on the component Preview.</summary>
      <returns>The Image details.</returns>
      <seealso cref="M:UnityEditor.ObjectPreview.GetInfoString">
      </seealso>
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.HasPreviewGUI">
      <summary>Can this component be Previewed in its current state?</summary>
      <returns>True if this component can be Previewed in its current state.</returns>
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.OnInspectorGUI">
      <summary>Implement specific ImageEditor inspector GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
      <seealso cref="M:UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI">
      </seealso>
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>Custom preview for Image component.</summary>
      <param name="rect">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
      <seealso cref="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      </seealso>
    </member>
    <member name="M:UnityEditor.UI.CanvasScalerEditor.OnInspectorGUI">
      <summary>
        <para>Implement this function to make a custom inspector.</para>
        <para>Inside this function you can add your own custom GUI for the inspector of a specific object class. Note: This function has to be overridden in order to work. The example below shows how a custom label can be created by using <c>override</c>:</para>
      </summary>
      <seealso cref="M:UnityEditor.Experimental.AssetImporters.AssetImporterEditor.DrawDefaultInspector">
      </seealso>
    </member>
    <member name="M:UnityEditor.UI.HorizontalOrVerticalLayoutGroupEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.ButtonEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.GraphicEditor.OnInspectorGUI">
      <summary>Implement specific GraphicEditor inspector GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
    </member>
    <member name="M:UnityEditor.UI.ScrollRectEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.RectMask2DEditor.OnInspectorGUI">
      <summary>
        <para>Implement this function to make a custom inspector.</para>
        <para>Inside this function you can add your own custom GUI for the inspector of a specific object class. Note: This function has to be overridden in order to work. The example below shows how a custom label can be created by using <c>override</c>:</para>
      </summary>
      <seealso cref="M:UnityEditor.Experimental.AssetImporters.AssetImporterEditor.DrawDefaultInspector">
      </seealso>
    </member>
    <member name="M:UnityEditor.UI.GridLayoutGroupEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.DropdownEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.AspectRatioFitterEditor.OnInspectorGUI">
      <summary>See Editor.OnInspectorGUI.</summary>
    </member>
    <member name="M:UnityEditor.UI.ScrollbarEditor.OnInspectorGUI">
      <summary>See: <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.NavigationDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to specify how tall the GUI for this field is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <returns>The height in pixels.</returns>
    </member>
    <member name="M:UnityEditor.UI.NavigationDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>Override this method to make your own GUI for the property.</summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
    </member>
    <member name="M:UnityEditor.UI.RawImageEditor.GetInfoString">
      <summary>A string cointaining the Image details to be used as a overlay on the component Preview.</summary>
      <returns>The RawImage details.</returns>
      <seealso cref="M:UnityEditor.ObjectPreview.GetInfoString">
      </seealso>
    </member>
    <member name="M:UnityEditor.UI.RawImageEditor.HasPreviewGUI">
      <summary>Can this component be Previewed in its current state?</summary>
      <returns>True if this component can be Previewed in its current state.</returns>
    </member>
    <member name="M:UnityEditor.UI.RawImageEditor.OnInspectorGUI">
      <summary>Implement specific RawImage inspector GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
      <seealso cref="M:UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI">
      </seealso>
    </member>
    <member name="M:UnityEditor.UI.RawImageEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>Custom preview for Image component.</summary>
      <param name="rect">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
      <seealso cref="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      </seealso>
    </member>
    <member name="M:UnityEditor.UI.FontDataDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to specify how tall the GUI for this field is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <returns>The height in pixels.</returns>
    </member>
    <member name="M:UnityEditor.UI.FontDataDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>Override this method to make your own GUI for the property.</summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
    </member>
    <member name="M:UnityEditor.UI.SpriteStateDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to specify how tall the GUI for this field is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <returns>The height in pixels.</returns>
    </member>
    <member name="M:UnityEditor.UI.SpriteStateDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>Override this method to make your own GUI for the property.</summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
    </member>
    <member name="M:UnityEditor.UI.TextEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.MaskEditor.OnInspectorGUI">
      <summary>
        <para>Implement this function to make a custom inspector.</para>
        <para>Inside this function you can add your own custom GUI for the inspector of a specific object class. Note: This function has to be overridden in order to work. The example below shows how a custom label can be created by using <c>override</c>:</para>
      </summary>
      <seealso cref="M:UnityEditor.Experimental.AssetImporters.AssetImporterEditor.DrawDefaultInspector">
      </seealso>
    </member>
    <member name="M:UnityEditor.UI.ToggleEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.SliderEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.LayoutElementEditor.OnInspectorGUI">
      <summary>See: <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.SelfControllerEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
    <member name="M:UnityEditor.UI.SelectableEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnInspectorGUI"></see>.</summary>
    </member>
  </members>
</doc>