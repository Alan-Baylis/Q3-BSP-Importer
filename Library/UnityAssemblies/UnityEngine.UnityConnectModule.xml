<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.UnityConnectModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.Analytics.AnalyticsSessionInfo">
      <summary>
        <para>Accesses for Analytics session information (common for all game instances).</para>
        <para>This class contains static methods for looking up Analytics session information.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Analytics.AnalyticsSessionState">
      <summary>Session tracking states.</summary>
    </member>
    <member name="T:UnityEngine.RemoteSettings">
      <summary>
        <para>Accesses remote settings (common for all game instances).</para>
        <para>In order to fetch the Remote Settings, you need an active internet connection. Remote Settings will be fetched once every session. You can subscribe to the <c>RemoteSettings.Updated</c> event to be notified when a new version of the settings has been fetched. You can only store basic types in the Remote Settings (int, double, string and booleans).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Analytics.AnalyticsSessionInfo.sessionElapsedTime">
      <summary>
        <para>Session time since the begining of player game session.</para>
        <para>Used for tracking player game playback time.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Analytics.AnalyticsSessionInfo.sessionId">
      <summary>Session id is used for tracking player game session.</summary>
    </member>
    <member name="P:UnityEngine.Analytics.AnalyticsSessionInfo.sessionState">
      <summary>Session state.</summary>
    </member>
    <member name="P:UnityEngine.Analytics.AnalyticsSessionInfo.userId">
      <summary>UserId is random GUID to track a player and is persisted across game session.</summary>
    </member>
    <member name="F:UnityEngine.Analytics.AnalyticsSessionState.kSessionStopped">
      <summary>Session tracking has stopped.</summary>
    </member>
    <member name="F:UnityEngine.Analytics.AnalyticsSessionState.kSessionStarted">
      <summary>Session tracking has started.</summary>
    </member>
    <member name="F:UnityEngine.Analytics.AnalyticsSessionState.kSessionPaused">
      <summary>Session tracking has paused.</summary>
    </member>
    <member name="F:UnityEngine.Analytics.AnalyticsSessionState.kSessionResumed">
      <summary>Session tracking has resumed.</summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.ForceUpdate">
      <summary>
        <para>Forces the game to download the newest settings from the server and update its values.</para>
        <para>Primarily for use in development and testing; in normal operation, the remote settings are downloaded from the server at the beginning of every session, and so forcing an update is not necessary. However, during testing, when settings are changing frequently, it can be useful to update them immediately within a session.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.GetBool(System.String,System.Boolean)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the remote settings if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. If you don't provide a default value, it will return false.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.GetBool(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the remote settings if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. If you don't provide a default value, it will return false.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.GetCount">
      <summary>Returns number of keys in remote settings.</summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.GetFloat(System.String,System.Single)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the remote settings if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. If you don't provide a default value, it will return 0.0.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.GetFloat(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the remote settings if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. If you don't provide a default value, it will return 0.0.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.GetInt(System.String,System.Int32)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the remote settings if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. If you don't provide a default value, it will return 0.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.GetInt(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the remote settings if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. If you don't provide a default value, it will return 0.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.GetKeys">
      <summary>Returns all the keys in remote settings.</summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.GetString(System.String,System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the remote settings if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>. If you don't provide a default value, it will return "" (empty string).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RemoteSettings.HasKey(System.String)">
      <summary>Returns true if <c>key</c> exists in the remote settings.</summary>
    </member>
  </members>
</doc>