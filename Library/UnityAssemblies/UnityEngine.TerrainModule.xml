<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.TerrainModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.DetailRenderMode">
      <summary>Render mode for detail prototypes.</summary>
    </member>
    <member name="T:UnityEngine.Tree">
      <summary>Tree Component for the tree creator.</summary>
    </member>
    <member name="T:UnityEngine.TreeInstance">
      <summary>
        <para>Contains information about a tree placed in the Terrain game object.</para>
        <para>This struct can be accessed from the TerrainData Object.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TreePrototype">
      <summary>
        <para>Simple class that contains a pointer to a tree prototype.</para>
        <para>This class is used by the TerrainData gameObject.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SplatPrototype">
      <summary>
        <para>A Splat prototype is just a texture that is used by the TerrainData.</para>
        <para>A class on a Terrain GameObject.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TerrainChangedFlags">
      <summary>
        <para>Indicate the types of changes to the terrain in OnTerrainChanged callback.</para>
        <para>Use bitwise AND to detect multiple changes.</para>
        <para>The above example shows how you can detect terrain changes by using OnTerrainChanged callback and TerrainChangedFlags enum.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TerrainRenderFlags">
      <summary>Enum provding terrain rendering options.</summary>
    </member>
    <member name="T:UnityEngine.Terrain">
      <summary>The Terrain component renders the terrain.</summary>
    </member>
    <member name="T:UnityEngine.Terrain.MaterialType">
      <summary>The type of the material used to render a terrain object. Could be one of the built-in types or custom.</summary>
    </member>
    <member name="T:UnityEngine.TerrainData">
      <summary>
        <para>The TerrainData class stores heightmaps, detail mesh positions, tree instances, and terrain texture alpha maps.</para>
        <para>The <see cref="UnityEngine.Terrain"></see> component links to the terrain data and renders it.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TerrainExtensions">
      <summary>Extension methods to the Terrain class, used only for the UpdateGIMaterials method used by the Global Illumination System.</summary>
    </member>
    <member name="T:UnityEngine.DetailPrototype">
      <summary>Detail prototype used by the Terrain GameObject.</summary>
    </member>
    <member name="F:UnityEngine.DetailRenderMode.GrassBillboard">
      <summary>
        <para>The detail prototype will be rendered as billboards that are always facing the camera.</para>
        <para>Grass will take normals from terrain directly underneath it, so that the shading matches the terrain.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DetailRenderMode.VertexLit">
      <summary>Will show the prototype using diffuse shading.</summary>
    </member>
    <member name="F:UnityEngine.DetailRenderMode.Grass">
      <summary>
        <para>The detail prototype will use the grass shader.</para>
        <para>When using custom meshes in this mode, control the wave amount by setting vertex color's alpha channel. Grass will take normals from terrain directly underneath it, so that the shading matches the terrain.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TreeInstance.color">
      <summary>Color of this instance.</summary>
    </member>
    <member name="F:UnityEngine.TreeInstance.heightScale">
      <summary>Height scale of this instance (compared to the prototype's size).</summary>
    </member>
    <member name="F:UnityEngine.TreeInstance.lightmapColor">
      <summary>Lightmap color calculated for this instance.</summary>
    </member>
    <member name="F:UnityEngine.TreeInstance.position">
      <summary>Position of the tree.</summary>
    </member>
    <member name="F:UnityEngine.TreeInstance.prototypeIndex">
      <summary>Index of this instance in the TerrainData.treePrototypes array.</summary>
    </member>
    <member name="F:UnityEngine.TreeInstance.rotation">
      <summary>Read-only. Rotation of the tree on X-Z plane (in radians).</summary>
    </member>
    <member name="F:UnityEngine.TreeInstance.widthScale">
      <summary>Width scale of this instance (compared to the prototype's size).</summary>
    </member>
    <member name="P:UnityEngine.TreePrototype.bendFactor">
      <summary>Bend factor of the tree prototype.</summary>
    </member>
    <member name="P:UnityEngine.TreePrototype.prefab">
      <summary>Retrieves the actual GameObect used by the tree.</summary>
    </member>
    <member name="P:UnityEngine.Tree.data">
      <summary>
        <para>Data asociated to the Tree.</para>
        <para>Check the tree creator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Tree.hasSpeedTreeWind">
      <summary>Tells if there is wind data exported from SpeedTree are saved on this component.</summary>
    </member>
    <member name="P:UnityEngine.SplatPrototype.metallic">
      <summary>
        <para>The metallic value of the splat layer.</para>
        <para>This is only applicable when using the built-in standard material for terrain. Valid range is 0.0f to 1.0f.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SplatPrototype.normalMap">
      <summary>Normal map of the splat applied to the Terrain.</summary>
    </member>
    <member name="P:UnityEngine.SplatPrototype.smoothness">
      <summary>
        <para>The smoothness value of the splat layer when the main texture has no alpha channel.</para>
        <para>This is only applicable when using the built-in standard material for terrain. Valid range is 0.0f to 1.0f.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SplatPrototype.texture">
      <summary>Texture of the splat applied to the Terrain.</summary>
    </member>
    <member name="P:UnityEngine.SplatPrototype.tileOffset">
      <summary>Offset of the tile texture of the SplatPrototype.</summary>
    </member>
    <member name="P:UnityEngine.SplatPrototype.tileSize">
      <summary>Size of the tile used in the texture of the SplatPrototype.</summary>
    </member>
    <member name="F:UnityEngine.Terrain.MaterialType.BuiltInStandard">
      <summary>
        <para>A built-in material that uses the standard physically-based lighting model. Inputs supported: smoothness, metallic / specular, normal.</para>
        <para>The actual built-in shader used is Nature/Terrain/Standard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Terrain.MaterialType.BuiltInLegacyDiffuse">
      <summary>
        <para>A built-in material that uses the legacy Lambert (diffuse) lighting model and has optional normal map support.</para>
        <para>The actual built-in shader used is Nature/Terrain/Diffuse.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Terrain.MaterialType.BuiltInLegacySpecular">
      <summary>
        <para>A built-in material that uses the legacy BlinnPhong (specular) lighting model and has optional normal map support.</para>
        <para>The actual built-in shader used is Nature/Terrain/Specular.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Terrain.MaterialType.Custom">
      <summary>Use a custom material given by <see cref="UnityEngine.Terrain.materialTemplate"></see>.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.legacySpecular">
      <summary>
        <para>The specular color of the terrain.</para>
        <para>You can use it to control the overall specular color across the whole terrain when <see cref="UnityEngine.Terrain.materialType"></see> is <see cref="UnityEngine.Terrain.MaterialType.BuiltInLegacySpecular"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.lightmapIndex">
      <summary>The index of the baked lightmap applied to this terrain.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.lightmapScaleOffset">
      <summary>The UV scale &amp; offset used for a baked lightmap.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.materialTemplate">
      <summary>
        <para>The custom material used to render the terrain.</para>
        <para>You can use this variable to give the terrain a custom material to render with. For the material to be actually applied, you also need to set <see cref="UnityEngine.Terrain.materialType"></see> to <see cref="UnityEngine.Terrain.MaterialType.Custom"></see>. No copy of the custom material is made internally, so modifying materialTemplate will affect all terrain objects using the same material.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.materialType">
      <summary>
        <para>The type of the material used to render the terrain. Could be one of the built-in types or custom. See <see cref="UnityEngine.Terrain.MaterialType"></see>.</para>
        <para>If you want to use a custom material, set this to <see cref="UnityEngine.Terrain.MaterialType.Custom"></see>, then assign a material to <see cref="UnityEngine.Terrain.materialTemplate"></see>. Terrain.MaterialType.Custom with Terrain.materialTemplate == null is identical to <see cref="UnityEngine.Terrain.MaterialType.BuiltInLegacyDiffuse"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.patchBoundsMultiplier">
      <summary>Set the terrain bounding box scale.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.realtimeLightmapIndex">
      <summary>The index of the realtime lightmap applied to this terrain.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.realtimeLightmapScaleOffset">
      <summary>The UV scale &amp; offset used for a realtime lightmap.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.reflectionProbeUsage">
      <summary>
        <para>How reflection probes are used for terrain. See <see cref="UnityEngine.Rendering.ReflectionProbeUsage"></see>.</para>
        <para>If enabled and reflection probes are present in the scene, a reflection texture will be picked for the terrain object and set as a uniform for the shader. Not applicable to materials using built-in Legacy shaders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.terrainData">
      <summary>The Terrain Data that stores heightmaps, terrain textures, detail meshes and trees.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.treeBillboardDistance">
      <summary>
        <para>Distance from the camera where trees will be rendered as billboards only.</para>
        <para>Decreasing this value improves performance but makes the transition look worse because the difference between billboards and trees will be more obvious.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.treeCrossFadeLength">
      <summary>
        <para>Total distance delta that trees will use to transition from billboard orientation to mesh orientation.</para>
        <para>Decreasing this value makes the transition happen faster. Setting it to 0 will produce a visible pop when switching from mesh to billboard representation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.treeDistance">
      <summary>
        <para>The maximum distance at which trees are rendered.</para>
        <para>The higher this is, the further the distance trees can be seen and the slower it will run.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.treeLODBiasMultiplier">
      <summary>
        <para>The multiplier to the current LOD bias used for rendering LOD trees (i.e. SpeedTree trees).</para>
        <para>The value by default is 1 and must be greater than 0. The exact LOD bias value used by tree rendering is <see cref="UnityEngine.QualitySettings.lodBias"></see> * value. The value is not serialized with Terrain component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.treeMaximumFullLODCount">
      <summary>
        <para>Maximum number of trees rendered at full LOD.</para>
        <para>This is an easy setting to prevent too many trees being rendered at too high resolution in dense forests. Since there will be no fade if <c>treeMaximumFullLODCount</c> is exceeded you should tweak the <c>treeBillboardDistance</c> to not include unnecessary trees that are not being seen but, still rendered.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Terrain.AddTreeInstance(UnityEngine.TreeInstance)">
      <summary>Adds a tree instance to the terrain.</summary>
    </member>
    <member name="M:UnityEngine.Terrain.ApplyDelayedHeightmapModification">
      <summary>Update the terrain's LOD and vegetation information after making changes with <see cref="UnityEngine.TerrainData.SetHeightsDelayLOD"></see>.</summary>
    </member>
    <member name="M:UnityEngine.Terrain.Flush">
      <summary>Flushes any change done in the terrain so it takes effect.</summary>
    </member>
    <member name="M:UnityEngine.Terrain.GetPosition">
      <summary>Get the position of the terrain.</summary>
    </member>
    <member name="M:UnityEngine.Terrain.GetSplatMaterialPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      <summary>Get the previously set splat material properties by copying to the <c>dest</c> MaterialPropertyBlock object.</summary>
      <seealso cref="M:UnityEngine.Terrain.SetSplatMaterialPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      </seealso>
      <seealso cref="M:UnityEngine.Tilemaps.TilemapRenderer.GetPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      </seealso>
      <seealso cref="T:UnityEngine.MaterialPropertyBlock">
      </seealso>
    </member>
    <member name="M:UnityEngine.Terrain.SampleHeight(UnityEngine.Vector3)">
      <summary>Samples the height at the given position defined in world space, relative to the terrain space.</summary>
    </member>
    <member name="M:UnityEngine.Terrain.SetNeighbors(UnityEngine.Terrain,UnityEngine.Terrain,UnityEngine.Terrain,UnityEngine.Terrain)">
      <summary>
        <para>Lets you setup the connection between neighboring Terrains.</para>
        <para>This ensures LOD matches up on neighboring terrains. Note that it is not enough to call this function on one Terrain, you need to set the neighbors of each terrain.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Terrain.SetSplatMaterialPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      <summary>Set the additional material properties when rendering the terrain heightmap using the splat material.</summary>
      <seealso cref="M:UnityEngine.Terrain.GetSplatMaterialPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      </seealso>
      <seealso cref="M:UnityEngine.Tilemaps.TilemapRenderer.SetPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      </seealso>
      <seealso cref="T:UnityEngine.MaterialPropertyBlock">
      </seealso>
    </member>
    <member name="M:UnityEngine.Terrain.CreateTerrainGameObject(UnityEngine.TerrainData)">
      <summary>Creates a Terrain including collider from <see cref="UnityEngine.TerrainData"></see>.</summary>
    </member>
    <member name="M:UnityEngine.TerrainExtensions.UpdateGIMaterials(UnityEngine.Terrain)">
      <summary>
        <para>Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.</para>
        <para>The second overload specifies a region of the Terrain that needs to be updated. This makes sure that only the systems that overlap with the specified rectangle get updated, which could help improve performance. The coordinates are specified the same way as in <see cref="UnityEngine.TerrainData.SetAlphamaps"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainExtensions.UpdateGIMaterials(UnityEngine.Terrain,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.</para>
        <para>The second overload specifies a region of the Terrain that needs to be updated. This makes sure that only the systems that overlap with the specified rectangle get updated, which could help improve performance. The coordinates are specified the same way as in <see cref="UnityEngine.TerrainData.SetAlphamaps"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetAlphamaps(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the alpha map at a position x, y given a width and height.</para>
        <para>The returned array is three-dimensional - the first two dimensions represent x and y coordinates on the map, while the third denotes the splatmap texture to which the alphamap is applied.</para>
      </summary>
      <param name="x">The x offset to read from.</param>
      <param name="y">The y offset to read from.</param>
      <param name="width">The width of the alpha map area to read.</param>
      <param name="height">The height of the alpha map area to read.</param>
      <returns>A 3D array of floats, where the 3rd dimension represents the mixing weight of each splatmap at each x,y coordinate.</returns>
    </member>
    <member name="M:UnityEngine.TerrainData.GetDetailLayer(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a 2D array of the detail object density in the specific location.</para>
        <para>The Terrain system uses detail layer density maps. Each map is essentially a grayscale image where each pixel value denotes the number of detail objects that will be procedurally placed terrain area. That corresponds to the pixel. Since several different detail types may be used, the map is arranged into "layers" - the array indices of the layers are determined by the order of the detail types defined in the Terrain inspector (ie, when the Paint Details tool is selected).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetHeight(System.Int32,System.Int32)">
      <summary>Gets the height at a certain point x,y.</summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetHeights(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Get an array of heightmap samples.</para>
        <para>Returns a two dimensional array of heightmap samples. The samples are represented as float values ranging from 0 to 1. The array has the dimensions [height,width] and is indexed as [y,x].</para>
      </summary>
      <param name="xBase">First x index of heightmap samples to retrieve.</param>
      <param name="yBase">First y index of heightmap samples to retrieve.</param>
      <param name="width">Number of samples to retrieve along the heightmap's x axis.</param>
      <param name="height">Number of samples to retrieve along the heightmap's y axis.</param>
    </member>
    <member name="M:UnityEngine.TerrainData.GetInterpolatedHeight(System.Single,System.Single)">
      <summary>Gets an interpolated height at a point x,y.</summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetInterpolatedNormal(System.Single,System.Single)">
      <summary>
        <para>Get an interpolated normal at a given location.</para>
        <para>The <c>x</c> and <c>y</c> values are normalized coordinates in the range 0..1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetSteepness(System.Single,System.Single)">
      <summary>
        <para>Gets the gradient of the terrain at point (x,y).</para>
        <para>The <c>x</c> and <c>y</c> values are normalized coordinates in the range 0..1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetSupportedLayers(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns an array of all supported detail layer indices in the area.</para>
        <para>The Terrain uses a detail layer density map. Each pixel in the map determines the amount of details objects that will be procedurally placed in the pixel area. The layer determines the detail prototype that will be instantiated at the location.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetTreeInstance(System.Int32)">
      <summary>Get the tree instance at the specified index. It is used as a faster version of <see cref="UnityEngine.TerrainData.treeInstances"></see>[index] as this function doesn't create the entire tree instances array.</summary>
      <param name="index">The index of the tree instance.</param>
    </member>
    <member name="M:UnityEngine.TerrainData.RefreshPrototypes">
      <summary>
        <para>Reloads all the values of the available prototypes (ie, detail mesh assets) in the TerrainData Object.</para>
        <para>This can be used in editor scripts to update the terrain when the prototype assets change, much like the Terrain &gt; Refresh Tree and Detail Prototypes menu command.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.SetAlphamaps(System.Int32,System.Int32,System.Single[,,])">
      <summary>
        <para>Assign all splat values in the given map area.</para>
        <para>The array supplied to this function determines the width and height of the portion to be replaced. The third dimension of the array corresponds to the number of splatmap textures.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.SetDetailLayer(System.Int32,System.Int32,System.Int32,System.Int32[,])">
      <summary>
        <para>Sets the detail layer density map.</para>
        <para>The Terrain system uses detail layer density maps. Each map is essentially a grayscale image where each pixel value denotes the number of detail objects that will be procedurally placed terrain area that corresponds to the pixel. Since several different detail types may be used, the map is arranged into "layers" - the array indices of the layers are determined by the order of the detail types defined in the Terrain inspector (ie, when the Paint Details tool is selected).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.SetDetailResolution(System.Int32,System.Int32)">
      <summary>Set the resolution of the detail map.</summary>
      <param name="detailResolution">Specifies the number of pixels in the detail resolution map. A larger detailResolution, leads to more accurate detail object painting.</param>
      <param name="resolutionPerPatch">Specifies the size in pixels of each individually rendered detail patch. A larger number reduces draw calls, but might increase triangle count since detail patches are culled on a per batch basis. A recommended value is 16. If you use a very large detail object distance and your grass is very sparse, it makes sense to increase the value.</param>
    </member>
    <member name="M:UnityEngine.TerrainData.SetHeights(System.Int32,System.Int32,System.Single[,])">
      <summary>
        <para>Set an array of heightmap samples.</para>
        <para>Sets heightmap data using a two dimensional array of heightmap samples. The samples are represented as float values ranging from 0 to 1. The area affected is defined by the array dimensions and starts at xBase and yBase. The heights array is indexed as [y,x]. This method recomputes all the LOD and vegetation information for the terrain on each call, which can be computationally expensive. In interactive editing scenarios, it may be better to call <see cref="UnityEngine.TerrainData.SetHeightsDelayLOD"></see> instead, followed by <see cref="UnityEngine.Terrain.ApplyDelayedHeightmapModification"></see> when the user completes an editing action.</para>
      </summary>
      <param name="xBase">First x index of heightmap samples to set.</param>
      <param name="yBase">First y index of heightmap samples to set.</param>
      <param name="heights">Array of heightmap samples to set (values range from 0 to 1, array indexed as [y,x]).</param>
    </member>
    <member name="M:UnityEngine.TerrainData.SetHeightsDelayLOD(System.Int32,System.Int32,System.Single[,])">
      <summary>
        <para>Set an array of heightmap samples.</para>
        <para>Sets heightmap data using a two dimensional array of heightmap samples. The samples are represented as float values ranging from 0 to 1. The area affected is defined by the array dimensions and starts at xBase and yBase. The heights array is indexed as [y,x]. Unlike <see cref="UnityEngine.TerrainData.SetHeights"></see>, this method does not update the LOD information for the terrain, or any trees/vegetation objects; this means the terrain may be temporarily rendered at an inappropriately high level of detail, but makes the method fast enough to be used in interactive editing scenarios. Once modifications to the terrain have been completed - for example, when the user releases the mouse button - call <see cref="UnityEngine.Terrain.ApplyDelayedHeightmapModification"></see> to update all the LOD and vegetation information.</para>
      </summary>
      <param name="xBase">First x index of heightmap samples to set.</param>
      <param name="yBase">First y index of heightmap samples to set.</param>
      <param name="heights">Array of heightmap samples to set (values range from 0 to 1, array indexed as [y,x]).</param>
    </member>
    <member name="M:UnityEngine.TerrainData.SetTreeInstance(System.Int32,UnityEngine.TreeInstance)">
      <summary>Set the tree instance with new parameters at the specified index. However, <see cref="UnityEngine.TreeInstance.prototypeIndex"></see> and <see cref="UnityEngine.TreeInstance.position"></see> can not be changed otherwise an ArgumentException will be thrown.</summary>
      <param name="index">The index of the tree instance.</param>
      <param name="instance">The new TreeInstance value.</param>
    </member>
    <member name="F:UnityEngine.TerrainChangedFlags.Heightmap">
      <summary>
        <para>Indicates a change to the heightmap data.</para>
        <para>This flag is set when heightmap data has been changed, for instance after <see cref="UnityEngine.TerrainData.SetHeights"></see> calls. Note that <see cref="UnityEngine.TerrainData.SetHeightsDelayLOD"></see> doesn't set this flag, even though the heightmap data is updated. See <see cref="UnityEngine.TerrainChangedFlags.DelayedHeightmapUpdate"></see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TerrainChangedFlags.TreeInstances">
      <summary>Indicates a change to the tree data.</summary>
    </member>
    <member name="F:UnityEngine.TerrainChangedFlags.DelayedHeightmapUpdate">
      <summary>
        <para>Indicates a change to the heightmap data without computing LOD.</para>
        <para>This flag is set after calls to <see cref="UnityEngine.TerrainData.SetHeightsDelayLOD"></see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TerrainChangedFlags.FlushEverythingImmediately">
      <summary>
        <para>Indicates that a change was made to the terrain that was so significant that the internal rendering data need to be flushed and recreated.</para>
        <para>This flag is set when the terrain is loaded or when tree or detail prototypes are changed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TerrainChangedFlags.RemoveDirtyDetailsImmediately">
      <summary>Indicates a change to the detail data.</summary>
    </member>
    <member name="F:UnityEngine.TerrainChangedFlags.WillBeDestroyed">
      <summary>Indicates that the TerrainData object is about to be destroyed.</summary>
    </member>
    <member name="F:UnityEngine.TerrainRenderFlags.Heightmap">
      <summary>Render heightmap.</summary>
    </member>
    <member name="F:UnityEngine.TerrainRenderFlags.Trees">
      <summary>Render trees.</summary>
    </member>
    <member name="F:UnityEngine.TerrainRenderFlags.Details">
      <summary>Render terrain details.</summary>
    </member>
    <member name="F:UnityEngine.TerrainRenderFlags.All">
      <summary>Render all options.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.activeTerrain">
      <summary>The active terrain. This is a convenience function to get to the main terrain in the scene.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.activeTerrains">
      <summary>The active terrains in the scene.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.bakeLightProbesForTrees">
      <summary>Specifies if an array of internal light probes should be baked for terrain trees. Available only in editor.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.basemapDistance">
      <summary>
        <para>Heightmap patches beyond basemap distance will use a precomputed low res basemap.</para>
        <para>This improves performance for far away patches. Close up Unity renders the heightmap using splat maps by blending between any amount of provided terrain textures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.castShadows">
      <summary>Should terrain cast shadows?.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.collectDetailPatches">
      <summary>
        <para>Collect detail patches from memory.</para>
        <para>By default the property value is true, meaning the detail patches in the Terrain will be removed from memory when not visible. If the property is set to false, the patches are kept in memory until the Terrain object is destroyed or the collectDetailPatches property is set to true. By setting the property to false all the detail patches for a given density will be initialized and kept in memory. Changing the density will recreate the patches. Note that detail patches can use a large amount of memory, therefore this property when set to false can increase the memory usage of your application significantly. The value is not serialized with Terrain component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.prototype">
      <summary>GameObject used by the DetailPrototype.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.detailObjectDensity">
      <summary>
        <para>Density of detail objects.</para>
        <para>This number goes from 0.0 to 1.0, with 1.0 being the original density, and lower numbers resulting in less detail objects being rendered.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.prototypeTexture">
      <summary>Texture used by the DetailPrototype.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.detailObjectDistance">
      <summary>Detail objects will be displayed up to this distance.</summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.renderMode">
      <summary>Render mode for the DetailPrototype.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.drawHeightmap">
      <summary>Specify if terrain heightmap should be drawn.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.drawTreesAndFoliage">
      <summary>Specify if terrain trees and details should be drawn.</summary>
    </member>
    <member name="P:UnityEngine.Terrain.editorRenderFlags">
      <summary>
        <para>Controls what part of the terrain should be rendered.</para>
        <para>Set the value to a combination of <see cref="UnityEngine.TerrainRenderFlags"></see> values. The default value is TerrainRenderFlags.all. The value is not serialized with Terrain component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.freeUnusedRenderingResources">
      <summary>
        <para>Whether some per-camera rendering resources for the terrain should be freed after not being used for some frames.</para>
        <para>By default this property is true, meaning these rendering resources will be deleted from memory if the camera they are associated with has not rendered for 100 frames. Sometimes this behavior might not be desired, because the next time these resources are required (when the camera starts to render again), we have to reallocate them, which can cause performance hiccup. In that case set this property to false to keep those resources in memory unless the camera they are associated with is destroyed. The value is not serialized with Terrain component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.heightmapMaximumLOD">
      <summary>
        <para>Lets you essentially lower the heightmap resolution used for rendering.</para>
        <para>This can be used on low end cards to never display the highest lod terrain. A value of 0 means always showing highest detail. A value of 1 means the triangle count will be reduced to 1/4th. The heightmap resolution will be halved for width and height.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.heightmapPixelError">
      <summary>
        <para>An approximation of how many pixels the terrain will pop in the worst case when switching lod.</para>
        <para>A higher value reduces the number of polygons drawn.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.legacyShininess">
      <summary>
        <para>The shininess value of the terrain.</para>
        <para>You can use it to control the overall shininess value across the whole terrain when <see cref="UnityEngine.Terrain.materialType"></see> is <see cref="UnityEngine.Terrain.MaterialType.BuiltInLegacySpecular"></see>. The valid range of this value is 0.0f to 1.0f.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.alphamapHeight">
      <summary>Height of the alpha map.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.alphamapLayers">
      <summary>Number of alpha map layers.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.alphamapResolution">
      <summary>Resolution of the alpha map.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.alphamapTextures">
      <summary>Alpha map textures used by the Terrain. Used by Terrain Inspector for undo.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.alphamapWidth">
      <summary>Width of the alpha map.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.baseMapResolution">
      <summary>Resolution of the base map used for rendering far patches on the terrain.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.bounds">
      <summary>
        <para>The local bounding box of the TerrainData object.</para>
        <para>In order to retrive the world bounding box of a terrain, move it with <see cref="UnityEngine.Transform.position"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.detailHeight">
      <summary>Detail height of the TerrainData.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.detailPrototypes">
      <summary>Contains the detail texture/meshes that the terrain has.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.detailResolution">
      <summary>Detail Resolution of the TerrainData.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.detailWidth">
      <summary>Detail width of the TerrainData.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.heightmapHeight">
      <summary>Height of the terrain in samples (Read Only).</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.heightmapResolution">
      <summary>Resolution of the heightmap.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.heightmapScale">
      <summary>The size of each heightmap sample.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.heightmapWidth">
      <summary>Width of the terrain in samples (Read Only).</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.size">
      <summary>The total size in world units of the terrain.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.splatPrototypes">
      <summary>
        <para>Splat texture used by the terrain.</para>
        <para>These are the ground textures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.thickness">
      <summary>
        <para>The thickness of the terrain used for collision detection.</para>
        <para>This lets the physics engine know how thick the Terrain is when used with a TerrainCollider. Any other colliders which are no less then thickness units underneath the Terrain will be considered to collide with the terrain, and will be moved above the terrain.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.treeInstanceCount">
      <summary>Returns the number of tree instances.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.treeInstances">
      <summary>Contains the current trees placed in the terrain.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.treePrototypes">
      <summary>
        <para>The list of tree prototypes this are the ones available in the inspector.</para>
        <para>If you change any value here, you should call TerrainData.RefreshPrototypes so the changes take effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.wavingGrassAmount">
      <summary>Amount of waving grass in the terrain.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.wavingGrassSpeed">
      <summary>Speed of the waving grass.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.wavingGrassStrength">
      <summary>Strength of the waving grass in the terrain.</summary>
    </member>
    <member name="P:UnityEngine.TerrainData.wavingGrassTint">
      <summary>Color of the waving grass that the terrain has.</summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.bendFactor">
      <summary>Bend factor of the detailPrototype.</summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.dryColor">
      <summary>Color when the DetailPrototypes are "dry".</summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.healthyColor">
      <summary>Color when the DetailPrototypes are "healthy".</summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.maxHeight">
      <summary>Maximum height of the grass billboards (if render mode is GrassBillboard).</summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.maxWidth">
      <summary>Maximum width of the grass billboards (if render mode is GrassBillboard).</summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.minHeight">
      <summary>Minimum height of the grass billboards (if render mode is GrassBillboard).</summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.minWidth">
      <summary>Minimum width of the grass billboards (if render mode is GrassBillboard).</summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.noiseSpread">
      <summary>How spread out is the noise for the DetailPrototype.</summary>
    </member>
  </members>
</doc>