<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.UnityWebRequestWWWModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.WWW">
      <summary>
        <para>Simple access to web pages.</para>
        <para>This is a small utility module for retrieving the contents of URLs. You start a download in the background by calling <c>WWW(url)</c> which returns a new WWW object. You can inspect the <c>isDone</c> property to see if the download has completed or yield the download object to automatically wait until it is (without blocking the rest of the game). Use it if you want to get some data from a web server for integration with a game such as highscore lists or calling home for some reason. There is also functionality to create textures from images downloaded from the web and to stream &amp; load new web player data files. The WWW class can be used to send both GET and POST requests to the server. The WWW class will use GET by default and POST if you supply a postData parameter. Note: URLs passed to WWW class must be '%' escaped. Noteshttp://, https:// and file:// protocols are supported on iPhone. ftp:// protocol support is limited to anonymous downloads only. Other protocols are not supported. Note: When using file protocol on Windows and Windows Store Apps for accessing local files, you have to specify file:/// (with three slashes).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWW.EscapeURL(System.String)">
      <summary>
        <para>Escapes characters in a string to ensure they are URL-friendly.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. It is recommended that you use this function on any text supplied by a user before passing the text as a URL parameter. This will ensure that a malicious user can't manipulate the contents of the URL to attack the webserver.</para>
      </summary>
      <param name="s">A string with characters to be escaped.</param>
    </member>
    <member name="M:UnityEngine.WWW.EscapeURL(System.String,System.Text.Encoding)">
      <summary>
        <para>Escapes characters in a string to ensure they are URL-friendly.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. It is recommended that you use this function on any text supplied by a user before passing the text as a URL parameter. This will ensure that a malicious user can't manipulate the contents of the URL to attack the webserver.</para>
      </summary>
      <param name="s">A string with characters to be escaped.</param>
      <param name="e">The text encoding to use.</param>
    </member>
    <member name="M:UnityEngine.WWW.LoadFromCacheOrDownload(System.String,System.Int32)">
      <summary>
        <para>Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.</para>
        <para>LoadFromCacheOrDownload() must be used in place of "new WWW (url)" in order to utilize caching functionality. Cached AssetBundles are uniquely identified solely by the filename and version. All domain and path information in <c>url</c> is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. Usually using the filename of the AssetBundle to generate the cache path is fine. But if there are different AssetBundles with the same last file name, cache conflicts will happen. With CachedAssetBundle, users can use CachedAssetBundle.name to customized the cache path to avoid the cache conflicts. Users can also utilize this to organize the cache data structure. If the cache folder does not have any space for caching additional files, LoadFromCacheOrDownload will iteratively delete the least-recently-used AssetBundles from the Cache until sufficient space is available to store the new AssetBundle. If making space is not possible (because the hard disk is full, or all files in the cache are currently in use), LoadFromCacheOrDownload() will bypass Caching and stream the file into memory like a normal "new WWW()" call. Cached data can be stored in a compressed form depending on <see cref="UnityEngine.Caching.compressionEnabled"></see> value. This function can only be used to access AssetBundles. No other types or content are cacheable. The CRC passed into this function is computed during Asset Bundle build time, see <see cref="UnityEditor.BuildPipeline.BuildAssetBundles"></see>. Note: URL must be '%' escaped.</para>
      </summary>
      <param name="url">The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.</param>
      <param name="version">Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same <c>version</c> parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBundle from <c>url</c>.</param>
      <returns>A WWW instance, which can be used to access the data once the load/download operation is completed.</returns>
      <seealso cref="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      </seealso>
    </member>
    <member name="M:UnityEngine.WWW.LoadFromCacheOrDownload(System.String,System.Int32,System.UInt32)">
      <summary>
        <para>Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.</para>
        <para>LoadFromCacheOrDownload() must be used in place of "new WWW (url)" in order to utilize caching functionality. Cached AssetBundles are uniquely identified solely by the filename and version. All domain and path information in <c>url</c> is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. Usually using the filename of the AssetBundle to generate the cache path is fine. But if there are different AssetBundles with the same last file name, cache conflicts will happen. With CachedAssetBundle, users can use CachedAssetBundle.name to customized the cache path to avoid the cache conflicts. Users can also utilize this to organize the cache data structure. If the cache folder does not have any space for caching additional files, LoadFromCacheOrDownload will iteratively delete the least-recently-used AssetBundles from the Cache until sufficient space is available to store the new AssetBundle. If making space is not possible (because the hard disk is full, or all files in the cache are currently in use), LoadFromCacheOrDownload() will bypass Caching and stream the file into memory like a normal "new WWW()" call. Cached data can be stored in a compressed form depending on <see cref="UnityEngine.Caching.compressionEnabled"></see> value. This function can only be used to access AssetBundles. No other types or content are cacheable. The CRC passed into this function is computed during Asset Bundle build time, see <see cref="UnityEditor.BuildPipeline.BuildAssetBundles"></see>. Note: URL must be '%' escaped.</para>
      </summary>
      <param name="url">The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.</param>
      <param name="version">Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same <c>version</c> parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBundle from <c>url</c>.</param>
      <param name="crc">An optional CRC-32 Checksum of the uncompressed contents. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match. You can use this to avoid data corruption from bad downloads or users tampering with the cached files on disk. If the CRC does not match, Unity will try to redownload the data, and if the CRC on the server does not match it will fail with an error. Look at the error string returned to see the correct CRC value to use for an AssetBundle.</param>
      <returns>A WWW instance, which can be used to access the data once the load/download operation is completed.</returns>
      <seealso cref="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      </seealso>
    </member>
    <member name="M:UnityEngine.WWW.LoadFromCacheOrDownload(System.String,UnityEngine.Hash128,System.UInt32)">
      <summary>
        <para>Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.</para>
        <para>LoadFromCacheOrDownload() must be used in place of "new WWW (url)" in order to utilize caching functionality. Cached AssetBundles are uniquely identified solely by the filename and version. All domain and path information in <c>url</c> is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. Usually using the filename of the AssetBundle to generate the cache path is fine. But if there are different AssetBundles with the same last file name, cache conflicts will happen. With CachedAssetBundle, users can use CachedAssetBundle.name to customized the cache path to avoid the cache conflicts. Users can also utilize this to organize the cache data structure. If the cache folder does not have any space for caching additional files, LoadFromCacheOrDownload will iteratively delete the least-recently-used AssetBundles from the Cache until sufficient space is available to store the new AssetBundle. If making space is not possible (because the hard disk is full, or all files in the cache are currently in use), LoadFromCacheOrDownload() will bypass Caching and stream the file into memory like a normal "new WWW()" call. Cached data can be stored in a compressed form depending on <see cref="UnityEngine.Caching.compressionEnabled"></see> value. This function can only be used to access AssetBundles. No other types or content are cacheable. The CRC passed into this function is computed during Asset Bundle build time, see <see cref="UnityEditor.BuildPipeline.BuildAssetBundles"></see>. Note: URL must be '%' escaped.</para>
      </summary>
      <param name="url">The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.</param>
      <param name="hash">Hash128 which is used as the version of the AssetBundle.</param>
      <param name="crc">An optional CRC-32 Checksum of the uncompressed contents. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match. You can use this to avoid data corruption from bad downloads or users tampering with the cached files on disk. If the CRC does not match, Unity will try to redownload the data, and if the CRC on the server does not match it will fail with an error. Look at the error string returned to see the correct CRC value to use for an AssetBundle.</param>
      <returns>A WWW instance, which can be used to access the data once the load/download operation is completed.</returns>
      <seealso cref="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      </seealso>
    </member>
    <member name="M:UnityEngine.WWW.LoadFromCacheOrDownload(System.String,UnityEngine.CachedAssetBundle,System.UInt32)">
      <summary>
        <para>Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.</para>
        <para>LoadFromCacheOrDownload() must be used in place of "new WWW (url)" in order to utilize caching functionality. Cached AssetBundles are uniquely identified solely by the filename and version. All domain and path information in <c>url</c> is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. Usually using the filename of the AssetBundle to generate the cache path is fine. But if there are different AssetBundles with the same last file name, cache conflicts will happen. With CachedAssetBundle, users can use CachedAssetBundle.name to customized the cache path to avoid the cache conflicts. Users can also utilize this to organize the cache data structure. If the cache folder does not have any space for caching additional files, LoadFromCacheOrDownload will iteratively delete the least-recently-used AssetBundles from the Cache until sufficient space is available to store the new AssetBundle. If making space is not possible (because the hard disk is full, or all files in the cache are currently in use), LoadFromCacheOrDownload() will bypass Caching and stream the file into memory like a normal "new WWW()" call. Cached data can be stored in a compressed form depending on <see cref="UnityEngine.Caching.compressionEnabled"></see> value. This function can only be used to access AssetBundles. No other types or content are cacheable. The CRC passed into this function is computed during Asset Bundle build time, see <see cref="UnityEditor.BuildPipeline.BuildAssetBundles"></see>. Note: URL must be '%' escaped.</para>
      </summary>
      <param name="url">The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.</param>
      <param name="cachedBundle">A structure used to download a given version of AssetBundle to a customized cache path. Analogous to the <c>cachedAssetBundle</c> parameter for <see cref="UnityEngine.Networking.UnityWebRequest.GetAssetBundle"></see>.&lt;/param&gt;</param>
      <param name="crc">An optional CRC-32 Checksum of the uncompressed contents. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match. You can use this to avoid data corruption from bad downloads or users tampering with the cached files on disk. If the CRC does not match, Unity will try to redownload the data, and if the CRC on the server does not match it will fail with an error. Look at the error string returned to see the correct CRC value to use for an AssetBundle.</param>
      <returns>A WWW instance, which can be used to access the data once the load/download operation is completed.</returns>
      <seealso cref="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      </seealso>
    </member>
    <member name="M:UnityEngine.WWW.UnEscapeURL(System.String)">
      <summary>
        <para>Converts URL-friendly escape sequences back to normal text.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. This function takes a string containing these escape sequences and converts them back to normal text.</para>
      </summary>
      <param name="s">A string containing escaped characters.</param>
    </member>
    <member name="M:UnityEngine.WWW.UnEscapeURL(System.String,System.Text.Encoding)">
      <summary>
        <para>Converts URL-friendly escape sequences back to normal text.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. This function takes a string containing these escape sequences and converts them back to normal text.</para>
      </summary>
      <param name="s">A string containing escaped characters.</param>
      <param name="e">The text encoding to use.</param>
    </member>
    <member name="P:UnityEngine.WWW.keepWaiting">
      <summary>
        <para>Indicates if coroutine should be kept suspended.</para>
        <para>To keep coroutine suspended, return <c>true</c>. To let coroutine proceed with execution, return <c>false</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.assetBundle">
      <summary>Streams an AssetBundle that can contain any kind of asset from the project folder.</summary>
    </member>
    <member name="P:UnityEngine.WWW.bytes">
      <summary>
        <para>Returns the contents of the fetched web page as a byte array (Read Only).</para>
        <para>If the object has not finished downloading the data, it will return an empty byte array. Use <see cref="UnityEngine.WWW.isDone"></see> or <c>yield</c> to see if the data is available.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.bytesDownloaded">
      <summary>
        <para>The number of bytes downloaded by this WWW query (read only).</para>
        <para>Returns the number of bytes downloaded when fetching content from a WWW source.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.error">
      <summary>
        <para>Returns an error message if there was an error during the download (Read Only).</para>
        <para>If there was no error, <c>error</c> will return <c>null</c> or an empty string (this is because some platforms don't allow nulls for string values). We recommend that you use String.IsNullOrEmpty to check for the presence of an error so that both cases are covered. If the object has not finished downloading the data, it will block until the download has finished. Use <see cref="UnityEngine.WWW.isDone"></see> or <c>yield</c> to see if the data is available.</para>
        <para>In the example the URL is not valid so the error message will be "Couldn't resolve host".</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.isDone">
      <summary>
        <para>Is the download already finished? (Read Only)</para>
        <para>You should not write loops that spin until download is done; use coroutines instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.progress">
      <summary>
        <para>How far has the download progressed (Read Only).</para>
        <para>This is a value between zero and one; 0 means nothing is downloaded, 1 means download complete. <c>progress</c> will remain at 0.0 while sending the request to the server. For monitoring progress when uploading files to a web server, see WWW.uploadProgress.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.responseHeaders">
      <summary>
        <para>Dictionary of headers returned by the request.</para>
        <para>Note when using these code examples you will want to set the WWW Security Emulation Host URL to "http://unity3d.com" in Editor Settings. Failure to do this may give you security exceptions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.text">
      <summary>
        <para>Returns the contents of the fetched web page as a string (Read Only).</para>
        <para>If the object has not finished downloading the data, it will return an empty string. Use <see cref="UnityEngine.WWW.isDone"></see> or <c>yield</c> to see if the data is available. This function expects the web page contents in UTF-8 or ASCII character set. The returned string might be not correct for other characters or binary data. Use <see cref="UnityEngine.WWW.bytes"></see> property to get raw byte array in these cases.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.texture">
      <summary>
        <para>Returns a <see cref="UnityEngine.Texture2D"></see> generated from the downloaded data (Read Only).</para>
        <para>The data must be an image in JPG or PNG format. If the data is not a valid image, the generated texture will be a small image of a question mark. It is recommended to use power-of-two size for each dimension of the image; arbitrary sizes will also work but can load slightly slower and take up a bit more memory. Each invocation of texture property allocates a new <see cref="UnityEngine.Texture2D"></see>. If you continously download textures you must use <see cref="UnityEngine.WWW.LoadImageIntoTexture"></see> or <see cref="UnityEngine.Timeline.GroupTrack.Destroy"></see> the previously created texture. For PNG files, gamma correction is applied to the texture if PNG file contains gamma information. Display gamma for correction is assumed to be 2.0. If file does not contain gamma information, no color correction will be performed. JPG files are loaded into <see cref="UnityEngine.TextureFormat.RGB24"></see> format, PNG files are loaded into <see cref="UnityEngine.TextureFormat.ARGB32"></see> format. If you want to DXT-compress the downloaded image, use <see cref="UnityEngine.WWW.LoadImageIntoTexture"></see> instead. If the object has not finished downloading the data a dummy image will be returned. Use <see cref="UnityEngine.WWW.isDone"></see> or <see cref="UnityEngine.YieldInstruction"></see> to see if the data is available.</para>
        <para>Note: The <see cref="UnityEngine.WWW.texture"></see> property allocates a new <see cref="UnityEngine.Texture2D"></see> every time it is called. Therefore, it is important to always assign the result to a local variable so that it can later be freed using Destroy(). For example, the following code will cause a memory leak: The call to www.texture allocates a new texture, but the texture is never deallocated because no local reference to it exists. Alternatively, use <see cref="UnityEngine.WWW.LoadImageIntoTexture"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.textureNonReadable">
      <summary>
        <para>Returns a non-readable <see cref="UnityEngine.Texture2D"></see> generated from the downloaded data (Read Only).</para>
        <para>Same as <see cref="UnityEngine.WWW.texture"></see>, but marks texture as non-readable, effectively freeing system memory. SA TextureImporter.isReadable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.threadPriority">
      <summary>Obsolete, has no effect.</summary>
    </member>
    <member name="P:UnityEngine.WWW.uploadProgress">
      <summary>
        <para>How far has the upload progressed (Read Only).</para>
        <para>This is a value between zero and one; 0 means nothing is sent yet, 1 means upload complete. Since all sending of data to the server is done before receiving data, <c>uploadProgress</c> will always be 1.0 when <c>progress</c> is larger than 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.url">
      <summary>The URL of this WWW request (Read Only).</summary>
    </member>
    <member name="M:UnityEngine.WWW.Dispose">
      <summary>
        <para>Disposes of an existing WWW object.</para>
        <para>This function can be used to abort a download in progress. This can be useful, say, if you want to give the user an option to cancel the remote loading of a level in the game.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClip(System.Boolean)">
      <summary>
        <para>Returns an <see cref="UnityEngine.AudioClip"></see> generated from the downloaded data (Read Only).</para>
        <para>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV. Note that the XM, IT, MOD or S3M format can also be streamed in, but realtime playback of these is not supported, because all the data must be present before playback can begin, so for these tracker formats AudioClip.isReadyToPlay must switch to true before the clip may be assigned to and AudioSource and played back. Note: In Unity 5.x the <c>threeD</c> argument is ignored. The <see cref="UnityEngine.AudioSource"></see> component controls whether the sound is 3D or 2D.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip the .audioClip property defaults to 3D.</param>
      <returns>The returned <see cref="UnityEngine.AudioClip"></see>.</returns>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClip(System.Boolean,System.Boolean)">
      <summary>
        <para>Returns an <see cref="UnityEngine.AudioClip"></see> generated from the downloaded data (Read Only).</para>
        <para>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV. Note that the XM, IT, MOD or S3M format can also be streamed in, but realtime playback of these is not supported, because all the data must be present before playback can begin, so for these tracker formats AudioClip.isReadyToPlay must switch to true before the clip may be assigned to and AudioSource and played back. Note: In Unity 5.x the <c>threeD</c> argument is ignored. The <see cref="UnityEngine.AudioSource"></see> component controls whether the sound is 3D or 2D.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip the .audioClip property defaults to 3D.</param>
      <param name="stream">Sets whether the clip should be completely downloaded before it's ready to play (false) or the stream can be played even if only part of the clip is downloaded (true). The latter will disable seeking on the clip (with .time and/or .timeSamples).</param>
      <returns>The returned <see cref="UnityEngine.AudioClip"></see>.</returns>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClip(System.Boolean,System.Boolean,UnityEngine.AudioType)">
      <summary>
        <para>Returns an <see cref="UnityEngine.AudioClip"></see> generated from the downloaded data (Read Only).</para>
        <para>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV. Note that the XM, IT, MOD or S3M format can also be streamed in, but realtime playback of these is not supported, because all the data must be present before playback can begin, so for these tracker formats AudioClip.isReadyToPlay must switch to true before the clip may be assigned to and AudioSource and played back. Note: In Unity 5.x the <c>threeD</c> argument is ignored. The <see cref="UnityEngine.AudioSource"></see> component controls whether the sound is 3D or 2D.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip the .audioClip property defaults to 3D.</param>
      <param name="stream">Sets whether the clip should be completely downloaded before it's ready to play (false) or the stream can be played even if only part of the clip is downloaded (true). The latter will disable seeking on the clip (with .time and/or .timeSamples).</param>
      <param name="audioType">The AudioType of the content your downloading. If this is not set Unity will try to determine the type from URL.</param>
      <returns>The returned <see cref="UnityEngine.AudioClip"></see>.</returns>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClipCompressed">
      <summary>
        <para>Returns an <see cref="UnityEngine.AudioClip"></see> generated from the downloaded data that is compressed in memory (Read Only).</para>
        <para>By default GetAudioClip will load the file into memory decompressed. This version will load the data compressed and decompress it as it plays. The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV.</para>
      </summary>
      <returns>The returned <see cref="UnityEngine.AudioClip"></see>.</returns>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClipCompressed(System.Boolean)">
      <summary>
        <para>Returns an <see cref="UnityEngine.AudioClip"></see> generated from the downloaded data that is compressed in memory (Read Only).</para>
        <para>By default GetAudioClip will load the file into memory decompressed. This version will load the data compressed and decompress it as it plays. The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip.</param>
      <returns>The returned <see cref="UnityEngine.AudioClip"></see>.</returns>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClipCompressed(System.Boolean,UnityEngine.AudioType)">
      <summary>
        <para>Returns an <see cref="UnityEngine.AudioClip"></see> generated from the downloaded data that is compressed in memory (Read Only).</para>
        <para>By default GetAudioClip will load the file into memory decompressed. This version will load the data compressed and decompress it as it plays. The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip.</param>
      <param name="audioType">The AudioType of the content your downloading. If this is not set Unity will try to determine the type from URL.</param>
      <returns>The returned <see cref="UnityEngine.AudioClip"></see>.</returns>
    </member>
    <member name="M:UnityEngine.WWW.GetMovieTexture">
      <summary>
        <para>Returns a <see cref="UnityEngine.MovieTexture"></see> generated from the downloaded data (Read Only).</para>
        <para>The data must be a movie in Ogg Theora format. Even if the movie is not yet completely downloaded, this returns immediately, allowing you to start playing the partial movie as it downloads.</para>
      </summary>
      <seealso cref="P:UnityEngine.MovieTexture.audioClip">
      </seealso>
    </member>
    <member name="M:UnityEngine.WWW.LoadImageIntoTexture(UnityEngine.Texture2D)">
      <summary>
        <para>Replaces the contents of an existing <see cref="UnityEngine.Texture2D"></see> with an image from the downloaded data.</para>
        <para>The data must be an image in JPG or PNG format. If the data is not a valid image, the generated texture will be a small image of a question mark. It is recommended to use power-of-two size for each dimension of the image; arbitrary sizes will also work but can load slightly slower and take up a bit more memory. For PNG files, gamma correction is applied to the texture if PNG file contains gamma information. Display gamma for correction is assumed to be 2.0. If file does not contain gamma information, no color correction will be performed. This function replaces texture contents with downloaded image data, so texture size and format might change. JPG files are loaded into <see cref="UnityEngine.TextureFormat.RGB24"></see> format, PNG files are loaded into <see cref="UnityEngine.TextureFormat.ARGB32"></see> format. If texture format before calling LoadImage is <see cref="UnityEngine.TextureFormat.DXT1"></see> or <see cref="UnityEngine.TextureFormat.DXT5"></see>, then the loaded image will be DXT-compressed (into DXT1 for JPG images and DXT5 for PNG images). If the data has not finished downloading the texture will be left untouched. Use <see cref="UnityEngine.WWW.isDone"></see> or <c>yield</c> to see if the data is available.</para>
      </summary>
    </member>
  </members>
</doc>