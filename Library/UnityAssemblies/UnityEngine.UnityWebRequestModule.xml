<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.UnityWebRequestModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.Networking.DownloadHandler">
      <summary>
        <para>Manage and process HTTP response body data received from a remote server.</para>
        <para>DownloadHandler objects are helper objects. When attached to a <see cref="UnityEngine.Networking.UnityWebRequest"></see>, they define how to handle HTTP response body data received from a remote server. Generally, they are used to buffer, stream and/or process response bodies. DownloadHandler is a base class. Depending on usage scenario, different specialized classes are available. <see cref="UnityEngine.Networking.DownloadHandlerBuffer"></see> provides basic buffering, while <see cref="UnityEngine.Networking.DownloadHandlerTexture"></see> and <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> provide more efficient solutions for <see cref="UnityEngine.Texture"></see> and <see cref="UnityEngine.AssetBundle"></see> downloads. For custom use cases, see <see cref="UnityEngine.Networking.DownloadHandlerScript"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandlerAssetBundle">
      <summary>
        <para>A <see cref="UnityEngine.Networking.DownloadHandler"></see> subclass specialized for downloading <see cref="UnityEngine.AssetBundle"></see>s.</para>
        <para>This subclass streams downloaded data into Unity's asset bundle decompression and decoding system on worker threads, providing efficient downloading and processing for <see cref="UnityEngine.AssetBundle"></see> objects.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandlerBuffer">
      <summary>
        <para>A general-purpose <see cref="UnityEngine.Networking.DownloadHandler"></see> implementation which stores received data in a native byte buffer.</para>
        <para>This is a general-purpose <see cref="UnityEngine.Networking.DownloadHandler"></see> subclass. It stores received data in native memory. It will preallocated a data buffer based on any received <c>Content-Length</c> header, but will expand its buffer should the actual download size exceed the value of <c>Content-Length</c> header (or if a <c>Content-Length</c> header is not received). <c>Note:</c> When accessing <see cref="UnityEngine.Networking.DownloadHandler.data"></see> or <see cref="UnityEngine.Networking.DownloadHandler.text"></see> on this subclass, a new byte array or string will be allocated each time the property is accessed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandlerFile">
      <summary>
        <para>Download handler for saving the downloaded data to file.</para>
        <para>This specialized download handler writes all downloaded bytes directly to file. This can help avoid high memory usage. Note that you cannot get any data out of this download handler; you are expected to work with resulting file after the download is finished.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.DownloadHandlerScript">
      <summary>
        <para>An abstract base class for user-created scripting-driven <see cref="UnityEngine.Networking.DownloadHandler"></see> implementations.</para>
        <para>On its own, a <see cref="UnityEngine.Networking.DownloadHandlerScript"></see> object does no useful work. Instead, it forwards data received from the network to the <see cref="UnityEngine.Networking.DownloadHandlerBuffer.ReceiveData"></see> callback method, as well as invoking other useful callbacks for download-related events. By default, a <see cref="UnityEngine.Networking.DownloadHandlerScript"></see> does nothing; however, you can derive your own subclass from DownloadHandlerScript, override some or all of its callbacks and thereby implement completely custom data handling.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.MultipartFormDataSection">
      <summary>
        <para>A helper object for form sections containing generic, non-file data.</para>
        <para>This helper object is used similarly to the [WWWForm] method [WWWForm.AddData]. It is used to define non-file form sections.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.MultipartFormFileSection">
      <summary>
        <para>A helper object for adding file uploads to multipart forms via the [IMultipartFormSection] API.</para>
        <para>This object is very similar to the [MultipartFormDataSection] object, but all constructors additionally accept (and require) a <c>fileName parameter</c>. If you omit the <c>fileName</c> parameter, this object will provide a default filename.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.UnityWebRequest">
      <summary>
        <para>The UnityWebRequest object is used to communicate with web servers.</para>
        <para>UnityWebRequests handle the flow of HTTP communication with web servers. Other objects - specifically <see cref="UnityEngine.Networking.DownloadHandler"></see> and <see cref="UnityEngine.Networking.UploadHandler"></see> - govern downloading and uploading data, respectively. A set of static functions are provided for convenience; these return UnityWebRequest objects properly configured for many common use cases. <c>See:</c><see cref="UnityEngine.Networking.UnityWebRequest.Get"></see>, <see cref="UnityEngine.Networking.UnityWebRequest.Post"></see>, <see cref="UnityEngine.Networking.UnityWebRequest.Put"></see>, <c>GetTexture</c>. <c>Note:</c> Most properties on the UnityWebRequest object cannot be altered once the UnityWebRequest has begun communicating with a remote server by calling the <c>Send</c> method.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.UnityWebRequestAsyncOperation">
      <summary>Asynchronous operation object returned from <see cref="UnityEngine.Networking.UnityWebRequest.SendWebRequest"></see>(). You can yield until it continues, register an event handler with <see cref="UnityEngine.iOS.OnDemandResourcesRequest.completed"></see>, or manually check whether it's done (<see cref="UnityEngine.AsyncOperation.isDone"></see>) or progress (<see cref="UnityEngine.AsyncOperation.progress"></see>).</summary>
    </member>
    <member name="T:UnityEngine.Networking.UploadHandler">
      <summary>
        <para>Helper object for <see cref="UnityEngine.Networking.UnityWebRequest"></see>s. Manages the buffering and transmission of body data during HTTP requests.</para>
        <para>When attached to a <see cref="UnityEngine.Networking.UnityWebRequest"></see>, an UploadHandler object handles all information regarding the buffering and transmission of body data during an HTTP request. By placing data in an UploadHandler and attaching it to a <see cref="UnityEngine.Networking.UnityWebRequest"></see>, the <see cref="UnityEngine.Networking.UnityWebRequest"></see> is implicitly instructed to transmit the UploadHandler's data to the remote server. The data will always be delivered as HTTP request body data. UploadHandler is a base class and cannot be directly instantiated. Currently, only one type of UploadHandler is available: <see cref="UnityEngine.Networking.UploadHandlerRaw"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.UploadHandlerRaw">
      <summary>
        <para>A general-purpose <see cref="UnityEngine.Networking.UploadHandler"></see> subclass, using a native-code memory buffer.</para>
        <para>This subclass copies input data into a native-code memory buffer at construction time, and transmits that data verbatim as HTTP request body data.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.IMultipartFormSection">
      <summary>
        <para>An interface for composition of data into multipart forms.</para>
        <para>In order to provide a finer level of control for those wishing to generate multipart form data, but without forcing most users to refer to <see href="rfc2388" cref="RFC 2388"></see>, Unity provides this simple interface which the UnityWebRequest API can use to serialize complex data into properly-formatted bytes. For convenience, the two general types of form sections have been encapsulated into two stock implementations of IMultipartFormSection. Both stock implementations are simply controlled via their constructors. IMultipartFormSection implementors are converted into bytes via [UnityWebRequest.SerializeFormSections].</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WWWForm">
      <summary>
        <para>Helper class to generate form data to post to web servers using the <see cref="UnityEngine.Networking.UnityWebRequest"></see> or <see cref="UnityEngine.WWW"></see> classes.</para>
        <para>Here is a sample script that retrieves the high scores stored in a table in an SQL database.</para>
        <para>Here is a sample Perl script that processes the high scores stored in a table in an SQL database.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerBuffer.GetContent(UnityEngine.Networking.UnityWebRequest)">
      <summary>
        <para>Returns a copy of the native-memory buffer interpreted as a UTF8 string.</para>
        <para>A static function provided for convenience; equivalent to ((DownloadHandlerBuffer)www.downloadHandler).text.</para>
      </summary>
      <param name="www">A finished UnityWebRequest object with <see cref="UnityEngine.Networking.DownloadHandlerBuffer"></see> attached.</param>
      <returns>The same as DownloadHandlerBuffer.text</returns>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle">
      <summary>
        <para>Returns the downloaded <see cref="UnityEngine.AssetBundle"></see>, or <c>null</c>. (Read Only)</para>
        <para>This property returns the asset bundle which has been downloaded (or is downloading, in the case of streamed asset bundles). If there is an error decoding the asset bundle’s assets, the system will log the error and this property will return <c>null</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandlerAssetBundle.GetContent(UnityEngine.Networking.UnityWebRequest)">
      <summary>
        <para>Returns the downloaded <see cref="UnityEngine.AssetBundle"></see>, or <c>null</c>.</para>
        <para>A static function provided for convenience; equivalent to ((DownloadHandlerAssetBundle)www.downloadHandler).assetBundle.</para>
      </summary>
      <param name="www">A finished UnityWebRequest object with <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> attached.</param>
      <returns>The same as <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle"></see></returns>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandlerFile.removeFileOnAbort">
      <summary>Should the created file be removed if download is aborted (manually or due to an error). Default: false.</summary>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandler.data">
      <summary>
        <para>Returns the raw bytes downloaded from the remote server, or <c>null</c>. (Read Only)</para>
        <para>This property returns the raw bytes downloaded from the remote server. If no data has yet been received, this property returns <c>null</c>. <c>Note:</c> Note: The precise memory allocation behavior of this property changes depending on subclass. See subclass documentation of GetData for further information on exactly how the data property handles memory allocation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandler.isDone">
      <summary>Returns <c>true</c> if this DownloadHandler has been informed by its parent <see cref="UnityEngine.Networking.UnityWebRequest"></see> that all data has been received, and this DownloadHandler has completed any necessary post-download processing. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.Networking.DownloadHandler.text">
      <summary>Convenience property. Returns the bytes from data interpreted as a UTF8 string. (Read Only)</summary>
    </member>
    <member name="M:UnityEngine.Networking.DownloadHandler.Dispose">
      <summary>
        <para>Signals that this [DownloadHandler] is no longer being used, and should clean up any resources it is using.</para>
        <para>This method must be called once you have finished using a [DownloadHandler] object. For convenience, [UnityWebRequest] exposes the [UnityWebRequest.disposeDownloadHandlerOnDispose] property, which will automatically call this method when [UnityWebRequest.Dispose] is called. If you elect not to use [UnityWebRequest.disposeDownloadHandlerOnDispose] (by setting it to false), then you must call Dispose on the [DownloadHandler] yourself. This should only be in rare cases, such as when you wish to save the data in the [DownloadHandler]'s internal buffer(s) for later processing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormDataSection.contentType">
      <summary>
        <para>string The <c>Content-Type</c> header for this section, or <c>null</c>.</para>
        <para>Returns the value to use in this section's <c>Content-Type</c> header.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormDataSection.fileName">
      <summary>
        <para>string The desired file name of this section, or <c>null</c> if this is not a file section.</para>
        <para>Returns a string denoting the desired filename of this section on the destination server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormDataSection.sectionData">
      <summary>
        <para>byte[] The raw binary data contained in this section. Will not be null or empty.</para>
        <para>Returns the raw binary data contained in this section. Will not return null or a zero-length array.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormDataSection.sectionName">
      <summary>
        <para>string The section's name, or <c>null</c>.</para>
        <para>Returns the name of this section, if any.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormFileSection.contentType">
      <summary>
        <para>string The <c>Content-Type</c> header for this section, or <c>null</c>.</para>
        <para>Returns the value of the section's <c>Content-Type</c> header.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormFileSection.fileName">
      <summary>
        <para>string The desired file name of this section, or <c>null</c> if this is not a file section.</para>
        <para>Returns a string denoting the desired filename of this section on the destination server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormFileSection.sectionData">
      <summary>
        <para>byte[] The raw binary data contained in this section. Will not be null or empty.</para>
        <para>Returns the raw binary data contained in this section. Will not return null or a zero-length array.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.MultipartFormFileSection.sectionName">
      <summary>
        <para>string The section's name, or <c>null</c>.</para>
        <para>Returns the name of this section, if any.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbCREATE">
      <summary>The string "CREATE", commonly used as the verb for an HTTP CREATE request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbDELETE">
      <summary>The string "DELETE", commonly used as the verb for an HTTP DELETE request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbGET">
      <summary>The string "GET", commonly used as the verb for an HTTP GET request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbHEAD">
      <summary>The string "HEAD", commonly used as the verb for an HTTP HEAD request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbPOST">
      <summary>The string "POST", commonly used as the verb for an HTTP POST request.</summary>
    </member>
    <member name="P:UnityEngine.Networking.UploadHandler.contentType">
      <summary>
        <para>Determines the default <c>Content-Type</c> header which will be transmitted with the outbound HTTP request.</para>
        <para>If the parent <see cref="UnityEngine.Networking.UnityWebRequest"></see> does not have a custom <c>Content-Type</c> header set, then the value of this property will be used to determine the value of the <c>Content-Type</c> header for the HTTP request. <c>Note:</c> If the parent <see cref="UnityEngine.Networking.UnityWebRequest"></see> has a custom <c>Content-Type</c> header set, then the value of this property is ignored. If this property is <c>null</c> or an empty string, and the parent <see cref="UnityEngine.Networking.UnityWebRequest"></see> has no custom <c>Content-Type</c> header, then a default <c>Content-Type</c> will be assigned (usually <c>application/octet-stream</c>). <c>Default value:</c><c>null</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UploadHandler.data">
      <summary>The raw data which will be transmitted to the remote server as body data. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.Networking.UploadHandler.progress">
      <summary>
        <para>Returns the proportion of data uploaded to the remote server compared to the total amount of data to upload. (Read Only)</para>
        <para>Behaves identically to <see cref="UnityEngine.Networking.UnityWebRequest.uploadProgress"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.UploadHandler.Dispose">
      <summary>
        <para>Signals that this [UploadHandler] is no longer being used, and should clean up any resources it is using.</para>
        <para>This method must be called once you have finished using an [UploadHandler] object. For convenience, [UnityWebRequest] exposes the [UnityWebRequest.disposeUploadHandlerOnDispose] property, which will automatically call this method when [UnityWebRequest.Dispose] is called. If you elect not to use [UnityWebRequest.disposeUploadHandlerOnDispose] (by setting it to false), then you must call Dispose on the [UploadHandler] yourself. This should only be in rare cases, such as when you wish to use the [UploadHandler] to transmit the same data multiple times.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequestAsyncOperation.webRequest">
      <summary>Returns the associated <see cref="UnityEngine.Networking.UnityWebRequest"></see> that created the operation.</summary>
    </member>
    <member name="P:UnityEngine.Networking.IMultipartFormSection.contentType">
      <summary>
        <para>string The value to use in the <c>Content-Type</c> header, or <c>null</c>.</para>
        <para>Returns the value to use in the <c>Content-Type</c> header for this form section.</para>
        <para>If this property returns a non-null, non-empty string, then the returned string will be set as the <c>Content-Type</c> of this form section. If this property returns null or an empty string, then the <c>Content-Type</c> header will be omitted from this form section. How the server will handle this data is left up to the individual server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.IMultipartFormSection.fileName">
      <summary>
        <para>string The desired file name of this section, or <c>null</c> if this is not a file section.</para>
        <para>Returns a string denoting the desired filename of this section on the destination server.</para>
        <para>If this property returns a non-null string, then this is assumed to be a file section, and the file's name will be defined by the returned string. If you do not wish your section to be a file section, simply return <c>null</c> from this property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.IMultipartFormSection.sectionData">
      <summary>
        <para>byte[] The raw binary data contained in this section. Must not be null or empty.</para>
        <para>Returns the raw binary data contained in this section. Must not return null or a zero-length array.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.IMultipartFormSection.sectionName">
      <summary>
        <para>string The section's name, or <c>null</c>.</para>
        <para>Returns the name of this section, if any.</para>
        <para>Returns the name of this section; this is equivalent to the name of the form field which this section represents. In HTML terms, it is the name attribute on the input element represented by this form section. If this property returns null, the section is assumed to be unnamed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.UnityWebRequest.kHttpVerbPUT">
      <summary>The string "PUT", commonly used as the verb for an HTTP PUT request.</summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.chunkedTransfer">
      <summary>
        <para>Indicates whether the UnityWebRequest system should employ the HTTP/1.1 chunked-transfer encoding method.</para>
        <para>This property indicates whether the <see cref="UnityEngine.Networking.UnityWebRequest"></see> should employ the HTTP/1.1 chunked-transfer encoding method, which allows the system to send partial data and be prompted by the server for more data with a 100/Continue HTTP response. This property cannot be changed after calling <c>Send</c>. In general, this property should usually be set to <c>true</c>, as it can conserve bandwidth when sending large amounts of data to the server. This setting has no impact on requests with do not transmit data to the server, such as <c>GET</c> requests. <c>Note:</c> On WebGL build targets, this setting is ignored. Instead, the web browser handles protocol negotiations. <c>Default value:</c><c>true</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.disposeDownloadHandlerOnDispose">
      <summary>
        <para>If true, any <see cref="UnityEngine.Networking.DownloadHandler"></see> attached to this <see cref="UnityEngine.Networking.UnityWebRequest"></see> will have <see cref="UnityEngine.Networking.DownloadHandlerBuffer.Dispose"></see> called automatically when <see cref="UnityEngine.Networking.UnityWebRequest.Dispose"></see> is called.</para>
        <para>Default: true. If no <see cref="UnityEngine.Networking.DownloadHandler"></see> is attached to this <see cref="UnityEngine.Networking.UnityWebRequest"></see>, this property has no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.disposeUploadHandlerOnDispose">
      <summary>
        <para>If true, any <see cref="UnityEngine.Networking.UploadHandler"></see> attached to this <see cref="UnityEngine.Networking.UnityWebRequest"></see> will have <see cref="UnityEngine.Networking.UploadHandler.Dispose"></see> called automatically when <see cref="UnityEngine.Networking.UnityWebRequest.Dispose"></see> is called.</para>
        <para>Default: true. If no <see cref="UnityEngine.Networking.UploadHandler"></see> is attached to this <see cref="UnityEngine.Networking.UnityWebRequest"></see>, this property has no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.downloadedBytes">
      <summary>
        <para>Returns the number of bytes of body data the system has downloaded from the remote server. (Read Only)</para>
        <para>If the UnityWebRequest has no download handler, this method will always return zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.downloadHandler">
      <summary>
        <para>Holds a reference to a <see cref="UnityEngine.Networking.DownloadHandler"></see> object, which manages body data received from the remote server by this <see cref="UnityEngine.Networking.UnityWebRequest"></see>.</para>
        <para>Setting this property to <c>null</c> indicates that this <see cref="UnityEngine.Networking.UnityWebRequest"></see> does not care about the response’s body data; all received body data will be ignored and discarded. This property cannot be changed after calling <c>Send</c>. <c>Default value:</c><c>null</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.downloadProgress">
      <summary>
        <para>Returns a floating-point value between 0.0 and 1.0, indicating the progress of downloading body data from the server. (Read Only)</para>
        <para>
          <c>Note:</c> This property only works if the server’s response contains a Content-Length header and the <see cref="UnityEngine.Networking.UnityWebRequest"></see> has a <see cref="UnityEngine.Networking.DownloadHandler"></see> attached to the <see cref="UnityEngine.Networking.UnityWebRequest.downloadHandler"></see> property. If the <see cref="UnityEngine.Networking.UnityWebRequest"></see> is complete (either a success or a system error), this property will always return 1. If the <see cref="UnityEngine.Networking.UnityWebRequest"></see> is still communicating with the remote server, and <see cref="UnityEngine.Networking.UnityWebRequest.downloadHandler"></see> is <c>null</c>, this property will return 0.5. If <c>Send</c> has not yet been called, this property will return -1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.error">
      <summary>
        <para>A human-readable string describing any system errors encountered by this <see cref="UnityEngine.Networking.UnityWebRequest"></see> object while handling HTTP requests or responses. (Read Only)</para>
        <para>If the <see cref="UnityEngine.Networking.UnityWebRequest"></see> has not encountered a system error, this property will return <c>null</c>. Examples of system errors include socket errors, errors resolving DNS entries, or the redirect limit being exceeded. <c>Note:</c> Error-type return codes from the server, such as 404/File Not Found or 500/Internal Server Error are not considered system errors. <c>Default value:</c><c>null</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.isDone">
      <summary>
        <para>Returns <c>true</c> after the <see cref="UnityEngine.Networking.UnityWebRequest"></see> has finished communicating with the remote server. (Read Only)</para>
        <para>This property will return <c>true</c> both when the <see cref="UnityEngine.Networking.UnityWebRequest"></see> finishes successfully, or when it encounters a system error. All post-download processing by the <see cref="UnityEngine.Networking.DownloadHandler"></see> (if any) will be completed before this property returns <c>true</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.isHttpError">
      <summary>
        <para>Returns <c>true</c> after this <see cref="UnityEngine.Networking.UnityWebRequest"></see> receives an HTTP response code indicating an error. (Read Only)</para>
        <para>True on response codes greater than or equal to 400.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.isModifiable">
      <summary>
        <para>Returns <c>true</c> while a <see cref="UnityEngine.Networking.UnityWebRequest"></see>’s configuration properties can be altered. (Read Only)</para>
        <para>Examples of configuration properties include <see cref="UnityEngine.Networking.UnityWebRequest.downloadHandler"></see>, <see cref="UnityEngine.Networking.UnityWebRequest.method"></see> and <see cref="UnityEngine.Networking.UnityWebRequest.url"></see>. This property will return <c>false</c> after a call to <c>Send</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.isNetworkError">
      <summary>
        <para>Returns <c>true</c> after this <see cref="UnityEngine.Networking.UnityWebRequest"></see> encounters a system error. (Read Only)</para>
        <para>Examples of system errors include failure to resolve a DNS entry, a socket error or a redirect limit being exceeded. When this property returns <c>true</c>, the <see cref="UnityEngine.Networking.UnityWebRequest.error"></see> property will contain a human-readable string describing the error. <c>Note:</c> Error-type server return codes, such as 404/Not Found and 500/Internal Server Error, are reflected in the <see cref="UnityEngine.Networking.UnityWebRequest.isHttpError"></see> property, not the <see cref="UnityEngine.Networking.UnityWebRequest.isNetworkError"></see> property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.method">
      <summary>
        <para>Defines the HTTP verb used by this <see cref="UnityEngine.Networking.UnityWebRequest"></see>, such as <c>GET</c> or <c>POST</c>.</para>
        <para>This property may be set to any non-zero-length alphabetic string, and will be used verbatim. Therefore, this property can be employed to set the UnityWebRequest to transmit any custom HTTP verb required by an application. This property cannot be changed after calling <c>Send</c>. <c>Note:</c> This method will always return strings in UPPERCASE. When setting the verb, the input value will automatically be converted to UPPERCASE. <c>Default value:</c><c>GET</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.redirectLimit">
      <summary>
        <para>Indicates the number of redirects which this <see cref="UnityEngine.Networking.UnityWebRequest"></see> will follow before halting with a “Redirect Limit Exceeded” system error.</para>
        <para>If you wish to disable redirects altogether, set this property to zero - this UnityWebRequest will then refuse to follow redirects. If a redirect is encountered while redirects are disabled, the request will halt with a “Redirect Limit Exceeded” system error. If you do not wish to limit the number of redirects, you may set this property to any negative number. This is not recommended. If the redirect limit is disabled and the UnityWebRequest encounters a redirect loop, the UnityWebRequest will consume processor time until <see cref="UnityEngine.Networking.UnityWebRequest.Abort"></see> is called. <c>Default value:</c><c>32</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.responseCode">
      <summary>
        <para>The numeric HTTP response code returned by the server, such as <c>200</c>, <c>404</c> or <c>500</c>. (Read Only)</para>
        <para>If the UnityWebRequest has received multiple responses (due to redirects), then this property will return the response code of the newest (or final) HTTP response. If the UnityWebRequest has not yet processed a response, this property will return -1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.timeout">
      <summary>
        <para>Sets UnityWebRequest to attempt to abort after the number of seconds in <c>timeout</c> have passed.</para>
        <para>
          <see cref="UnityEngine.Networking.UnityWebRequest.error">
          </see> returns "Request timeout" when a timeout occurs. No timeout is applied when <c>timeout</c> is set to <c>0</c> and this property defaults to <c>0</c>. Note: The set timeout may apply to each URL redirect on Android which can result in a longer response.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.uploadedBytes">
      <summary>
        <para>Returns the number of bytes of body data the system has uploaded to the remote server. (Read Only)</para>
        <para>If this UnityWebRequest has no upload handler, this property will always return zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.uploadHandler">
      <summary>
        <para>Holds a reference to the <see cref="UnityEngine.Networking.UploadHandler"></see> object which manages body data to be uploaded to the remote server.</para>
        <para>Setting this property to <c>null</c> indicates that this <see cref="UnityEngine.Networking.UnityWebRequest"></see> has no body data to upload. This property cannot be set after calling <c>Send</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.uploadProgress">
      <summary>
        <para>Returns a floating-point value between 0.0 and 1.0, indicating the progress of uploading body data to the server.</para>
        <para>If the <see cref="UnityEngine.Networking.UnityWebRequest"></see> is complete (either a success or a system error), this property will always return 1. If the <see cref="UnityEngine.Networking.UnityWebRequest"></see> is still communicating with the remote server, and <see cref="UnityEngine.Networking.UnityWebRequest.uploadHandler"></see> is <c>null</c>, this property will return zero. If <c>Send</c> has not yet been called, this property will return -1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.url">
      <summary>
        <para>Defines the target URL for the <see cref="UnityEngine.Networking.UnityWebRequest"></see> to communicate with.</para>
        <para>This property cannot be set after calling <c>Send</c>. If the <see cref="UnityEngine.Networking.UnityWebRequest"></see> encounters and follows redirects, this property will be updated with the URL to which the <see cref="UnityEngine.Networking.UnityWebRequest"></see> was redirected. When inputting URLs, absolute URLs are preferred. However, if you input a partial URL, the system will follow these rules: If the input URL starts with two slashes (//), then the input is assumed to be a domain and path intended for use over HTTP. On non-WebGL platforms, the system will prepend <c>http:</c>. On WebGL, the system will inherit the scheme of the path by which the Unity WebGL application is being accessed. Examples: If the WebGL app is being accessed via https, the system will prepend <c>https:</c>. If the WebGL app is being accessed via http, the system will prepend <c>http:</c>. If the input URL starts with a single slash (/), then the system assumes the inout is a path relative to the current domain on which the Unity application is running. On non-WebGL platforms, the system will prepend <c>http://localhost</c> to the URL. On WebGL, the system will prepend the scheme and host of the path by which the Unity WebGL application is being accessed. For example, if the Unity WebGL app is being accessed via <c>http://unity3d.com/myapp</c>, then the system will prepend <c>http://unity3d.com</c> to relative paths. If neither of the above rules apply, the system validates your input string via the built-in <c>System.Uri</c> class. If this class throws a <c>URIFormatException</c>, the system attempts to append the input string to the absolute URL by which the Unity app is being accessed. (see above) Any further exceptions will be re-thrown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.UnityWebRequest.useHttpContinue">
      <summary>
        <para>Determines whether this UnityWebRequest will include <c>Expect: 100-Continue</c> in its outgoing request headers. (Default: <c>true</c>).</para>
        <para>If this property is set to <c>true</c>, then this UnityWebRequest will include an <c>Expect: 100-Continue</c> header in the initial outbound request. If set to <c>false</c>, an empty <c>Expect</c> header will be sent, which will suppress usage of the <c>100 Continue</c> response code. As detailed in <see href="rfc2616-sec8" cref="RFC 2616, Section 8"></see>, the <c>100 Continue</c> response code is intended to allow a remote server to decide whether or not it will accept a request based on a request's headers, prior to the client transmitting the full request body. This is useful in cases where the client need not transmit its full request to every server in a request/response chain, such as in a load-balanced application. For example, a client would present its request, with a <c>Expect: 100-Continue</c> header, to a load-balancing server. The load-balancing server would then respond with a redirect to a processing server. Next, the client would connect to the processing server and transmit the same request, again with a <c>Expect: 100-Continue</c> server. The processing server would then respond with a <c>100 Continue</c> HTTP status code, and the client would finally respond with the full body of its request. By using the <c>100 Continue</c> status code, the client only had to transmit the full body of its request to one server. If not using the <c>100 Continue</c> status code, the client must transmit the full body of its request to every server it communicates with, needlessly consuming bandwidth and processing time on both the client and any servers issuing redirects. In general, one should leave <c>100 Continue</c> enabled. Exceptions include requests which have a very small or no request body, or applications where the client knows the server will not issue a redirect. This property defaults to <c>true</c>. Note: On WebGL build targets, header negotiation is performed by the host browser. Therefore, this setting's value has no effect on WebGL builds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Abort">
      <summary>
        <para>If in progress, halts the UnityWebRequest as soon as possible.</para>
        <para>This method may be called at any time. If the UnityWebRequest has not already completed, the UnityWebRequest will halt uploading or downloading data as soon as possible. Aborted UnityWebRequests are considered to have encountered a system error. Either the <see cref="UnityEngine.Networking.UnityWebRequest.isNetworkError"></see> or the <see cref="UnityEngine.Networking.UnityWebRequest.isHttpError"></see> property will return <c>true</c> and the <see cref="UnityEngine.Networking.UnityWebRequest.error"></see> property will be <c>"User Aborted"</c>. If this method is called prior to calling <c>Send</c>, then the UnityWebRequest will abort immediately after the call to <c>Send</c>. Calls to this method have no effect after this UnityWebRequest has encountered a different error, or has successfully finished communicating with the remote server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Dispose">
      <summary>
        <para>Signals that this [UnityWebRequest] is no longer being used, and should clean up any resources it is using.</para>
        <para>You must call Dispose once you have finished using a [UnityWebRequest] object, regardless of whether the request succeeded or failed. For safety, it is usually a best practice to employ the <see href="yh598w02" cref="using statement"></see> to ensure that a [UnityWebRequest] is properly cleaned up in case of uncaught exceptions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetRequestHeader(System.String)">
      <summary>
        <para>Retrieves the value of a custom request header.</para>
        <para>This method retrieves the value of custom (i.e. user-set) request headers. These are the headers which will be transmitted <c>to</c> the remote server as part of the HTTP request.</para>
      </summary>
      <param name="name">Name of the custom request header. Case-insensitive.</param>
      <returns>The value of the custom request header. If no custom header with a matching name has been set, returns an empty string.</returns>
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.SetRequestHeader(System.String,System.String)">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetResponseHeader(System.String)">
      <summary>
        <para>Retrieves the value of a response header from the latest HTTP response received.</para>
        <para>In the case that this UnityWebRequest has received multiple responses (such as during redirects), only headers from the newest (or final) response are checked.</para>
      </summary>
      <param name="name">The name of the HTTP header to retrieve. Case-insensitive.</param>
      <returns>The value of the HTTP header from the latest HTTP response. If no header with a matching name has been received, or no responses have been received, returns <c>null</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetResponseHeaders">
      <summary>
        <para>Retrieves a dictionary containing all the response headers received by this UnityWebRequest in the latest HTTP response.</para>
        <para>In the case that the UnityWebRequest has received multiple responses (such as during redirects), only headers from the latest/final response will be included. <c>Note:</c> This method allocates a new Dictionary object each time it is called. You may wish to cache the return value from this call if you are retrieving it multiple times.</para>
      </summary>
      <returns>A dictionary containing all the response headers received in the latest HTTP response. If no responses have been received, returns <c>null</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.SendWebRequest">
      <summary>Begin communicating with the remote server. After calling this method, the UnityWebRequest will perform DNS resolution (if necessary), transmit an HTTP request to the remote server at the target URL and process the server’s response. This method can only be called once on any given UnityWebRequest object. Once this method is called, you cannot change any of the UnityWebRequest’s properties. This method returns a WebRequestAsyncOperation object. Yielding the WebRequestAsyncOperation inside a coroutine will cause the coroutine to pause until the UnityWebRequest encounters a system error or finishes communicating.</summary>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.SetRequestHeader(System.String,System.String)">
      <summary>
        <para>Set a HTTP request header to a custom value.</para>
        <para>Header keys and values must be valid according to RFC 2616. Neither string may contain certain illegal characters, such as control characters. Both strings must be non-null and contain a minimum of 1 character. This method cannot be called after <c>Send</c> has been called. These headers cannot be set with custom values on any platform: <c>accept-charset</c>, <c>access-control-request-headers</c>, <c>access-control-request-method</c>, <c>connection</c>, <c>date</c>, <c>dnt</c>, <c>expect</c>, <c>host</c>, <c>keep-alive</c>, <c>origin</c>, <c>referer</c>, <c>te</c>, <c>trailer</c>, <c>transfer-encoding</c>, <c>upgrade</c>, <c>via</c>. It is possible to set a custom value for the <c>accept-encoding</c> header but the resulting behavior is unreliable so it is strongly recommended to let it be automatically handled unless you can accept the risk of unexpected results. The <c>content-length</c> header will be automatically populated based on the contents of the attached <see cref="UnityEngine.Networking.DownloadHandler"></see>, if any, and cannot be set to a custom value. The <c>x-unity-version</c> header is automatically set by Unity and may not be set to custom value. The <c>user-agent</c> header is automatically set by Unity and it is not recommended to set it to custom value. In addition to the above, the following headers are filled by the web browser on the WebGL platform, and therefore may not have custom values set: <c>cookie</c>, <c>cookie2</c>, <c>user-agent</c>.</para>
      </summary>
      <param name="name">The key of the header to be set. Case-sensitive.</param>
      <param name="value">The header's intended value.</param>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Delete(System.String)">
      <summary>
        <para>Creates a UnityWebRequest configured for HTTP <c>DELETE</c>.</para>
        <para>This method creates a UnityWebRequest, sets the verb to <c>DELETE</c> and sets the target URL to the string argument <c>uri</c>. It sets no custom flags or headers. This method attaches no <see cref="UnityEngine.Networking.DownloadHandler"></see> or <see cref="UnityEngine.Networking.UploadHandler"></see> to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>.</para>
      </summary>
      <param name="uri">The URI to which a <c>DELETE</c> request should be sent.</param>
      <returns>A UnityWebRequest configured to send an HTTP <c>DELETE</c> request.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.EscapeURL(System.String)">
      <summary>
        <para>Escapes characters in a string to ensure they are URL-friendly.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. It is recommended that you use this function on any text supplied by a user before passing the text as a URL parameter. This will ensure that a malicious user can't manipulate the contents of the URL to attack the webserver.</para>
      </summary>
      <param name="s">A string with characters to be escaped.</param>
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.UnEscapeURL(System.String)">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.EscapeURL(System.String,System.Text.Encoding)">
      <summary>
        <para>Escapes characters in a string to ensure they are URL-friendly.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. It is recommended that you use this function on any text supplied by a user before passing the text as a URL parameter. This will ensure that a malicious user can't manipulate the contents of the URL to attack the webserver.</para>
      </summary>
      <param name="s">A string with characters to be escaped.</param>
      <param name="e">The text encoding to use.</param>
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.UnEscapeURL(System.String)">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GenerateBoundary">
      <summary>Generate a random 40-byte array for use as a multipart form boundary.</summary>
      <returns>40 random bytes, guaranteed to contain only printable ASCII values.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Get(System.String)">
      <summary>
        <para>Creates a UnityWebRequest configured for HTTP GET.</para>
        <para>This method creates a UnityWebRequest and sets the target URL to the string argument <c>uri</c>. It sets no custom flags or headers. This method attaches a standard <see cref="UnityEngine.Networking.DownloadHandlerBuffer"></see> to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>. This handler will buffer the data received from the server and make it available to script when this request is complete. This method attaches no <see cref="UnityEngine.Networking.UploadHandler"></see> to the UnityWebRequest.</para>
      </summary>
      <param name="uri">The URI of the resource to retrieve via HTTP GET.</param>
      <returns>A UnityWebRequest object configured to retrieve data from <c>uri</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetAssetBundle(System.String,System.UInt32)">
      <summary>
        <para>Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.</para>
        <para>This method creates a UnityWebRequest, sets the method to <c>GET</c> and sets the target URL to the string <c>uri</c> argument. Sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>. This <see cref="UnityEngine.Networking.DownloadHandler"></see> has a special <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle"></see> property, which can be used to extract the asset bundle once enough data has been downloaded and decoded to permit access to the resources inside the bundle. In addition, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> streams data into a ringbuffer and decompresses the data on a worker thread, saving many memory allocations compared to downloading the data all at once. If supplied with an integer <c>version</c> or Hash128 <c>hash</c> argument, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> will employ the Asset Bundle caching system. If an Asset Bundle has been cached and does not need to be redownloaded, then the <see cref="UnityEngine.Networking.UnityWebRequest"></see> will complete once the Asset Bundle has finished loading from the cache. Cached AssetBundles are uniquely identified solely by the filename and version. All domain and path information in <c>url</c> is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. Usually using the filename of the AssetBundle to generate the cache path is fine. But if there are different AssetBundles with the same last file name, cache conflicts happens. With CachedAssetBundle struct, you can use CachedAssetBundle.name to customized the cache path to avoid the cache conflicts. You can also utilize this to organize the cache data structure. Note, that while you can use this API to load Asset Bundle from local storage (using file:// URI or jar:file// on Android), this is not recommended, use <see cref="UnityEngine.AssetBundle.LoadFromFileAsync"></see> instead.</para>
      </summary>
      <param name="uri">The URI of the asset bundle to download.</param>
      <param name="crc">If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.</param>
      <returns>A UnityWebRequest configured to downloading a Unity Asset Bundle.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetAssetBundle(System.String,System.UInt32,System.UInt32)">
      <summary>
        <para>Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.</para>
        <para>This method creates a UnityWebRequest, sets the method to <c>GET</c> and sets the target URL to the string <c>uri</c> argument. Sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>. This <see cref="UnityEngine.Networking.DownloadHandler"></see> has a special <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle"></see> property, which can be used to extract the asset bundle once enough data has been downloaded and decoded to permit access to the resources inside the bundle. In addition, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> streams data into a ringbuffer and decompresses the data on a worker thread, saving many memory allocations compared to downloading the data all at once. If supplied with an integer <c>version</c> or Hash128 <c>hash</c> argument, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> will employ the Asset Bundle caching system. If an Asset Bundle has been cached and does not need to be redownloaded, then the <see cref="UnityEngine.Networking.UnityWebRequest"></see> will complete once the Asset Bundle has finished loading from the cache. Cached AssetBundles are uniquely identified solely by the filename and version. All domain and path information in <c>url</c> is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. Usually using the filename of the AssetBundle to generate the cache path is fine. But if there are different AssetBundles with the same last file name, cache conflicts happens. With CachedAssetBundle struct, you can use CachedAssetBundle.name to customized the cache path to avoid the cache conflicts. You can also utilize this to organize the cache data structure. Note, that while you can use this API to load Asset Bundle from local storage (using file:// URI or jar:file// on Android), this is not recommended, use <see cref="UnityEngine.AssetBundle.LoadFromFileAsync"></see> instead.</para>
      </summary>
      <param name="uri">The URI of the asset bundle to download.</param>
      <param name="version">An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle. Analogous to the <c>version</c> parameter for <see cref="UnityEngine.WWW.LoadFromCacheOrDownload"></see>.</param>
      <param name="crc">If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.</param>
      <returns>A UnityWebRequest configured to downloading a Unity Asset Bundle.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetAssetBundle(System.String,UnityEngine.Hash128,System.UInt32)">
      <summary>
        <para>Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.</para>
        <para>This method creates a UnityWebRequest, sets the method to <c>GET</c> and sets the target URL to the string <c>uri</c> argument. Sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>. This <see cref="UnityEngine.Networking.DownloadHandler"></see> has a special <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle"></see> property, which can be used to extract the asset bundle once enough data has been downloaded and decoded to permit access to the resources inside the bundle. In addition, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> streams data into a ringbuffer and decompresses the data on a worker thread, saving many memory allocations compared to downloading the data all at once. If supplied with an integer <c>version</c> or Hash128 <c>hash</c> argument, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> will employ the Asset Bundle caching system. If an Asset Bundle has been cached and does not need to be redownloaded, then the <see cref="UnityEngine.Networking.UnityWebRequest"></see> will complete once the Asset Bundle has finished loading from the cache. Cached AssetBundles are uniquely identified solely by the filename and version. All domain and path information in <c>url</c> is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. Usually using the filename of the AssetBundle to generate the cache path is fine. But if there are different AssetBundles with the same last file name, cache conflicts happens. With CachedAssetBundle struct, you can use CachedAssetBundle.name to customized the cache path to avoid the cache conflicts. You can also utilize this to organize the cache data structure. Note, that while you can use this API to load Asset Bundle from local storage (using file:// URI or jar:file// on Android), this is not recommended, use <see cref="UnityEngine.AssetBundle.LoadFromFileAsync"></see> instead.</para>
      </summary>
      <param name="uri">The URI of the asset bundle to download.</param>
      <param name="hash">A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.</param>
      <param name="crc">If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.</param>
      <returns>A UnityWebRequest configured to downloading a Unity Asset Bundle.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.GetAssetBundle(System.String,UnityEngine.CachedAssetBundle,System.UInt32)">
      <summary>
        <para>Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.</para>
        <para>This method creates a UnityWebRequest, sets the method to <c>GET</c> and sets the target URL to the string <c>uri</c> argument. Sets no other flags or custom headers. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>. This <see cref="UnityEngine.Networking.DownloadHandler"></see> has a special <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle.assetBundle"></see> property, which can be used to extract the asset bundle once enough data has been downloaded and decoded to permit access to the resources inside the bundle. In addition, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> streams data into a ringbuffer and decompresses the data on a worker thread, saving many memory allocations compared to downloading the data all at once. If supplied with an integer <c>version</c> or Hash128 <c>hash</c> argument, the <see cref="UnityEngine.Networking.DownloadHandlerAssetBundle"></see> will employ the Asset Bundle caching system. If an Asset Bundle has been cached and does not need to be redownloaded, then the <see cref="UnityEngine.Networking.UnityWebRequest"></see> will complete once the Asset Bundle has finished loading from the cache. Cached AssetBundles are uniquely identified solely by the filename and version. All domain and path information in <c>url</c> is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. Usually using the filename of the AssetBundle to generate the cache path is fine. But if there are different AssetBundles with the same last file name, cache conflicts happens. With CachedAssetBundle struct, you can use CachedAssetBundle.name to customized the cache path to avoid the cache conflicts. You can also utilize this to organize the cache data structure. Note, that while you can use this API to load Asset Bundle from local storage (using file:// URI or jar:file// on Android), this is not recommended, use <see cref="UnityEngine.AssetBundle.LoadFromFileAsync"></see> instead.</para>
      </summary>
      <param name="uri">The URI of the asset bundle to download.</param>
      <param name="cachedAssetBundle">A structure used to download a given version of AssetBundle to a customized cache path.</param>
      <param name="crc">If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.</param>
      <returns>A UnityWebRequest configured to downloading a Unity Asset Bundle.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Head(System.String)">
      <summary>
        <para>Creates a UnityWebRequest configured to send a HTTP <c>HEAD</c> request.</para>
        <para>This method creates a UnityWebRequest, sets the verb to <c>HEAD</c> and sets the target URL to the string argument <c>uri</c>. It sets no custom flags or headers. This method attaches no <see cref="UnityEngine.Networking.DownloadHandler"></see> or <see cref="UnityEngine.Networking.UploadHandler"></see> to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>.</para>
      </summary>
      <param name="uri">The URI to which to send a HTTP <c>HEAD</c> request.</param>
      <returns>A UnityWebRequest configured to transmit a HTTP <c>HEAD</c> request.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Post(System.String,System.String)">
      <summary>
        <para>Create a UnityWebRequest configured to send form data to a server via HTTP <c>POST</c>.</para>
        <para>This method creates a UnityWebRequest, sets the <c>url</c> to the string <c>uri</c> argument and sets the <c>method</c> to <c>POST</c>. The <c>Content-Type</c> header will be set to <c>application/x-www-form-urlencoded</c> by default. Note: Many server backend languages do not properly handle <c>POST</c> requests with <c>Content-Type</c> headers set to encoding others than <c>application/x-www-form-urlencoded</c> or <c>multipart/form-data</c>. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerBuffer"></see> to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>. This is for convenience, as we anticipate most users will use the <see cref="UnityEngine.Networking.DownloadHandler"></see> to check replies from the server, particularly in the case of REST APIs. The data in <c>postData</c> will be escaped, then interpreted into a byte stream via <c>System.Text.Encoding.UTF8</c>. The resulting byte stream will be stored in an <see cref="UnityEngine.Networking.UploadHandlerRaw"></see> and the Upload Handler will be attached to this UnityWebRequest.</para>
      </summary>
      <param name="uri">The target URI to which form data will be transmitted.</param>
      <param name="postData">Form body data. Will be URLEncoded prior to transmission.</param>
      <returns>A UnityWebRequest configured to send form data to <c>uri</c> via <c>POST</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Post(System.String,UnityEngine.WWWForm)">
      <summary>
        <para>Create a UnityWebRequest configured to send form data to a server via HTTP <c>POST</c>.</para>
        <para>This method creates a UnityWebRequest, sets the <c>url</c> to the string <c>uri</c> argument and sets the <c>method</c> to <c>POST</c>. The <c>Content-Type</c> header will be copied from the <c>formData</c> parameter. This method attaches a <see cref="UnityEngine.Networking.DownloadHandlerBuffer"></see> to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>. This is for convenience, as we anticipate most users will use the <see cref="UnityEngine.Networking.DownloadHandler"></see> to check replies from the server, particularly in the case of REST APIs. The <c>formData</c> object will generate an appropriately-formatted byte stream, depending on its contents. The resulting byte stream will be stored in an <see cref="UnityEngine.Networking.UploadHandlerRaw"></see> and the Upload Handler will be attached to this UnityWebRequest.</para>
      </summary>
      <param name="uri">The target URI to which form data will be transmitted.</param>
      <param name="formData">Form fields or files encapsulated in a <see cref="UnityEngine.WWWForm"></see> object, for formatting and transmission to the remote server.</param>
      <returns>A UnityWebRequest configured to send form data to <c>uri</c> via <c>POST</c>.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Put(System.String,System.Byte[])">
      <summary>
        <para>Create a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.</para>
        <para>This method creates a UnityWebRequest, sets the target URL to the string <c>uri</c> argument and the <c>method</c> to <c>PUT</c>. It also sets the <c>Content-Type</c> header to <c>application/octet-stream</c>. This method attaches a standard <see cref="UnityEngine.Networking.DownloadHandlerBuffer"></see> to the UnityWebRequest. This is for convenience during development, as well as for applications which return status information regarding the uploaded data in the HTTP response body. This method stores the input upload data in an <see cref="UnityEngine.Networking.UploadHandlerRaw"></see> object and attaches it to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>. <see cref="UnityEngine.Networking.UploadHandlerRaw"></see> copies the input data into a buffer. Therefore, changes to the <c>bodyData</c> array performed after the call to this method will not be reflected in the data sent to the server.</para>
      </summary>
      <param name="uri">The URI to which the data will be sent.</param>
      <param name="bodyData">The data to transmit to the remote server. If a string, the string will be converted to raw bytes via <see href="system.text.encoding" cref="System.Text.Encoding.UTF8"></see>.</param>
      <returns>A UnityWebRequest configured to transmit <c>bodyData</c> to <c>uri</c> via HTTP PUT.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.Put(System.String,System.String)">
      <summary>
        <para>Create a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.</para>
        <para>This method creates a UnityWebRequest, sets the target URL to the string <c>uri</c> argument and the <c>method</c> to <c>PUT</c>. It also sets the <c>Content-Type</c> header to <c>application/octet-stream</c>. This method attaches a standard <see cref="UnityEngine.Networking.DownloadHandlerBuffer"></see> to the UnityWebRequest. This is for convenience during development, as well as for applications which return status information regarding the uploaded data in the HTTP response body. This method stores the input upload data in an <see cref="UnityEngine.Networking.UploadHandlerRaw"></see> object and attaches it to the <see cref="UnityEngine.Networking.UnityWebRequest"></see>. <see cref="UnityEngine.Networking.UploadHandlerRaw"></see> copies the input data into a buffer. Therefore, changes to the <c>bodyData</c> array performed after the call to this method will not be reflected in the data sent to the server.</para>
      </summary>
      <param name="uri">The URI to which the data will be sent.</param>
      <param name="bodyData">The data to transmit to the remote server. If a string, the string will be converted to raw bytes via <see href="system.text.encoding" cref="System.Text.Encoding.UTF8"></see>.</param>
      <returns>A UnityWebRequest configured to transmit <c>bodyData</c> to <c>uri</c> via HTTP PUT.</returns>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.UnEscapeURL(System.String)">
      <summary>
        <para>Converts URL-friendly escape sequences back to normal text.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. This function takes a string containing these escape sequences and converts them back to normal text.</para>
      </summary>
      <param name="s">A string containing escaped characters.</param>
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.EscapeURL(System.String)">
      </seealso>
    </member>
    <member name="M:UnityEngine.Networking.UnityWebRequest.UnEscapeURL(System.String,System.Text.Encoding)">
      <summary>
        <para>Converts URL-friendly escape sequences back to normal text.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. This function takes a string containing these escape sequences and converts them back to normal text.</para>
      </summary>
      <param name="s">A string containing escaped characters.</param>
      <param name="e">The text encoding to use.</param>
      <seealso cref="M:UnityEngine.Networking.UnityWebRequest.EscapeURL(System.String)">
      </seealso>
    </member>
    <member name="P:UnityEngine.WWWForm.data">
      <summary>
        <para>(Read Only) The raw data to pass as the POST request body when sending the form.</para>
        <para>Usually, you just pass the WWWForm object directly to the <see cref="UnityEngine.WWW"></see> constructor, but you will need this variable if you want to change the request headers sent to the web server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWWForm.headers">
      <summary>
        <para>(Read Only) Returns the correct request headers for posting the form using the <see cref="UnityEngine.WWW"></see> class.</para>
        <para>This field only contains one header, /"Content-Type"/, which is set to the correct mime type for the form: "<c>application/x-www-form-urlencoded</c>" for normal forms and "<c>multipart/form-data</c>" for forms containing data added using <see cref="UnityEngine.WWWForm.AddBinaryData"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddBinaryData(System.String,System.Byte[],System.String,System.String)">
      <summary>
        <para>Add binary data to the form.</para>
        <para>Use this function to upload files and images to a web server application. Note that the data is read from the contents of byte array and not from a file. The fileName parameter is for telling the server what filename to use when saving the uploaded file. If <c>mimeType</c> is not given and first 8 bytes of the data match PNG format header, then the data is sent with "<c>image/png</c>" mimetype. Otherwise it is sent with "<c>application/octet-stream</c>" mimetype.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddBinaryData(System.String,System.Byte[],System.String)">
      <summary>
        <para>Add binary data to the form.</para>
        <para>Use this function to upload files and images to a web server application. Note that the data is read from the contents of byte array and not from a file. The fileName parameter is for telling the server what filename to use when saving the uploaded file. If <c>mimeType</c> is not given and first 8 bytes of the data match PNG format header, then the data is sent with "<c>image/png</c>" mimetype. Otherwise it is sent with "<c>application/octet-stream</c>" mimetype.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddBinaryData(System.String,System.Byte[])">
      <summary>
        <para>Add binary data to the form.</para>
        <para>Use this function to upload files and images to a web server application. Note that the data is read from the contents of byte array and not from a file. The fileName parameter is for telling the server what filename to use when saving the uploaded file. If <c>mimeType</c> is not given and first 8 bytes of the data match PNG format header, then the data is sent with "<c>image/png</c>" mimetype. Otherwise it is sent with "<c>application/octet-stream</c>" mimetype.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddField(System.String,System.String)">
      <summary>
        <para>Add a simple field to the form.</para>
        <para>Adds field <c>fieldName</c> with a given string value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddField(System.String,System.String,System.Text.Encoding)">
      <summary>
        <para>Add a simple field to the form.</para>
        <para>Adds field <c>fieldName</c> with a given string value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddField(System.String,System.Int32)">
      <summary>
        <para>Adds a simple field to the form.</para>
        <para>Adds field <c>fieldName</c> with a given integer value. A conveinience for calling AddField(fieldName, i.ToString).</para>
      </summary>
    </member>
  </members>
</doc>