<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.IMGUIModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.GUIUtility">
      <summary>
        <para>Utility class for making new GUI controls.</para>
        <para>Unless you are creating your own GUI controls from scratch, you should not use these functions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventModifiers">
      <summary>Types of modifier key that can be active during a keystroke event.</summary>
    </member>
    <member name="T:UnityEngine.EventType">
      <summary>Types of UnityGUI input and processing events.</summary>
    </member>
    <member name="T:UnityEngine.FocusType">
      <summary>Used by GUIUtility.GetControlID to inform the IMGUI system if a given control can get keyboard focus. This allows the IMGUI system to give focus appropriately when a user presses tab for cycling between controls.</summary>
    </member>
    <member name="T:UnityEngine.Event">
      <summary>
        <para>A UnityGUI event.</para>
        <para>Events correspond to user input (key presses, mouse actions), or are UnityGUI layout or rendering events. For each event <see cref="UnityEngine.UI.Button.MonoBehaviour.OnGUI"></see> is called in the scripts; so OnGUI is potentially called multiple times per frame. <see cref="UnityEngine.Event.current"></see> corresponds to "current" event inside OnGUI call.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUI">
      <summary>The GUI class is the interface for Unity's GUI with manual positioning.</summary>
    </member>
    <member name="T:UnityEngine.GUI.GroupScope">
      <summary>
        <para>Disposable helper class for managing <see cref="UnityEngine.GUI.BeginGroup"></see> / <see cref="UnityEngine.GUI.EndGroup"></see>.</para>
        <para>
          <see cref="UnityEngine.GUI.BeginGroup">
          </see> is called at construction, and <see cref="UnityEngine.GUI.EndGroup"></see> is called when the instance is disposed. When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUI.ScrollViewScope">
      <summary>
        <para>Disposable helper class for managing <see cref="UnityEngine.GUI.BeginScrollView"></see> / <see cref="UnityEngine.GUI.EndScrollView"></see>.</para>
        <para>
          <see cref="UnityEngine.GUI.BeginScrollView">
          </see> is called at construction, and <see cref="UnityEngine.GUI.EndScrollView"></see> is called when the instance is disposed. ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUI.ToolbarButtonSize">
      <summary>Determines how toolbar button size is calculated.</summary>
    </member>
    <member name="T:UnityEngine.GUIContent">
      <summary>
        <para>The contents of a GUI element.</para>
        <para>This works closely in relation with <see cref="UnityEngine.GUIStyle"></see>. GUIContent defines <c>what</c> to render and <see cref="UnityEngine.GUIStyle"></see> defines <c>how</c> to render it.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUILayout">
      <summary>The GUILayout class is the interface for Unity gui with automatic layout.</summary>
    </member>
    <member name="T:UnityEngine.GUILayout.AreaScope">
      <summary>
        <para>Disposable helper class for managing <see cref="UnityEngine.GUILayout.BeginArea"></see> / <see cref="UnityEngine.GUILayout.EndArea"></see>.</para>
        <para>
          <see cref="UnityEngine.GUILayout.BeginArea">
          </see> is called at construction, and <see cref="UnityEngine.GUILayout.EndArea"></see> is called when the instance is disposed. By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. <c>Explained Area of the example.</c></para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUILayout.HorizontalScope">
      <summary>
        <para>Disposable helper class for managing <see cref="UnityEngine.GUILayout.BeginHorizontal"></see> / <see cref="UnityEngine.GUILayout.EndHorizontal"></see>.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal. <c>Horizontal Layout.</c></para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUILayout.ScrollViewScope">
      <summary>
        <para>Disposable helper class for managing <see cref="UnityEngine.GUILayout.BeginScrollView"></see> / <see cref="UnityEngine.GUILayout.EndScrollView"></see>.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView. <c>Scroll View in the Game View..</c></para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUILayout.VerticalScope">
      <summary>
        <para>Disposable helper class for managing <see cref="UnityEngine.GUILayout.BeginVertical"></see> / <see cref="UnityEngine.GUILayout.EndVertical"></see>.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical. <c>Vertical Layout.</c></para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUILayoutOption">
      <summary>Class internally used to pass layout options into <see cref="UnityEngine.GUILayout"></see> functions. You don't use these directly, but construct them with the layouting functions in the <see cref="UnityEngine.GUILayout"></see> class.</summary>
    </member>
    <member name="T:UnityEngine.GUILayoutUtility">
      <summary>
        <para>Utility functions for implementing and extending the GUILayout class.</para>
        <para>Use this class to make your own GUI layouting code.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUISettings">
      <summary>
        <para>General settings for how the GUI behaves.</para>
        <para>These are shared by all elements in a <see cref="UnityEngine.GUISkin"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUISkin">
      <summary>
        <para>Defines how GUI looks and behaves.</para>
        <para>GUISkin contains GUI settings and a collection of <see cref="UnityEngine.GUIStyle"></see> objects that together specify GUI skin. Active GUI skin is get and set through <see cref="UnityEngine.GUI.skin"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUIStyle">
      <summary>
        <para>Styling information for GUI elements.</para>
        <para>Most GUI functions accept an optional GUIStyle parameter to override the default style. This allows coloring, fonts and other details to be changed and switched for different states (eg, when the mouse is hovering over the control). Where a consistent look-and-feel is required over a whole GUI design, the GUISkin class is a useful way to collect a set of GUIStyle settings and apply them all at once.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUIStyleState">
      <summary>
        <para>Specialized values for the given states used by <see cref="UnityEngine.GUIStyle"></see> objects.</para>
        <para>The GUIStyle contains all values for displaying GUI elements.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextClipping">
      <summary>Different methods for how the GUI system handles text being too large to fit the rectangle allocated.</summary>
    </member>
    <member name="T:UnityEngine.GUITargetAttribute">
      <summary>Allows to control for which display the OnGUI is called.</summary>
    </member>
    <member name="T:UnityEngine.ScaleMode">
      <summary>Scaling mode to draw textures with.</summary>
    </member>
    <member name="T:UnityEngine.ImagePosition">
      <summary>How image and text is placed inside <see cref="UnityEngine.GUIStyle"></see>.</summary>
    </member>
    <member name="P:UnityEngine.GUIUtility.hasModalWindow">
      <summary>A global property, which is true if a ModalWindow is being displayed, false otherwise.</summary>
    </member>
    <member name="P:UnityEngine.GUIUtility.hotControl">
      <summary>
        <para>The controlID of the current hot control.</para>
        <para>The hot control is one that is temporarily active. When the user mousedown's on a button, it becomes hot. No other controls are allowed to respond to mouse events while some other control is hot. once the user mouseup's, the control sets <c>hotControl</c> to 0 in order to indicate that other controls can now respond to user input.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIUtility.keyboardControl">
      <summary>The controlID of the control that has keyboard focus.</summary>
    </member>
    <member name="P:UnityEngine.GUIUtility.systemCopyBuffer">
      <summary>
        <para>Get access to the system-wide pasteboard.</para>
        <para>Note: iOS and Android do not support this feature.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.FocusType)">
      <summary>Get a unique ID for a control.</summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.FocusType,UnityEngine.Rect)">
      <summary>Get a unique ID for a control.</summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(System.Int32,UnityEngine.FocusType)">
      <summary>Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.</summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(System.Int32,UnityEngine.FocusType,UnityEngine.Rect)">
      <summary>Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.</summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.GUIContent,UnityEngine.FocusType)">
      <summary>Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.GUIContent,UnityEngine.FocusType,UnityEngine.Rect)">
      <summary>Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetStateObject(System.Type,System.Int32)">
      <summary>
        <para>Get a state object from a controlID.</para>
        <para>This will return a recycled state object that is unique for <c>controlID</c>. If there is no state object then a new one will be created and hooked up to the <c>controlID</c>. On the first call into <see cref="UnityEngine.GUIUtility.GetStateObject"></see> a new state object will be created. The <c>controlID</c> uniquely refers to this object. On subsequent calls the stored object will be returned.</para>
      </summary>
      <seealso cref="M:UnityEngine.GUIUtility.QueryStateObject(System.Type,System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUIUtility.GUIToScreenPoint(UnityEngine.Vector2)">
      <summary>
        <para>Convert a point from GUI position to screen space.</para>
        <para>Note: In Unity the screen space y coordinate varies from zero at the top edge of the window to a maximum at the bottom edge of the window. This is different from what you might expect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.QueryStateObject(System.Type,System.Int32)">
      <summary>
        <para>Get an existing state object from a controlID.</para>
        <para>This will return a recycled state object that is unique for <c>controlID</c>. If the state object has not been created by calling <see cref="UnityEngine.GUIUtility.GetStateObject"></see> then it cannot be accessed using <see cref="UnityEngine.GUIUtility.QueryStateObject"></see>. A call into <see cref="UnityEngine.GUIUtility.QueryStateObject"></see> with the state object not created is invalid. A null may be returned, but is not guaranteed. An exception may happen instead.</para>
      </summary>
      <seealso cref="M:UnityEngine.GUIUtility.GetStateObject(System.Type,System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUIUtility.RotateAroundPivot(System.Single,UnityEngine.Vector2)">
      <summary>
        <para>Helper function to rotate the GUI around a point.</para>
        <para>Modifies GUI.matrix to rotate all GUI elements <c>angle</c> degrees around <c>pivotPoint</c>.</para>
      </summary>
      <seealso cref="M:UnityEngine.GUIUtility.ScaleAroundPivot(UnityEngine.Vector2,UnityEngine.Vector2)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUIUtility.ScaleAroundPivot(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Helper function to scale the GUI around a point.</para>
        <para>Modifies GUI.matrix to rotate all GUI elements <c>angle</c> degrees around <c>pivotPoint</c>.</para>
      </summary>
      <seealso cref="M:UnityEngine.GUIUtility.RotateAroundPivot(System.Single,UnityEngine.Vector2)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUIUtility.ScreenToGUIPoint(UnityEngine.Vector2)">
      <summary>
        <para>Convert a point from screen space to GUI position.</para>
        <para>Used for reconverting values calculated from <see cref="UnityEngine.GUIUtility.GUIToScreenPoint"></see> Note: In Unity the screen space y coordinate varies from zero at the top edge of the window to a maximum at the bottom edge of the window. This is different from what you might expect.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseUp">
      <summary>
        <para>Mouse button was released.</para>
        <para>This event gets sent when any mouse button is released. Use Event.button to determine which button was pressed down.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseMove">
      <summary>
        <para>Mouse was moved (Editor views only).</para>
        <para>The mouse was moved without any buttons being held down. Use Event.mousePosition and Event.delta to determine mouse motion. Note that this event is only sent in the Editor for <see cref="UnityEditor.EditorWindow"></see> windows which have EditorWindow.wantsMouseMove set to true. Mouse move events are never sent in the games.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseDrag">
      <summary>
        <para>Mouse was dragged.</para>
        <para>The mouse was moved with a button held down - a mouse drag. Use Event.mousePosition and Event.delta to determine mouse motion.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.KeyDown">
      <summary>
        <para>A keyboard key was pressed.</para>
        <para>Use Event.character to find out what has been typed. Use Event.keyCode to handle arrow, home/end or other function keys, or to find out which physical key has been pressed. This event is sent repeatedly depending on the end user's keyboard repeat settings. Note that key presses can come as separate events, one with valid Event.keyCode, and another with valid Event.character. In case of keyboard layouts with dead keys, multiple Event.keyCode events can generate a single Event.character event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.KeyUp">
      <summary>
        <para>A keyboard key was released.</para>
        <para>Use Event.keyCode to find which physical key was released. Note that depending on the system and keyboard layout, Event.character might not contain any character for a key release event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.ScrollWheel">
      <summary>
        <para>The scroll wheel was moved.</para>
        <para>Use Event.delta to determine X &amp; Y scrolling amount.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.Repaint">
      <summary>
        <para>A repaint event. One is sent every frame.</para>
        <para>All other events are processed first, then the repaint event is sent.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.Layout">
      <summary>
        <para>A layout event.</para>
        <para>This event is sent prior to anything else - this is a chance to perform any initialization. It is used by the automatic layout system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.DragUpdated">
      <summary>Editor only: drag &amp; drop operation updated.</summary>
    </member>
    <member name="F:UnityEngine.EventType.DragPerform">
      <summary>Editor only: drag &amp; drop operation performed.</summary>
    </member>
    <member name="F:UnityEngine.EventType.DragExited">
      <summary>Editor only: drag &amp; drop operation exited.</summary>
    </member>
    <member name="F:UnityEngine.EventType.Ignore">
      <summary>
        <para>
          <see cref="UnityEngine.Event">
          </see> should be ignored.</para>
        <para>This event is temporarily disabled and should be ignored.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.Used">
      <summary>
        <para>Already processed event.</para>
        <para>This event has been used by some other control and should be ignored.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.ValidateCommand">
      <summary>
        <para>Validates a special command (e.g. copy &amp; paste).</para>
        <para>"Copy", "Cut", "Paste", "Delete", "FrameSelected", "Duplicate", "SelectAll" and so on. Sent only in the editor. Example: Make pasting work in current window or control:</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.ExecuteCommand">
      <summary>
        <para>Execute a special command (eg. copy &amp; paste).</para>
        <para>"Copy", "Cut", "Paste", "Delete", "FrameSelected", "Duplicate", "SelectAll" and so on. Sent only in the editor. Example. Checking that that a frame has the focus:</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.ContextClick">
      <summary>
        <para>User has right-clicked (or control-clicked on the mac).</para>
        <para>Window should show a context menu if applicable. Sent only in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseEnterWindow">
      <summary>
        <para>Mouse entered a window (Editor views only).</para>
        <para>The user hovered the mouse over a window without any buttons being held down. This event is sent once, as the mouse enters the window. Note that this event is only sent in the Editor for <see cref="UnityEditor.EditorWindow"></see> windows which have EditorWindow.wantsMouseEnterLeaveWindow set to true. Mouse enter or leave window events are never sent in the games.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseLeaveWindow">
      <summary>
        <para>Mouse left a window (Editor views only).</para>
        <para>The user moved the mouse out of a window without any buttons being held down. This event is sent once, as the mouse leaves the window. Note that this event is only sent in the Editor for <see cref="UnityEditor.EditorWindow"></see> windows which have EditorWindow.wantsMouseEnterLeaveWindow set to true. Mouse enter or leave window events are never sent in the games.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.None">
      <summary>No modifier key pressed during a keystroke event.</summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Shift">
      <summary>Shift key.</summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Control">
      <summary>Control key.</summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Alt">
      <summary>Alt key.</summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Command">
      <summary>Command key (Mac).</summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Numeric">
      <summary>Num lock key.</summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.CapsLock">
      <summary>Caps lock key.</summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.FunctionKey">
      <summary>Function key.</summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseDown">
      <summary>
        <para>Mouse button was pressed.</para>
        <para>This event gets sent when any mouse button is pressed. Use Event.button to determine which button was pressed down.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FocusType.Keyboard">
      <summary>This control can receive keyboard focus.</summary>
    </member>
    <member name="F:UnityEngine.FocusType.Passive">
      <summary>This control can not receive keyboard focus.</summary>
    </member>
    <member name="P:UnityEngine.Event.current">
      <summary>The current event that's being processed right now.</summary>
    </member>
    <member name="P:UnityEngine.Event.alt">
      <summary>
        <para>Is Alt/Option key held down? (Read Only)</para>
        <para>On Windows, this returns true if any Alt key is held down. On Mac, this returns true if any Option key is held down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.button">
      <summary>
        <para>Which mouse button was pressed.</para>
        <para>0 means left mouse button, 1 means right mouse button, 2 means middle mouse button. Used in <see cref="UnityEngine.EventType.MouseDown"></see> and <see cref="UnityEngine.EventType.MouseUp"></see> events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.capsLock">
      <summary>
        <para>Is Caps Lock on? (Read Only)</para>
        <para>Returns true if Caps Lock is switched on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.character">
      <summary>
        <para>The character typed.</para>
        <para>Used in EventType.KeyDown event. Note that EventType.KeyUp events might not contain a character, only Event.keyCode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.clickCount">
      <summary>
        <para>How many consecutive mouse clicks have we received.</para>
        <para>Used in EventType.MouseDown event; use this to differentiate between a single and double clicks.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.command">
      <summary>
        <para>Is Command/Windows key held down? (Read Only)</para>
        <para>On Windows, this returns true if any Windows key is held down. On Mac, this returns true if any Command key is held down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.commandName">
      <summary>
        <para>The name of an ExecuteCommand or ValidateCommand Event.</para>
        <para>Available commands are: "Copy", "Cut", "Paste", "Delete", "SoftDelete", "Duplicate", "FrameSelected", "FrameSelectedWithLock", "SelectAll", "Find" and "FocusProjectWindow". Sent only in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.control">
      <summary>
        <para>Is Control key held down? (Read Only)</para>
        <para>Returns true if any Control key is held down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.delta">
      <summary>
        <para>The relative movement of the mouse compared to last event.</para>
        <para>Used in EventType.MouseMove, EventType.MouseDrag, EventType.ScrollWheel events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.displayIndex">
      <summary>
        <para>Index of display that the event belongs to.</para>
        <para>Not all platforms support multi-display GUI. On such platforms this property is always zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.functionKey">
      <summary>
        <para>Is the current keypress a function key? (Read Only)</para>
        <para>Returns true if the current keypress is an arrow key, page up, page down, backspace, etc. key. If this key needs special processing in order to work in text editing, <c>functionKey</c> is on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.isKey">
      <summary>Is this event a keyboard event? (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.Event.isMouse">
      <summary>Is this event a mouse event? (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.Event.keyCode">
      <summary>
        <para>The raw key code for keyboard events.</para>
        <para>Used in EventType.KeyDown and EventType.KeyUp events; this returns <see cref="UnityEngine.KeyCode"></see> value that matches the physical keyboard key. Use this for handling cursor keys, function keys etc.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.modifiers">
      <summary>Which modifier keys are held down.</summary>
    </member>
    <member name="P:UnityEngine.Event.mousePosition">
      <summary>
        <para>The mouse position.</para>
        <para>Used in <see cref="UnityEngine.EventType.MouseMove"></see> and <see cref="UnityEngine.EventType.MouseDrag"></see> events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.numeric">
      <summary>
        <para>Is the current keypress on the numeric keyboard? (Read Only)</para>
        <para>Use this flag to destinguish between main &amp; numeric keys.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.shift">
      <summary>
        <para>Is Shift held down? (Read Only)</para>
        <para>Returns true if any Shift key is held down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.type">
      <summary>The type of event.</summary>
    </member>
    <member name="M:UnityEngine.Event.GetTypeForControl(System.Int32)">
      <summary>
        <para>Get a filtered event type for a given control ID.</para>
        <para>This function is used to implement mouse locking and keyboard focus. The controlID can be obtained from GUIUtilty.GetControlID().</para>
      </summary>
      <param name="controlID">The ID of the control you are querying from.</param>
      <seealso cref="T:UnityEngine.EventType">
      </seealso>
    </member>
    <member name="M:UnityEngine.Event.Use">
      <summary>
        <para>Use this event.</para>
        <para>Call this method when you've used an event. The event's type will be set to <see cref="UnityEngine.EventType.Used"></see>, causing other GUI elements to ignore it. Events of type <see cref="UnityEngine.EventType.Repaint"></see> and <see cref="UnityEngine.EventType.Layout"></see> should not be used. Attempting to call this method on such events will issue a warning.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Event.GetEventCount">
      <summary>Returns the current number of events that are stored in the event queue.</summary>
      <returns>Current number of events currently in the event queue.</returns>
    </member>
    <member name="M:UnityEngine.Event.KeyboardEvent(System.String)">
      <summary>
        <para>Create a keyboard event.</para>
        <para>This is useful when you need to check if a certain key has been pressed - possibly with modifiers. The syntax for the key string is a key name (same as in the Input Manager), optionally prefixed by any number of modifiers: &amp; = Alternate, ^ = Control, % = Command/Windows key, # = Shift Examples: &amp;f12 = Alternate + F12, "^[0]" = Control + keypad0 .</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Event.PopEvent(UnityEngine.Event)">
      <summary>Get the next queued [Event] from the event system.</summary>
      <param name="outEvent">Next Event.</param>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,System.String)">
      <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="text">Text to display on the button.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>Make a single press button. The user clicks them and something happens immediately.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.DragWindow(UnityEngine.Rect)">
      <summary>
        <para>Make a window draggable.</para>
        <para>Insert a call to this function inside your window code to make a window draggable.</para>
      </summary>
      <param name="position">The part of the window that can be dragged. This is clipped to the actual window.</param>
    </member>
    <member name="M:UnityEngine.GUI.DragWindow">
      <summary>
        <para>If you want to have the entire window background to act as a drag area, use the version of DragWindow that takes no parameters and put it at the end of the window function.</para>
        <para>This will mean that any other controls will get precedence and the dragging will only be activated if nothing else has mouse focus.</para>
      </summary>
      <seealso cref="M:UnityEngine.GUI.DragWindow(UnityEngine.Rect)">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BringWindowToFront(System.Int32)">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BringWindowToBack(System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.DrawTexture(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>Draw a texture within a rectangle.</summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display.</param>
      <seealso cref="P:UnityEngine.GUI.color">
      </seealso>
      <seealso cref="P:UnityEngine.GUI.contentColor">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.DrawTextureWithTexCoords(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect)">
      <summary>
        <para>Draw a texture within a rectangle with the given texture coordinates.</para>
        <para>Use this function for clipping or tiling the image within the given rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display.</param>
      <param name="texCoords">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <seealso cref="P:UnityEngine.GUI.color">
      </seealso>
      <seealso cref="P:UnityEngine.GUI.contentColor">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.DrawTextureWithTexCoords(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Draw a texture within a rectangle with the given texture coordinates.</para>
        <para>Use this function for clipping or tiling the image within the given rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display.</param>
      <param name="texCoords">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="alphaBlend">Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.</param>
      <seealso cref="P:UnityEngine.GUI.color">
      </seealso>
      <seealso cref="P:UnityEngine.GUI.contentColor">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.EndGroup">
      <summary>
        <para>End a group.</para>
        <para>Should be attached with GUI.BeginGroup</para>
      </summary>
      <seealso cref="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.EndScrollView">
      <summary>Ends a scrollview started with a call to BeginScrollView.</summary>
    </member>
    <member name="M:UnityEngine.GUI.EndScrollView(System.Boolean)">
      <summary>Ends a scrollview started with a call to BeginScrollView.</summary>
    </member>
    <member name="M:UnityEngine.GUI.FocusControl(System.String)">
      <summary>
        <para>Move keyboard focus to a named control.</para>
        <para>For focusing text in Editor GUI text fields, see <see cref="UnityEditor.EditorGUI.FocusTextInControl"></see>.</para>
      </summary>
      <param name="name">Name set using <see cref="UnityEngine.GUI.SetNextControlName"></see>.</param>
      <seealso cref="M:UnityEngine.GUI.SetNextControlName(System.String)">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.GetNameOfFocusedControl">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.FocusWindow(System.Int32)">
      <summary>Make a window become the active window.</summary>
      <param name="windowID">The identifier used when you created the window in the <see cref="UnityEngine.GUI.Window"></see> call.</param>
    </member>
    <member name="M:UnityEngine.GUI.GetNameOfFocusedControl">
      <summary>
        <para>Get the name of named control that has focus.</para>
        <para>Control names are set up by using <see cref="UnityEngine.GUI.SetNextControlName"></see>. When a named control has focus, this function will return its name. If no control has focus or the focused control has no name set, an empty string will be returned instead.</para>
      </summary>
      <seealso cref="M:UnityEngine.GUI.SetNextControlName(System.String)">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.FocusControl(System.String)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.HorizontalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</para>
        <para>Finding extra elements: The styles of the buttons at the end of the scrollbar are searched for in the current skin by adding "leftbutton" and "rightbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the scrollbar.</param>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="leftValue">The value at the left end of the scrollbar.</param>
      <param name="rightValue">The value at the right end of the scrollbar.</param>
      <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
    </member>
    <member name="M:UnityEngine.GUI.HorizontalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</para>
        <para>Finding extra elements: The styles of the buttons at the end of the scrollbar are searched for in the current skin by adding "leftbutton" and "rightbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the scrollbar.</param>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="leftValue">The value at the left end of the scrollbar.</param>
      <param name="rightValue">The value at the right end of the scrollbar.</param>
      <param name="style">The style to use for the scrollbar background. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
    </member>
    <member name="M:UnityEngine.GUI.HorizontalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
      <summary>A horizontal slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEngine.GUI.HorizontalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>A horizontal slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="slider">The <see cref="UnityEngine.GUIStyle"></see> to use for displaying the dragging area. If left out, the <c>horizontalSlider</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="thumb">The <see cref="UnityEngine.GUIStyle"></see> to use for displaying draggable thumb. If left out, the <c>horizontalSliderThumb</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUI.Box"></see> control. Example: Draw the classic Hello World! string: <c>Text label on the Game View.</c></para>
        <para>Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture: <c>Texture Label.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">Text to display on the label.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUI.Box"></see> control. Example: Draw the classic Hello World! string: <c>Text label on the Game View.</c></para>
        <para>Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture: <c>Texture Label.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the label.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUI.Box"></see> control. Example: Draw the classic Hello World! string: <c>Text label on the Game View.</c></para>
        <para>Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture: <c>Texture Label.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="content">Text, image and tooltip for this label.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUI.Box"></see> control. Example: Draw the classic Hello World! string: <c>Text label on the Game View.</c></para>
        <para>Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture: <c>Texture Label.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">Text to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUI.Box"></see> control. Example: Draw the classic Hello World! string: <c>Text label on the Game View.</c></para>
        <para>Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture: <c>Texture Label.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUI.Box"></see> control. Example: Draw the classic Hello World! string: <c>Text label on the Game View.</c></para>
        <para>Example: Draw a texture on-screen. Labels are also used to display textures, instead of a string, simply pass in a texture: <c>Texture Label.</c></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char)">
      <summary>Make a text field where the user can enter a password.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <returns>The edited password.</returns>
    </member>
    <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char,System.Int32)">
      <summary>Make a text field where the user can enter a password.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <returns>The edited password.</returns>
    </member>
    <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char,UnityEngine.GUIStyle)">
      <summary>Make a text field where the user can enter a password.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The edited password.</returns>
    </member>
    <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char,System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a text field where the user can enter a password.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The edited password.</returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,System.String)">
      <summary>Make a button that is active as long as the user holds it down.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="text">Text to display on the button.</param>
      <returns>True when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>Make a button that is active as long as the user holds it down.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <returns>True when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>Make a button that is active as long as the user holds it down.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <returns>True when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>Make a button that is active as long as the user holds it down.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>True when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>Make a button that is active as long as the user holds it down.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>True when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>Make a button that is active as long as the user holds it down.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>True when the users clicks the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.ScrollTo(UnityEngine.Rect)">
      <summary>Scrolls all enclosing scrollviews so they try to make <c>position</c> visible.</summary>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,System.String[],System.Int32)">
      <summary>Make a grid of buttons.</summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="texts">An array of strings to show on the grid buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.Texture[],System.Int32)">
      <summary>Make a grid of buttons.</summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="images">An array of textures on the grid buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32)">
      <summary>Make a grid of buttons.</summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,System.String[],System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a grid of buttons.</summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="texts">An array of strings to show on the grid buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.Texture[],System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a grid of buttons.</summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="images">An array of textures on the grid buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a grid of buttons.</summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="contents">An array of text, image and tooltips for the grid button.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.SetNextControlName(System.String)">
      <summary>
        <para>Set the name of the next control.</para>
        <para>This makes the following control be registered with a given name.</para>
      </summary>
      <seealso cref="M:UnityEngine.GUI.GetNameOfFocusedControl">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.FocusControl(System.String)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String)">
      <summary>Make a Multi-line text area where the user can edit a string.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <returns>The edited string.</returns>
    </member>
    <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String,System.Int32)">
      <summary>Make a Multi-line text area where the user can edit a string.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <returns>The edited string.</returns>
    </member>
    <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>Make a Multi-line text area where the user can edit a string.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="style">The style to use. If left out, the <c>textArea</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The edited string.</returns>
    </member>
    <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a Multi-line text area where the user can edit a string.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textArea</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The edited string.</returns>
    </member>
    <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String)">
      <summary>Make a single-line text field where the user can edit a string.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <returns>The edited string.</returns>
    </member>
    <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>Make a single-line text field where the user can edit a string.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <returns>The edited string.</returns>
    </member>
    <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>Make a single-line text field where the user can edit a string.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The edited string.</returns>
    </member>
    <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>Make a single-line text field where the user can edit a string.</summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The edited string.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>Make an on/off toggle button.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="text">Text to display on the button.</param>
      <returns>The new value of the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.Texture)">
      <summary>Make an on/off toggle button.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <returns>The new value of the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent)">
      <summary>Make an on/off toggle button.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <returns>The new value of the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>Make an on/off toggle button.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>toggle</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The new value of the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>Make an on/off toggle button.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>toggle</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The new value of the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>Make an on/off toggle button.</summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>toggle</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The new value of the button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>Make a toolbar.</summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the toolbar buttons.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.Texture[])">
      <summary>Make a toolbar.</summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the toolbar buttons.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[])">
      <summary>Make a toolbar.</summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="contents">An array of text, image and tooltips for the toolbar buttons.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>Make a toolbar.</summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the toolbar buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.Texture[],UnityEngine.GUIStyle)">
      <summary>Make a toolbar.</summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the toolbar buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>Make a toolbar.</summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="contents">An array of text, image and tooltips for the toolbar buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The index of the selected button.</returns>
    </member>
    <member name="M:UnityEngine.GUI.UnfocusWindow">
      <summary>Remove focus from all windows.</summary>
    </member>
    <member name="M:UnityEngine.GUI.VerticalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</para>
        <para>Finding extra elements: The styles of the buttons at the end of the scrollbar are searched for in the current skin by adding "upbutton" and "downbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the scrollbar.</param>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="topValue">The value at the top of the scrollbar.</param>
      <param name="bottomValue">The value at the bottom of the scrollbar.</param>
      <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
    </member>
    <member name="M:UnityEngine.GUI.VerticalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</para>
        <para>Finding extra elements: The styles of the buttons at the end of the scrollbar are searched for in the current skin by adding "upbutton" and "downbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the scrollbar.</param>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="topValue">The value at the top of the scrollbar.</param>
      <param name="bottomValue">The value at the bottom of the scrollbar.</param>
      <param name="style">The style to use for the scrollbar background. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
    </member>
    <member name="M:UnityEngine.GUI.VerticalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
      <summary>A vertical slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="topValue">The value at the top end of the slider.</param>
      <param name="bottomValue">The value at the bottom end of the slider.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEngine.GUI.VerticalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>A vertical slider the user can drag to change a value between a min and a max.</summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="topValue">The value at the top end of the slider.</param>
      <param name="bottomValue">The value at the bottom end of the slider.</param>
      <param name="slider">The <see cref="UnityEngine.GUIStyle"></see> to use for displaying the dragging area. If left out, the <c>horizontalSlider</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="thumb">The <see cref="UnityEngine.GUIStyle"></see> to use for displaying draggable thumb. If left out, the <c>horizontalSliderThumb</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="P:UnityEngine.GUI.ScrollViewScope.handleScrollWheel">
      <summary>Whether this ScrollView should handle scroll wheel events. (default: true).</summary>
    </member>
    <member name="P:UnityEngine.GUI.ScrollViewScope.scrollPosition">
      <summary>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</summary>
    </member>
    <member name="P:UnityEngine.GUI.backgroundColor">
      <summary>
        <para>Global tinting color for all background elements rendered by the GUI.</para>
        <para>This gets multiplied by <see cref="UnityEngine.GUI.color"></see>. <c>Yellow Background color applied to a button.</c></para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.changed">
      <summary>Returns true if any controls changed the value of the input data.</summary>
    </member>
    <member name="P:UnityEngine.GUI.color">
      <summary>
        <para>Global tinting color for the GUI.</para>
        <para>This will affect both backgrounds &amp; text colors. <c>Yellow Color on the GUI Controls.</c></para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.contentColor">
      <summary>
        <para>Tinting color for all text rendered by the GUI.</para>
        <para>This gets multiplied by <see cref="UnityEngine.GUI.color"></see>. <c>Yellow content color (font) in a button.</c></para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.depth">
      <summary>
        <para>The sorting depth of the currently executing GUI behaviour.</para>
        <para>Set this to determine ordering when you have different scripts running simultaneously. GUI elements drawn with lower depth values will appear on top of elements with higher values (ie, you can think of the depth as "distance" from the camera). Note:To see this example working, you will need to create 2 scripts. Remember to name the scripts with the same name as the class names, else it will not work. <c>One Button behind the other.</c></para>
        <para>And copy this other example to another script:</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.enabled">
      <summary>
        <para>Is the GUI enabled?</para>
        <para>Set this value to false to disable all GUI interaction. All controls will be draw semi-transparently, and will not respond to user input. <c>Enabled / Disabled GUI controls.</c></para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.matrix">
      <summary>The GUI transform matrix.</summary>
    </member>
    <member name="P:UnityEngine.GUI.skin">
      <summary>
        <para>The global skin to use.</para>
        <para>You can set this at any point to change the look of your GUI. If you set it to null, the skin will revert to the default Unity skin.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.tooltip">
      <summary>
        <para>The tooltip of the control the mouse is currently over, or which has keyboard focus. (Read Only).</para>
        <para>When you create GUI controls, you can pass in a tooltip for them. This is done by changing the content parameter to take a custom-made <see cref="UnityEngine.GUIContent"></see> object, rather than just passing in a string to display. When the mouse is over a control with a tooltip, it sets the global GUI.tooltip value to the tooltip you pass in. If the mouse is not hovering over any control, the value is set to the control which has keyboard focus. At the end of the OnGUI code, you can make a label showing the value of GUI.tooltip <c>GUI Tooltip on th Game view appears when the mouse is over the button.</c></para>
        <para>You can use the ordering of elements to create 'hierarchical' tooltips:</para>
        <para>Tooltips can also be used to implement an OnMouseOver / OnMouseOut messaging system:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="UnityEngine.GUI.EndGroup"></see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <seealso cref="P:UnityEngine.GUI.matrix">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,System.String)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="UnityEngine.GUI.EndGroup"></see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="text">Text to display on the group.</param>
      <seealso cref="P:UnityEngine.GUI.matrix">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="UnityEngine.GUI.EndGroup"></see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the group.</param>
      <seealso cref="P:UnityEngine.GUI.matrix">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="UnityEngine.GUI.EndGroup"></see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="content">Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.</param>
      <seealso cref="P:UnityEngine.GUI.matrix">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="UnityEngine.GUI.EndGroup"></see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="style">The style to use for the background.</param>
      <seealso cref="P:UnityEngine.GUI.matrix">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="UnityEngine.GUI.EndGroup"></see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="text">Text to display on the group.</param>
      <param name="style">The style to use for the background.</param>
      <seealso cref="P:UnityEngine.GUI.matrix">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="UnityEngine.GUI.EndGroup"></see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the group.</param>
      <param name="style">The style to use for the background.</param>
      <seealso cref="P:UnityEngine.GUI.matrix">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="UnityEngine.GUI.EndGroup"></see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group. Groups can be nested - if they are, children are clipped to their parents. This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="content">Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.</param>
      <param name="style">The style to use for the background.</param>
      <seealso cref="P:UnityEngine.GUI.matrix">
      </seealso>
      <seealso cref="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      <summary>
        <para>Begin a scrolling view inside your GUI.</para>
        <para>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the ScrollView.</param>
      <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
      <param name="viewRect">The rectangle used inside the scrollview.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,System.Boolean)">
      <summary>
        <para>Begin a scrolling view inside your GUI.</para>
        <para>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the ScrollView.</param>
      <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
      <param name="viewRect">The rectangle used inside the scrollview.</param>
      <param name="alwaysShowHorizontal">Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when <c>viewRect</c> is wider than <c>position</c>.</param>
      <param name="alwaysShowVertical">Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when <c>viewRect</c> is taller than <c>position</c>.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a scrolling view inside your GUI.</para>
        <para>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the ScrollView.</param>
      <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
      <param name="viewRect">The rectangle used inside the scrollview.</param>
      <param name="horizontalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a scrolling view inside your GUI.</para>
        <para>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the ScrollView.</param>
      <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
      <param name="viewRect">The rectangle used inside the scrollview.</param>
      <param name="alwaysShowHorizontal">Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when <c>viewRect</c> is wider than <c>position</c>.</param>
      <param name="alwaysShowVertical">Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when <c>viewRect</c> is taller than <c>position</c>.</param>
      <param name="horizontalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,System.String)">
      <summary>
        <para>Create a Box on the GUI Layer.</para>
        <para>A Box can contain text, an image, or a combination of these along with an optional tooltip, through using a <see cref="UnityEngine.GUIContent"></see> parameter. You may also use a <see cref="UnityEngine.GUIStyle"></see> to adjust the layout of items in a box, text colour and other properties. Here is an example of a Box containing Text:</para>
        <para>Here is an example of a Box containing a Texture:</para>
        <para>Here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip:</para>
        <para>Here is an example of a Box containing Text, with options set in a GUIStyle to position the Text in the center of the Box.</para>
        <para>Here is an example of a Box containing a Texture, with options set in a GUIStyle to position the Texture in the center of the Box.</para>
        <para>Finally, here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip, with positional information contained in the GUIStyle parameter:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="text">Text to display on the box.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Create a Box on the GUI Layer.</para>
        <para>A Box can contain text, an image, or a combination of these along with an optional tooltip, through using a <see cref="UnityEngine.GUIContent"></see> parameter. You may also use a <see cref="UnityEngine.GUIStyle"></see> to adjust the layout of items in a box, text colour and other properties. Here is an example of a Box containing Text:</para>
        <para>Here is an example of a Box containing a Texture:</para>
        <para>Here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip:</para>
        <para>Here is an example of a Box containing Text, with options set in a GUIStyle to position the Text in the center of the Box.</para>
        <para>Here is an example of a Box containing a Texture, with options set in a GUIStyle to position the Texture in the center of the Box.</para>
        <para>Finally, here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip, with positional information contained in the GUIStyle parameter:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the box.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Create a Box on the GUI Layer.</para>
        <para>A Box can contain text, an image, or a combination of these along with an optional tooltip, through using a <see cref="UnityEngine.GUIContent"></see> parameter. You may also use a <see cref="UnityEngine.GUIStyle"></see> to adjust the layout of items in a box, text colour and other properties. Here is an example of a Box containing Text:</para>
        <para>Here is an example of a Box containing a Texture:</para>
        <para>Here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip:</para>
        <para>Here is an example of a Box containing Text, with options set in a GUIStyle to position the Text in the center of the Box.</para>
        <para>Here is an example of a Box containing a Texture, with options set in a GUIStyle to position the Texture in the center of the Box.</para>
        <para>Finally, here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip, with positional information contained in the GUIStyle parameter:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="content">Text, image and tooltip for this box.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Create a Box on the GUI Layer.</para>
        <para>A Box can contain text, an image, or a combination of these along with an optional tooltip, through using a <see cref="UnityEngine.GUIContent"></see> parameter. You may also use a <see cref="UnityEngine.GUIStyle"></see> to adjust the layout of items in a box, text colour and other properties. Here is an example of a Box containing Text:</para>
        <para>Here is an example of a Box containing a Texture:</para>
        <para>Here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip:</para>
        <para>Here is an example of a Box containing Text, with options set in a GUIStyle to position the Text in the center of the Box.</para>
        <para>Here is an example of a Box containing a Texture, with options set in a GUIStyle to position the Texture in the center of the Box.</para>
        <para>Finally, here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip, with positional information contained in the GUIStyle parameter:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="text">Text to display on the box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Create a Box on the GUI Layer.</para>
        <para>A Box can contain text, an image, or a combination of these along with an optional tooltip, through using a <see cref="UnityEngine.GUIContent"></see> parameter. You may also use a <see cref="UnityEngine.GUIStyle"></see> to adjust the layout of items in a box, text colour and other properties. Here is an example of a Box containing Text:</para>
        <para>Here is an example of a Box containing a Texture:</para>
        <para>Here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip:</para>
        <para>Here is an example of a Box containing Text, with options set in a GUIStyle to position the Text in the center of the Box.</para>
        <para>Here is an example of a Box containing a Texture, with options set in a GUIStyle to position the Texture in the center of the Box.</para>
        <para>Finally, here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip, with positional information contained in the GUIStyle parameter:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Create a Box on the GUI Layer.</para>
        <para>A Box can contain text, an image, or a combination of these along with an optional tooltip, through using a <see cref="UnityEngine.GUIContent"></see> parameter. You may also use a <see cref="UnityEngine.GUIStyle"></see> to adjust the layout of items in a box, text colour and other properties. Here is an example of a Box containing Text:</para>
        <para>Here is an example of a Box containing a Texture:</para>
        <para>Here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip:</para>
        <para>Here is an example of a Box containing Text, with options set in a GUIStyle to position the Text in the center of the Box.</para>
        <para>Here is an example of a Box containing a Texture, with options set in a GUIStyle to position the Texture in the center of the Box.</para>
        <para>Finally, here is an example of a Box containing a GUIContent, combining Text, Texture and Tooltip, with positional information contained in the GUIStyle parameter:</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="content">Text, image and tooltip for this box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.BringWindowToBack(System.Int32)">
      <summary>Bring a specific window to back of the floating windows.</summary>
      <param name="windowID">The identifier used when you created the window in the <see cref="UnityEngine.GUI.Window"></see> call.</param>
    </member>
    <member name="M:UnityEngine.GUI.BringWindowToFront(System.Int32)">
      <summary>Bring a specific window to front of the floating windows.</summary>
      <param name="windowID">The identifier used when you created the window in the <see cref="UnityEngine.GUI.Window"></see> call.</param>
    </member>
    <member name="P:UnityEngine.GUILayout.ScrollViewScope.handleScrollWheel">
      <summary>Whether this ScrollView should handle scroll wheel events. (default: true).</summary>
    </member>
    <member name="P:UnityEngine.GUILayout.ScrollViewScope.scrollPosition">
      <summary>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</summary>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single)">
      <summary>Reserve layout space for a rectangle with a specific aspect ratio.</summary>
      <param name="aspect">The aspect ratio of the element (width / height).</param>
      <returns>The rect for the control.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single,UnityEngine.GUIStyle)">
      <summary>Reserve layout space for a rectangle with a specific aspect ratio.</summary>
      <param name="aspect">The aspect ratio of the element (width / height).</param>
      <param name="style">An optional style. If specified, the style's <c>padding</c> value will be added to the sizes of the returned rectangle &amp; the style's <c>margin</c> values will be used for spacing.</param>
      <returns>The rect for the control.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Reserve layout space for a rectangle with a specific aspect ratio.</summary>
      <param name="aspect">The aspect ratio of the element (width / height).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The rect for the control.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Reserve layout space for a rectangle with a specific aspect ratio.</summary>
      <param name="aspect">The aspect ratio of the element (width / height).</param>
      <param name="style">An optional style. If specified, the style's <c>padding</c> value will be added to the sizes of the returned rectangle &amp; the style's <c>margin</c> values will be used for spacing.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The rect for the control.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetLastRect">
      <summary>
        <para>Get the rectangle last used by GUILayout for a control.</para>
        <para>Note that this only works during the Repaint event.</para>
      </summary>
      <returns>The last used rectangle.</returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.</summary>
      <param name="content">The content to make room for displaying.</param>
      <param name="style">The <see cref="UnityEngine.GUIStyle"></see> to layout for.</param>
      <returns>A rectangle that is large enough to contain content when rendered in style.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Reserve layout space for a rectangle for displaying some contents with a specific style.</summary>
      <param name="content">The content to make room for displaying.</param>
      <param name="style">The <see cref="UnityEngine.GUIStyle"></see> to layout for.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>A rectangle that is large enough to contain content when rendered in style.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single)">
      <summary>Reserve layout space for a rectangle with a fixed content area.</summary>
      <param name="width">The width of the area you want.</param>
      <param name="height">The height of the area you want.</param>
      <returns>The rectanlge to put your control in.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,UnityEngine.GUIStyle)">
      <summary>Reserve layout space for a rectangle with a fixed content area.</summary>
      <param name="width">The width of the area you want.</param>
      <param name="height">The height of the area you want.</param>
      <param name="style">An optional <see cref="UnityEngine.GUIStyle"></see> to layout for. If specified, the style's <c>padding</c> value will be added to your sizes &amp; its <c>margin</c> value will be used for spacing.</param>
      <returns>The rectanlge to put your control in.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>Reserve layout space for a rectangle with a fixed content area.</summary>
      <param name="width">The width of the area you want.</param>
      <param name="height">The height of the area you want.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The rectanlge to put your control in.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Reserve layout space for a rectangle with a fixed content area.</summary>
      <param name="width">The width of the area you want.</param>
      <param name="height">The height of the area you want.</param>
      <param name="style">An optional <see cref="UnityEngine.GUIStyle"></see> to layout for. If specified, the style's <c>padding</c> value will be added to your sizes &amp; its <c>margin</c> value will be used for spacing.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The rectanlge to put your control in.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Reserve layout space for a flexible rect.</para>
        <para>The rectangle's size will be between the min &amp; max values.</para>
      </summary>
      <param name="minWidth">The minimum width of the area passed back.</param>
      <param name="maxWidth">The maximum width of the area passed back.</param>
      <param name="minHeight">The minimum width of the area passed back.</param>
      <param name="maxHeight">The maximum width of the area passed back.</param>
      <returns>A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Reserve layout space for a flexible rect.</para>
        <para>The rectangle's size will be between the min &amp; max values.</para>
      </summary>
      <param name="minWidth">The minimum width of the area passed back.</param>
      <param name="maxWidth">The maximum width of the area passed back.</param>
      <param name="minHeight">The minimum width of the area passed back.</param>
      <param name="maxHeight">The maximum width of the area passed back.</param>
      <param name="style">An optional style. If specified, the style's <c>padding</c> value will be added to the sizes requested &amp; the style's <c>margin</c> values will be used for spacing.</param>
      <returns>A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Reserve layout space for a flexible rect.</para>
        <para>The rectangle's size will be between the min &amp; max values.</para>
      </summary>
      <param name="minWidth">The minimum width of the area passed back.</param>
      <param name="maxWidth">The maximum width of the area passed back.</param>
      <param name="minHeight">The minimum width of the area passed back.</param>
      <param name="maxHeight">The maximum width of the area passed back.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Reserve layout space for a flexible rect.</para>
        <para>The rectangle's size will be between the min &amp; max values.</para>
      </summary>
      <param name="minWidth">The minimum width of the area passed back.</param>
      <param name="maxWidth">The maximum width of the area passed back.</param>
      <param name="minHeight">The minimum width of the area passed back.</param>
      <param name="maxHeight">The maximum width of the area passed back.</param>
      <param name="style">An optional style. If specified, the style's <c>padding</c> value will be added to the sizes requested &amp; the style's <c>margin</c> values will be used for spacing.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>A rectangle with size between minWidth &amp; maxWidth on both axes.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="P:UnityEngine.GUISettings.cursorColor">
      <summary>The color of the cursor in text fields.</summary>
    </member>
    <member name="P:UnityEngine.GUISettings.cursorFlashSpeed">
      <summary>
        <para>The speed of text field cursor flashes.</para>
        <para>This is how many flashes / second. If you set it to 0, flashing will be disabled. If you set it to -1, the flashing speed will match the system default of the end user.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISettings.doubleClickSelectsWord">
      <summary>
        <para>Should double-clicking select words in text fields.</para>
        <para>By default is set to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISettings.selectionColor">
      <summary>The color of the selection rect in text fields.</summary>
    </member>
    <member name="P:UnityEngine.GUISettings.tripleClickSelectsLine">
      <summary>
        <para>Should triple-clicking select whole text in text fields.</para>
        <para>Bu default is set to true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. <c>Explained Area of the example.</c></para>
        <para>This function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</para>
      </summary>
      <seealso cref="M:UnityEngine.GUILayout.EndArea">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,System.String)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. <c>Explained Area of the example.</c></para>
        <para>This function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</para>
      </summary>
      <param name="text">Optional text to display in the area.</param>
      <seealso cref="M:UnityEngine.GUILayout.EndArea">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. <c>Explained Area of the example.</c></para>
        <para>This function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</para>
      </summary>
      <param name="image">Optional texture to display in the area.</param>
      <seealso cref="M:UnityEngine.GUILayout.EndArea">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. <c>Explained Area of the example.</c></para>
        <para>This function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</para>
      </summary>
      <param name="content">Optional text, image and tooltip top display for this area.</param>
      <seealso cref="M:UnityEngine.GUILayout.EndArea">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. <c>Explained Area of the example.</c></para>
        <para>This function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</para>
      </summary>
      <param name="style">The style to use. If left out, the empty <see cref="UnityEngine.GUIStyle"></see> (<see cref="UnityEngine.GUIStyle.none"></see>) is used, giving a transparent background.</param>
      <seealso cref="M:UnityEngine.GUILayout.EndArea">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. <c>Explained Area of the example.</c></para>
        <para>This function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</para>
      </summary>
      <param name="text">Optional text to display in the area.</param>
      <param name="style">The style to use. If left out, the empty <see cref="UnityEngine.GUIStyle"></see> (<see cref="UnityEngine.GUIStyle.none"></see>) is used, giving a transparent background.</param>
      <seealso cref="M:UnityEngine.GUILayout.EndArea">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. <c>Explained Area of the example.</c></para>
        <para>This function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</para>
      </summary>
      <param name="image">Optional texture to display in the area.</param>
      <param name="style">The style to use. If left out, the empty <see cref="UnityEngine.GUIStyle"></see> (<see cref="UnityEngine.GUIStyle.none"></see>) is used, giving a transparent background.</param>
      <seealso cref="M:UnityEngine.GUILayout.EndArea">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use. <c>Explained Area of the example.</c></para>
        <para>This function is very useful when mixing GUILayout code. It must be matched with a call to EndArea. BeginArea / EndArea cannot be nested.</para>
      </summary>
      <param name="content">Optional text, image and tooltip top display for this area.</param>
      <param name="style">The style to use. If left out, the empty <see cref="UnityEngine.GUIStyle"></see> (<see cref="UnityEngine.GUIStyle.none"></see>) is used, giving a transparent background.</param>
      <seealso cref="M:UnityEngine.GUILayout.EndArea">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal. <c>Horizontal Layout.</c></para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal. <c>Horizontal Layout.</c></para>
      </summary>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal. <c>Horizontal Layout.</c></para>
      </summary>
      <param name="text">Text to display on group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal. <c>Horizontal Layout.</c></para>
      </summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal. <c>Horizontal Layout.</c></para>
      </summary>
      <param name="content">Text, image, and tooltip for this group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView. <c>Scroll View in the Game View..</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView. <c>Scroll View in the Game View..</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView. <c>Scroll View in the Game View..</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView. <c>Scroll View in the Game View..</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView. <c>Scroll View in the Game View..</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView. <c>Scroll View in the Game View..</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView. <c>Scroll View in the Game View..</c></para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="UnityEngine.GUIStyle"></see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical. <c>Vertical Layout.</c></para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical. <c>Vertical Layout.</c></para>
      </summary>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical. <c>Vertical Layout.</c></para>
      </summary>
      <param name="text">Text to display on group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical. <c>Vertical Layout.</c></para>
      </summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical. <c>Vertical Layout.</c></para>
      </summary>
      <param name="content">Text, image, and tooltip for this group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (<see cref="UnityEngine.GUILayout.BeginHorizontal"></see>, <see cref="UnityEngine.GUILayout.BeginVertical"></see>, <see cref="UnityEngine.GUILayout.BeginArea"></see>, etc...). <c>Boxes in the Game View.</c></para>
      </summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the box.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (<see cref="UnityEngine.GUILayout.BeginHorizontal"></see>, <see cref="UnityEngine.GUILayout.BeginVertical"></see>, <see cref="UnityEngine.GUILayout.BeginArea"></see>, etc...). <c>Boxes in the Game View.</c></para>
      </summary>
      <param name="text">Text to display on the box.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (<see cref="UnityEngine.GUILayout.BeginHorizontal"></see>, <see cref="UnityEngine.GUILayout.BeginVertical"></see>, <see cref="UnityEngine.GUILayout.BeginArea"></see>, etc...). <c>Boxes in the Game View.</c></para>
      </summary>
      <param name="content">Text, image and tooltip for this box.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (<see cref="UnityEngine.GUILayout.BeginHorizontal"></see>, <see cref="UnityEngine.GUILayout.BeginVertical"></see>, <see cref="UnityEngine.GUILayout.BeginArea"></see>, etc...). <c>Boxes in the Game View.</c></para>
      </summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (<see cref="UnityEngine.GUILayout.BeginHorizontal"></see>, <see cref="UnityEngine.GUILayout.BeginVertical"></see>, <see cref="UnityEngine.GUILayout.BeginArea"></see>, etc...). <c>Boxes in the Game View.</c></para>
      </summary>
      <param name="text">Text to display on the box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (<see cref="UnityEngine.GUILayout.BeginHorizontal"></see>, <see cref="UnityEngine.GUILayout.BeginVertical"></see>, <see cref="UnityEngine.GUILayout.BeginArea"></see>, etc...). <c>Boxes in the Game View.</c></para>
      </summary>
      <param name="content">Text, image and tooltip for this box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button.</para>
        <para>Create a <see cref="UnityEngine.GUILayout.Button"></see> that can be pressed and released as a normal button. When this <see cref="UnityEngine.GUILayout.Button"></see> is released the Button returns the expected <c>true</c> value. If the mouse is moved off the button it is not clicked. <c>Buttons in the Game View.</c></para>
      </summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button.</para>
        <para>Create a <see cref="UnityEngine.GUILayout.Button"></see> that can be pressed and released as a normal button. When this <see cref="UnityEngine.GUILayout.Button"></see> is released the Button returns the expected <c>true</c> value. If the mouse is moved off the button it is not clicked. <c>Buttons in the Game View.</c></para>
      </summary>
      <param name="text">Text to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button.</para>
        <para>Create a <see cref="UnityEngine.GUILayout.Button"></see> that can be pressed and released as a normal button. When this <see cref="UnityEngine.GUILayout.Button"></see> is released the Button returns the expected <c>true</c> value. If the mouse is moved off the button it is not clicked. <c>Buttons in the Game View.</c></para>
      </summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button.</para>
        <para>Create a <see cref="UnityEngine.GUILayout.Button"></see> that can be pressed and released as a normal button. When this <see cref="UnityEngine.GUILayout.Button"></see> is released the Button returns the expected <c>true</c> value. If the mouse is moved off the button it is not clicked. <c>Buttons in the Game View.</c></para>
      </summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button.</para>
        <para>Create a <see cref="UnityEngine.GUILayout.Button"></see> that can be pressed and released as a normal button. When this <see cref="UnityEngine.GUILayout.Button"></see> is released the Button returns the expected <c>true</c> value. If the mouse is moved off the button it is not clicked. <c>Buttons in the Game View.</c></para>
      </summary>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button.</para>
        <para>Create a <see cref="UnityEngine.GUILayout.Button"></see> that can be pressed and released as a normal button. When this <see cref="UnityEngine.GUILayout.Button"></see> is released the Button returns the expected <c>true</c> value. If the mouse is moved off the button it is not clicked. <c>Buttons in the Game View.</c></para>
      </summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the users clicks the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.EndArea">
      <summary>Close a GUILayout block started with BeginArea.</summary>
    </member>
    <member name="M:UnityEngine.GUILayout.EndHorizontal">
      <summary>Close a group started with BeginHorizontal.</summary>
    </member>
    <member name="M:UnityEngine.GUILayout.EndScrollView">
      <summary>
        <para>End a scroll view begun with a call to BeginScrollView.</para>
        <para>
          <c>Scroll View in the Game View..</c>
        </para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.EndVertical">
      <summary>Close a group started with BeginVertical.</summary>
    </member>
    <member name="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      <summary>Option passed to a control to allow or disallow vertical expansion.</summary>
    </member>
    <member name="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      <summary>Option passed to a control to allow or disallow horizontal expansion.</summary>
    </member>
    <member name="M:UnityEngine.GUILayout.FlexibleSpace">
      <summary>
        <para>Insert a flexible space element.</para>
        <para>Flexible spaces use up any leftover space in a layout. Note: This will override the GUILayout.ExpandWidth and GUILayout.ExpandHeight <c>Flexible Space in a GUILayout Area.</c></para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.Height(System.Single)">
      <summary>
        <para>Option passed to a control to give it an absolute height.</para>
        <para>Note: This option will override the Automatic height Layout parameter <c>Fixed Height for a GUI Control.</c></para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.HorizontalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a horizontal scrollbar.</para>
        <para>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a <c>scroll view</c> control. <c>Horizontal Scrollbar in the Game View.</c></para>
        <para>The styles of the scroll buttons at the end of the bar can be located in the current skin by adding "leftbutton" and "rightbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</para>
      </summary>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="leftValue">The value at the left end of the scrollbar.</param>
      <param name="rightValue">The value at the right end of the scrollbar.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
      <seealso cref="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.VerticalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.HorizontalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a horizontal scrollbar.</para>
        <para>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a <c>scroll view</c> control. <c>Horizontal Scrollbar in the Game View.</c></para>
        <para>The styles of the scroll buttons at the end of the bar can be located in the current skin by adding "leftbutton" and "rightbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</para>
      </summary>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="leftValue">The value at the left end of the scrollbar.</param>
      <param name="rightValue">The value at the right end of the scrollbar.</param>
      <param name="style">The style to use for the scrollbar background. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
      <seealso cref="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.VerticalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.HorizontalSlider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>A horizontal slider the user can drag to change a value between a min and a max.</summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.HorizontalSlider(System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>A horizontal slider the user can drag to change a value between a min and a max.</summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="slider">The <see cref="UnityEngine.GUIStyle"></see> to use for displaying the dragging area. If left out, the <c>horizontalSlider</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="thumb">The <see cref="UnityEngine.GUIStyle"></see> to use for displaying draggable thumb. If left out, the <c>horizontalSliderThumb</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUILayout.Box"></see> control <c>Label in the Game View.</c></para>
      </summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUILayout.Box"></see> control <c>Label in the Game View.</c></para>
      </summary>
      <param name="text">Text to display on the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUILayout.Box"></see> control <c>Label in the Game View.</c></para>
      </summary>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUILayout.Box"></see> control <c>Label in the Game View.</c></para>
      </summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUILayout.Box"></see> control <c>Label in the Game View.</c></para>
      </summary>
      <param name="text">Text to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a <see cref="UnityEngine.GUILayout.Box"></see> control <c>Label in the Game View.</c></para>
      </summary>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      <summary>Option passed to a control to specify a maximum height.</summary>
    </member>
    <member name="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      <summary>Option passed to a control to specify a maximum width.</summary>
    </member>
    <member name="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      <summary>Option passed to a control to specify a minimum height.</summary>
    </member>
    <member name="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      <summary>
        <para>Option passed to a control to specify a minimum width.</para>
        <para>Note: This option will override the Automatic width Layout parameter <c>Minimum allowed width for a Window.</c></para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field where the user can enter a password.</summary>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <returns>The edited password.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field where the user can enter a password.</summary>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <returns>The edited password.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field where the user can enter a password.</summary>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The edited password.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a text field where the user can enter a password.</summary>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <returns>The edited password.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the holds down the mouse.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
      <param name="text">Text to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the holds down the mouse.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the holds down the mouse.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the holds down the mouse.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the holds down the mouse.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a repeating button. The button returns true as long as the user holds down the mouse.</summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <c>true</c> when the holds down the mouse.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,System.String[],System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a Selection Grid.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.Texture[],System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a Selection Grid.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.GUIContent[],System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a Selection Grid.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,System.String[],System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a Selection Grid.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.Texture[],System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a Selection Grid.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.GUIContent[],System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a Selection Grid.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="contents">An array of text, image and tooltips for the button.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Space(System.Single)">
      <summary>
        <para>Insert a space in the current layout group.</para>
        <para>The direction of the space is dependent on the layout group you're currently in when issuing the command. If in a vertical group, the space will be vertical: Note: This will override the GUILayout.ExpandWidth and GUILayout.ExpandHeight <c>Space of 20px between two buttons.</c></para>
        <para>In horizontal groups, the <c>pixels</c> are measured horizontally:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.TextArea(System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a multi-line text field where the user can edit a string.</summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.&amp;amp;lt;br&amp;amp;gt;</param>
      <returns>The edited string.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.TextArea(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a multi-line text field where the user can edit a string.</summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.&amp;amp;lt;br&amp;amp;gt;</param>
      <returns>The edited string.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.TextArea(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a multi-line text field where the user can edit a string.</summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.&amp;amp;lt;br&amp;amp;gt;</param>
      <returns>The edited string.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.TextArea(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a multi-line text field where the user can edit a string.</summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.&amp;amp;lt;br&amp;amp;gt;</param>
      <returns>The edited string.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.TextField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make a single-line text field where the user can edit a string.</summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The edited string.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.TextField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>Make a single-line text field where the user can edit a string.</summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The edited string.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.TextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a single-line text field where the user can edit a string.</summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="style">The style to use. If left out, the <c>textArea</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The edited string.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.TextField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a single-line text field where the user can edit a string.</summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textArea</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The edited string.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>Make an on/off toggle button.</summary>
      <param name="value">Is the button on or off?</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The new value of the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,System.String,UnityEngine.GUILayoutOption[])">
      <summary>Make an on/off toggle button.</summary>
      <param name="value">Is the button on or off?</param>
      <param name="text">Text to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The new value of the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>Make an on/off toggle button.</summary>
      <param name="value">Is the button on or off?</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The new value of the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make an on/off toggle button.</summary>
      <param name="value">Is the button on or off?</param>
      <param name="image">
        <see cref="UnityEngine.Texture">
        </see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The new value of the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make an on/off toggle button.</summary>
      <param name="value">Is the button on or off?</param>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The new value of the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make an on/off toggle button.</summary>
      <param name="value">Is the button on or off?</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The new value of the button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>Make a toolbar.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the buttons.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.Texture[],UnityEngine.GUILayoutOption[])">
      <summary>Make a toolbar.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the buttons.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>Make a toolbar.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="contents">An array of text, image and tooltips for the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a toolbar.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.Texture[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a toolbar.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>Make a toolbar.</summary>
      <param name="selected">The index of the selected button.</param>
      <param name="contents">An array of text, image and tooltips for the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The index of the selected button.</returns>
      <seealso cref="M:UnityEngine.GUILayout.Width(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.Height(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.VerticalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a vertical scrollbar.</para>
        <para>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a <c>scroll view</c> control. <c>Vertical Scrollbar in the Game View.</c></para>
        <para>The styles of the scroll buttons at the end of the bar can be located in the current skin by adding "upbutton" and "downbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</para>
      </summary>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="topValue">The value at the top end of the scrollbar.</param>
      <param name="bottomValue">The value at the bottom end of the scrollbar.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
      <seealso cref="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.HorizontalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.VerticalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a vertical scrollbar.</para>
        <para>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a <c>scroll view</c> control. <c>Vertical Scrollbar in the Game View.</c></para>
        <para>The styles of the scroll buttons at the end of the bar can be located in the current skin by adding "upbutton" and "downbutton" to the style name. The name of the scrollbar thumb (the thing you drag) is found by appending "thumb" to the style name.</para>
      </summary>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="topValue">The value at the top end of the scrollbar.</param>
      <param name="bottomValue">The value at the bottom end of the scrollbar.</param>
      <param name="style">The style to use for the scrollbar background. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</returns>
      <seealso cref="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      </seealso>
      <seealso cref="M:UnityEngine.GUILayout.HorizontalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      </seealso>
    </member>
    <member name="M:UnityEngine.GUILayout.VerticalSlider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>A vertical slider the user can drag to change a value between a min and a max.</summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.VerticalSlider(System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>A vertical slider the user can drag to change a value between a min and a max.</summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="slider">The <see cref="UnityEngine.GUIStyle"></see> to use for displaying the dragging area. If left out, the <c>horizontalSlider</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="thumb">The <see cref="UnityEngine.GUIStyle"></see> to use for displaying draggable thumb. If left out, the <c>horizontalSliderThumb</c> style from the current <see cref="UnityEngine.GUISkin"></see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>The value that has been set by the user.</returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Width(System.Single)">
      <summary>Option passed to a control to give it an absolute width.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.CalcScreenSize(UnityEngine.Vector2)">
      <summary>Calculate the size of an element formatted with this style, and a given space to content.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.CalcSize(UnityEngine.GUIContent)">
      <summary>
        <para>Calculate the size of some content if it is rendered with this style.</para>
        <para>This function does not take word wrapping into account. To do that, you need to determine the allocated width and then call <see cref="UnityEngine.GUIStyle.CalcHeight"></see> to figure out the word wrapped height.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Draw this GUIStyle on to the screen, internal version.</para>
        <para>Draw plain GUIStyle without text nor image.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Draw the GUIStyle with a text string inside.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.Texture,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Boolean)">
      <summary>Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.DrawCursor(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32)">
      <summary>Draw this GUIStyle with selected content.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.DrawWithTextSelection(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32)">
      <summary>Draw this GUIStyle with selected content.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.GetCursorPixelPosition(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>Get the pixel position of a given string index.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.GetCursorStringIndex(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector2)">
      <summary>
        <para>Get the cursor position (indexing into contents.text) when the user clicked at cursorPixelPosition.</para>
        <para>This does not respect any images inside content.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyleState.background">
      <summary>The background image used by GUI elements in this given state.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyleState.scaledBackgrounds">
      <summary>Background images used by this state when on a high-resolution screen. It should either be left empty, or contain a single image that is exactly twice the resolution of <see cref="UnityEngine.GUIStyleState.background"></see>. This is only used by the editor. The field is not copied to player data, and is not accessible from player code.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyleState.textColor">
      <summary>The text color used by GUI elements in this state.</summary>
    </member>
    <member name="P:UnityEngine.GUIContent.image">
      <summary>The icon image contained.</summary>
    </member>
    <member name="P:UnityEngine.GUIContent.text">
      <summary>The text contained.</summary>
    </member>
    <member name="P:UnityEngine.GUIContent.tooltip">
      <summary>
        <para>The tooltip of this element.</para>
        <para>The tooltip associated with this content. Read GUItooltip to get the tooltip of the gui element the user is currently over.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.none">
      <summary>
        <para>Shortcut for an empty GUIStyle.</para>
        <para>This style contains no decoration and just renders everything in the default font.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.active">
      <summary>Rendering settings for when the control is pressed down.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.alignment">
      <summary>Text alignment.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.border">
      <summary>
        <para>The borders of all background images.</para>
        <para>This corresponds to the border settings for GUITextures. It only affects the rendering of the background image and has no effect on positioning.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.clipping">
      <summary>What to do when the contents to be rendered is too large to fit within the area given.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.contentOffset">
      <summary>Pixel offset to apply to the content of this GUIstyle.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.fixedHeight">
      <summary>If non-0, any GUI elements rendered with this style will have the height specified here.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.fixedWidth">
      <summary>If non-0, any GUI elements rendered with this style will have the width specified here.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.focused">
      <summary>Rendering settings for when the element has keyboard focus.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.font">
      <summary>The font to use for rendering. If null, the default font for the current <see cref="UnityEngine.GUISkin"></see> is used instead.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.fontSize">
      <summary>
        <para>The font size to use (for dynamic fonts).</para>
        <para>If this is set to a non-zero value, the font size specified in the font importer is overriden with a custom size. This is only supported for fonts set to use dynamic font rendering. Other fonts will always use the default font size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.fontStyle">
      <summary>
        <para>The font style to use (for dynamic fonts).</para>
        <para>If this is set to a value other then normal, the font style set in the font importer is overriden with a custom style. This is only supported for fonts set to use dynamic font rendering. Other fonts will always render in normal style.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.hover">
      <summary>Rendering settings for when the mouse is hovering over the control.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.imagePosition">
      <summary>How image and text of the <see cref="UnityEngine.GUIContent"></see> is combined.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.lineHeight">
      <summary>The height of one line of text with this style, measured in pixels. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.margin">
      <summary>
        <para>The margins between elements rendered in this style and any other GUI elements.</para>
        <para>This only has effect when using automatic layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.name">
      <summary>The name of this GUIStyle. Used for getting them based on name.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.normal">
      <summary>Rendering settings for when the component is displayed normally.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.onActive">
      <summary>Rendering settings for when the element is turned on and pressed down.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.onFocused">
      <summary>Rendering settings for when the element has keyboard and is turned on.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.onHover">
      <summary>Rendering settings for when the control is turned on and the mouse is hovering it.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.onNormal">
      <summary>Rendering settings for when the control is turned on.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.overflow">
      <summary>
        <para>Extra space to be added to the background image.</para>
        <para>This is used if your image has a drop shadow and you want to extend the background image beyond the rectangles specified for gui elements that use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.padding">
      <summary>Space from the edge of <see cref="UnityEngine.GUIStyle"></see> to the start of the contents.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.richText">
      <summary>Enable HTML-style tags for Text Formatting Markup.</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.stretchHeight">
      <summary>Can GUI elements of this style be stretched vertically for better layout?</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.stretchWidth">
      <summary>Can GUI elements of this style be stretched horizontally for better layouting?</summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.wordWrap">
      <summary>
        <para>Should the text be wordwrapped?</para>
        <para>This will cause any text contrained to be wordwrapped to fit within the width of a control.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.CalcHeight(UnityEngine.GUIContent,System.Single)">
      <summary>How tall this element will be when rendered with <c>content</c> and a specific <c>width</c>.</summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.CalcMinMaxWidth(UnityEngine.GUIContent,System.Single@,System.Single@)">
      <summary>
        <para>Calculate the minimum and maximum widths for this style rendered with <c>content</c>.</para>
        <para>Used by <see cref="UnityEngine.GUILayout"></see> to handle word-wrapping elements correctly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.box">
      <summary>Style used by default for <see cref="UnityEngine.GUI.Box"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.button">
      <summary>Style used by default for <see cref="UnityEngine.GUI.Button"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.customStyles">
      <summary>Array of GUI styles for specific needs.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.font">
      <summary>The default font to use for all styles.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalScrollbar">
      <summary>Style used by default for the background part of <see cref="UnityEngine.GUI.HorizontalScrollbar"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalScrollbarLeftButton">
      <summary>Style used by default for the left button on <see cref="UnityEngine.GUI.HorizontalScrollbar"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalScrollbarRightButton">
      <summary>Style used by default for the right button on <see cref="UnityEngine.GUI.HorizontalScrollbar"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalScrollbarThumb">
      <summary>Style used by default for the thumb that is dragged in <see cref="UnityEngine.GUI.HorizontalScrollbar"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalSlider">
      <summary>
        <para>Style used by default for the background part of <see cref="UnityEngine.GUI.HorizontalSlider"></see> controls.</para>
        <para>The padding property is used to determine the size of the area the thumb can be dragged within.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalSliderThumb">
      <summary>
        <para>Style used by default for the thumb that is dragged in <see cref="UnityEngine.GUI.HorizontalSlider"></see> controls.</para>
        <para>The padding property is used to determine the size of the thumb.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.label">
      <summary>Style used by default for <see cref="UnityEngine.GUI.Label"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.scrollView">
      <summary>Style used by default for the background of ScrollView controls (see <see cref="UnityEngine.GUI.BeginScrollView"></see>).</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.settings">
      <summary>Generic settings for how controls should behave with this skin.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.textArea">
      <summary>Style used by default for <see cref="UnityEngine.GUI.TextArea"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.textField">
      <summary>Style used by default for <see cref="UnityEngine.GUI.TextField"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.toggle">
      <summary>Style used by default for <see cref="UnityEngine.GUI.Toggle"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalScrollbar">
      <summary>Style used by default for the background part of <see cref="UnityEngine.GUI.VerticalScrollbar"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalScrollbarDownButton">
      <summary>Style used by default for the down button on <see cref="UnityEngine.GUI.VerticalScrollbar"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalScrollbarThumb">
      <summary>Style used by default for the thumb that is dragged in <see cref="UnityEngine.GUI.VerticalScrollbar"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalScrollbarUpButton">
      <summary>Style used by default for the up button on <see cref="UnityEngine.GUI.VerticalScrollbar"></see> controls.</summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalSlider">
      <summary>
        <para>Style used by default for the background part of <see cref="UnityEngine.GUI.VerticalSlider"></see> controls.</para>
        <para>The padding property is used to determine the size of the area the thumb can be dragged within.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalSliderThumb">
      <summary>
        <para>Style used by default for the thumb that is dragged in <see cref="UnityEngine.GUI.VerticalSlider"></see> controls.</para>
        <para>The padding property is used to determine the size of the thumb.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.window">
      <summary>Style used by default for Window controls (SA <see cref="UnityEngine.GUI.Window"></see>).</summary>
    </member>
    <member name="M:UnityEngine.GUISkin.FindStyle(System.String)">
      <summary>Try to search for a <see cref="UnityEngine.GUIStyle"></see>. This functions returns NULL and does not give an error.</summary>
    </member>
    <member name="M:UnityEngine.GUISkin.GetStyle(System.String)">
      <summary>Get a named <see cref="UnityEngine.GUIStyle"></see>.</summary>
    </member>
    <member name="F:UnityEngine.GUI.ToolbarButtonSize.Fixed">
      <summary>Calculates the button size by dividing the available width by the number of buttons. The minimum size is the maximum content width.</summary>
    </member>
    <member name="F:UnityEngine.GUI.ToolbarButtonSize.FitToContents">
      <summary>The width of each toolbar button is calculated based on the width of its content.</summary>
    </member>
    <member name="F:UnityEngine.GUIContent.none">
      <summary>Shorthand for empty content.</summary>
    </member>
    <member name="F:UnityEngine.TextClipping.Overflow">
      <summary>Text flows freely outside the element.</summary>
    </member>
    <member name="F:UnityEngine.TextClipping.Clip">
      <summary>Text gets clipped to be inside the element.</summary>
    </member>
    <member name="F:UnityEngine.ImagePosition.ImageLeft">
      <summary>Image is to the left of the text.</summary>
    </member>
    <member name="F:UnityEngine.ImagePosition.ImageAbove">
      <summary>Image is above the text.</summary>
    </member>
    <member name="F:UnityEngine.ImagePosition.ImageOnly">
      <summary>Only the image is displayed.</summary>
    </member>
    <member name="F:UnityEngine.ImagePosition.TextOnly">
      <summary>Only the text is displayed.</summary>
    </member>
    <member name="F:UnityEngine.ScaleMode.StretchToFill">
      <summary>Stretches the texture to fill the complete rectangle passed in to GUI.DrawTexture.</summary>
    </member>
    <member name="F:UnityEngine.ScaleMode.ScaleAndCrop">
      <summary>Scales the texture, maintaining aspect ratio, so it completely covers the <c>position</c> rectangle passed to GUI.DrawTexture. If the texture is being draw to a rectangle with a different aspect ratio than the original, the image is cropped.</summary>
    </member>
    <member name="F:UnityEngine.ScaleMode.ScaleToFit">
      <summary>Scales the texture, maintaining aspect ratio, so it completely fits withing the <c>position</c> rectangle passed to GUI.DrawTexture.</summary>
    </member>
  </members>
</doc>