<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.AudioModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.Audio.AudioClipPlayable">
      <summary>
        <para>An implementation of <see cref="UnityEngine.Playables.IPlayable"></see> that controls an <see cref="UnityEngine.AudioClip"></see>.</para>
        <para>NOTE: You can use <see cref="UnityEngine.Playables.PlayableExtensions"></see> methods with AudioClipPlayable objects.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Audio.AudioMixer">
      <summary>
        <para>AudioMixer asset.</para>
        <para>This is a singleton representing a specific audio mixer asset in the project.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Audio.AudioMixerGroup">
      <summary>Object representing a group in the mixer.</summary>
    </member>
    <member name="T:UnityEngine.Audio.AudioMixerSnapshot">
      <summary>Object representing a snapshot in the mixer.</summary>
    </member>
    <member name="T:UnityEngine.Audio.AudioPlayableOutput">
      <summary>
        <para>A <see cref="UnityEngine.Playables.IPlayableOutput"></see> implementation that will be used to play audio.</para>
        <para>NOTE: You can use <see cref="UnityEngine.Playables.PlayableOutputExtensions"></see> methods with AudioPlayableOutput objects.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Audio.AudioMixerUpdateMode">
      <summary>
        <para>The mode in which an AudioMixer should update its time.</para>
        <para>Use this with AudioMixer.updateMode to define how the AudioMixer time is updated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioCompressionFormat">
      <summary>
        <para>An enum containing different compression types.</para>
        <para>This enum is used within the AudioImporter to define what type of compression will be used for an imported AudioClip.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioDataLoadState">
      <summary>Value describing the current load state of the audio data associated with an AudioClip.</summary>
    </member>
    <member name="T:UnityEngine.AudioReverbPreset">
      <summary>
        <para>Reverb presets used by the Reverb Zone class and the audio reverb filter.</para>
        <para>Component for audio sources.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioRolloffMode">
      <summary>Rolloff modes that a 3D sound can have in an audio source.</summary>
    </member>
    <member name="T:UnityEngine.AudioSourceCurveType">
      <summary>
        <para>This defines the curve type of the different custom curves that can be queried and set within the AudioSource.</para>
        <para>The AudioSource can hold a number of custom distance curves, this enum is used within the AudioSource API to differentiate between them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioSpeakerMode">
      <summary>
        <para>These are speaker types defined for use with <see cref="UnityEngine.AudioSettings.speakerMode"></see>.</para>
        <para>Your project's default speaker mode can be set in the Audiomanager through Edit-&gt;Project Settings-&gt;Audio.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioVelocityUpdateMode">
      <summary>Describes when an <see cref="UnityEngine.AudioSource"></see> or <see cref="UnityEngine.AudioListener"></see> is updated.</summary>
    </member>
    <member name="T:UnityEngine.FFTWindow">
      <summary>
        <para>Spectrum analysis windowing types.</para>
        <para>Use this to reduce leakage of signals across frequency bands.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WebCamDevice">
      <summary>A structure describing the webcam device.</summary>
    </member>
    <member name="T:UnityEngine.WebCamTexture">
      <summary>WebCam Textures are textures onto which the live video input is rendered.</summary>
    </member>
    <member name="T:UnityEngine.AudioClipLoadType">
      <summary>
        <para>Determines how the audio clip is loaded in.</para>
        <para>Determines whether the audio clip will be either loaded in memory in compressed form, such that every playback will decode the data on the fly ("CompressedInMemory"), decompressed at scene startup such that the clip can be played back at very low CPU usage and the audio data in ir can be modified ("DecompressOnLoad"), or streamed directly from the disk which will typically result in the lowest memory usage, as only the data for a short stream buffer needs to be kept in memory ("Streaming").</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioChorusFilter">
      <summary>
        <para>The Audio Chorus Filter takes an Audio Clip and processes it creating a chorus effect.</para>
        <para>The chorus effect modulates the original sound by a sinusoid low frequency oscillator (LFO). The output sounds like there are multiple sources emitting the same sound with slight variations (resembling a choir).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioClip">
      <summary>
        <para>A container for audio data.</para>
        <para>An AudioClip stores the audio file either compressed as ogg vorbis or uncompressed. AudioClips are referenced and used by AudioSources to play sounds.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioConfiguration">
      <summary>
        <para>Specifies the current properties or desired properties to be set for the audio system.</para>
        <para>See <see cref="UnityEngine.AudioSettings.Reset"></see> for an example.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioDistortionFilter">
      <summary>The Audio Distortion Filter distorts the sound from an <see cref="UnityEngine.AudioSource"></see> or sounds reaching the <see cref="UnityEngine.AudioListener"></see>.</summary>
    </member>
    <member name="T:UnityEngine.AudioEchoFilter">
      <summary>The Audio Echo Filter repeats a sound after a given Delay, attenuating the repetitions based on the Decay Ratio.</summary>
    </member>
    <member name="T:UnityEngine.AudioHighPassFilter">
      <summary>The Audio High Pass Filter passes high frequencies of an AudioSource, and cuts off signals with frequencies lower than the Cutoff Frequency.</summary>
    </member>
    <member name="T:UnityEngine.AudioListener">
      <summary>
        <para>Representation of a listener in 3D space.</para>
        <para>This class implements a microphone-like device. It records the sounds around it and plays that through the player's speakers. You can only have one listener in a scene.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioLowPassFilter">
      <summary>The Audio Low Pass Filter passes low frequencies of an <see cref="UnityEngine.AudioSource"></see> or all sounds reaching an <see cref="UnityEngine.AudioListener"></see>, while removing frequencies higher than the Cutoff Frequency.</summary>
    </member>
    <member name="T:UnityEngine.AudioRenderer">
      <summary>Allow recording the main output of the game or specific groups in the AudioMixer.</summary>
    </member>
    <member name="T:UnityEngine.AudioReverbFilter">
      <summary>The Audio Reverb Filter takes an Audio Clip and distorts it to create a custom reverb effect.</summary>
    </member>
    <member name="T:UnityEngine.AudioReverbZone">
      <summary>
        <para>Reverb Zones are used when you want to create location based ambient effects in the scene.</para>
        <para>As the Audio Listener moves into a Reverb Zone, the ambient effect associated with the zone is gradually applied. At the max distance there is no effect and at the min distance the effect is fully applied. For example you can gradually change your character's footsteps sounds and create the feeling like you where entering into a cavern, going trough a room, swimming underwater, etc. You can always mix reverb zones to have combined effects. For more info check Reverb Zones in the manual.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioSettings">
      <summary>
        <para>Controls the global audio settings from script.</para>
        <para>Setup speaker output and format.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioSource">
      <summary>
        <para>A representation of audio sources in 3D.</para>
        <para>An AudioSource is attached to a <see cref="UnityEngine.GameObject"></see> for playing back sounds in a 3D environment. In order to play 3D sounds you also need to have a <see cref="UnityEngine.AudioListener"></see>. The audio listener is normally attached to the camera you want to use. Whether sounds are played in 3D or 2D is determined by <see cref="UnityEditor.AudioImporter"></see> settings. You can play a single audio clip using <see cref="UnityEngine.AudioSource.Play"></see>, <see cref="UnityEngine.AudioSource.Pause"></see> and <see cref="UnityEngine.AudioSource.Stop"></see>. You can also adjust its volume while playing using the <see cref="UnityEngine.AudioSource.volume"></see> property, or seek using <see cref="UnityEngine.AudioSource.time"></see>. Multiple sounds can be played on one AudioSource using <see cref="UnityEngine.AudioSource.PlayOneShot"></see>. You can play a clip at a static position in 3D space using <see cref="UnityEngine.AudioSource.PlayClipAtPoint"></see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Microphone">
      <summary>
        <para>Use this class to record to an <see cref="UnityEngine.AudioClip"></see> using a connected microphone.</para>
        <para>You can get a list of connected microphone(s) from the <see cref="UnityEngine.Microphone.devices"></see> property and then use the <see cref="UnityEngine.Microphone.Start"></see> and <see cref="UnityEngine.Microphone.End"></see> functions to start or end a recording session using one of the available devices.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MovieTexture">
      <summary>
        <para>Movie Textures are textures onto which movies are played back.</para>
        <para>They can be used for cutscene movie sequences, or to render movies into the scene itself.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Audio.AudioMixerSnapshot.TransitionTo(System.Single)">
      <summary>Performs an interpolated transition towards this snapshot over the time interval specified.</summary>
      <param name="timeToReach">Relative time after which this snapshot should be reached from any current state.</param>
    </member>
    <member name="P:UnityEngine.Audio.AudioMixer.outputAudioMixerGroup">
      <summary>
        <para>Routing target.</para>
        <para>The audio mixer to which this mixer routes its output.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Audio.AudioMixer.updateMode">
      <summary>
        <para>How time should progress for this AudioMixer. Used during Snapshot transitions.</para>
        <para>During update of AudioMixers and Snapshot transitions, this property defines how those transitions should progress. - AudioMixerUpdateMode.Normal updates the AudioMixer with scaled game time progression. - AudioMixerUpdateMode.UnscaledTime ignores Time.timeScale changes and updates the AudioMixer in realtime.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Audio.AudioMixer.ClearFloat(System.String)">
      <summary>Resets an exposed parameter to its initial value.</summary>
      <param name="name">Exposed parameter.</param>
      <returns>Returns false if the parameter was not found or could not be set.</returns>
    </member>
    <member name="M:UnityEngine.Audio.AudioMixer.FindMatchingGroups(System.String)">
      <summary>Connected groups in the mixer form a path from the mixer's master group to the leaves. This path has the format "Master Group/Child of Master Group/Grandchild of Master Group", so to find the grandchild group in this example, a valid search string would be for instance "randchi" which would return exactly one group while "hild" or "oup/" would return 2 different groups.</summary>
      <param name="subPath">Sub-string of the paths to be matched.</param>
      <returns>Groups in the mixer whose paths match the specified search path.</returns>
    </member>
    <member name="M:UnityEngine.Audio.AudioMixer.FindSnapshot(System.String)">
      <summary>The name must be an exact match.</summary>
      <param name="name">Name of snapshot object to be returned.</param>
      <returns>The snapshot identified by the name.</returns>
    </member>
    <member name="M:UnityEngine.Audio.AudioMixer.GetFloat(System.String,System.Single@)">
      <summary>Returns the value of the exposed parameter specified. If the parameter doesn't exist the function returns false. Prior to calling SetFloat and after ClearFloat has been called on this parameter the value returned will be that of the current snapshot or snapshot transition.</summary>
      <param name="name">Name of exposed parameter.</param>
      <param name="value">Return value of exposed parameter.</param>
      <returns>Returns false if the exposed parameter specified doesn't exist.</returns>
    </member>
    <member name="M:UnityEngine.Audio.AudioMixer.SetFloat(System.String,System.Single)">
      <summary>Sets the value of the exposed parameter specified. When a parameter is exposed, it is not controlled by mixer snapshots and can therefore only be changed via this function.</summary>
      <param name="name">Name of exposed parameter.</param>
      <param name="value">New value of exposed parameter.</param>
      <returns>Returns false if the exposed parameter was not found or snapshots are currently being edited.</returns>
    </member>
    <member name="M:UnityEngine.Audio.AudioMixer.TransitionToSnapshots(UnityEngine.Audio.AudioMixerSnapshot[],System.Single[],System.Single)">
      <summary>Transitions to a weighted mixture of the snapshots specified. This can be used for games that specify the game state as a continuum between states or for interpolating snapshots from a triangulated map location.</summary>
      <param name="snapshots">The set of snapshots to be mixed.</param>
      <param name="weights">The mix weights for the snapshots specified.</param>
      <param name="timeToReach">Relative time after which the mixture should be reached from any current state.</param>
    </member>
    <member name="P:UnityEngine.Audio.AudioPlayableOutput.Null">
      <summary>Returns an invalid AudioPlayableOutput.</summary>
    </member>
    <member name="M:UnityEngine.Audio.AudioPlayableOutput.Create(UnityEngine.Playables.PlayableGraph,System.String,UnityEngine.AudioSource)">
      <summary>
        <para>Creates an <see cref="UnityEngine.Audio.AudioPlayableOutput"></see> in the <see cref="UnityEngine.Playables.PlayableGraph"></see>.</para>
        <para>The <see cref="UnityEngine.AudioSource"></see> plays the source <see cref="UnityEngine.Playables.Playable"></see> of the <see cref="UnityEngine.Audio.AudioPlayableOutput"></see>. This source Playable can be set with SetSourcePlayable.</para>
      </summary>
      <param name="graph">The <see cref="UnityEngine.Playables.PlayableGraph"></see> that will contain the <see cref="UnityEngine.Animations.AnimationPlayableOutput"></see>.</param>
      <param name="name">The name of the output.</param>
      <param name="target">The <see cref="UnityEngine.AudioSource"></see> that will play the <see cref="UnityEngine.Audio.AudioPlayableOutput"></see> source <see cref="UnityEngine.Playables.Playable"></see>.</param>
      <returns>A new <see cref="UnityEngine.Audio.AudioPlayableOutput"></see> attached to the <see cref="UnityEngine.Playables.PlayableGraph"></see>.</returns>
    </member>
    <member name="M:UnityEngine.Audio.AudioClipPlayable.Create(UnityEngine.Playables.PlayableGraph,UnityEngine.AudioClip,System.Boolean)">
      <summary>Creates an <see cref="UnityEngine.Audio.AudioClipPlayable"></see> in the <see cref="UnityEngine.Playables.PlayableGraph"></see>.</summary>
      <param name="graph">The <see cref="UnityEngine.Playables.PlayableGraph"></see> that will contain the new <see cref="UnityEngine.Animations.AnimationLayerMixerPlayable"></see>.</param>
      <param name="clip">The <see cref="UnityEngine.AudioClip"></see> that will be added in the <see cref="UnityEngine.Playables.PlayableGraph"></see>.</param>
      <param name="looping">True if the clip should loop, false otherwise.</param>
      <returns>A <see cref="UnityEngine.Audio.AudioClipPlayable"></see> linked to the <see cref="UnityEngine.Playables.PlayableGraph"></see>.</returns>
    </member>
    <member name="F:UnityEngine.Audio.AudioMixerUpdateMode.Normal">
      <summary>
        <para>Update the AudioMixer with scaled game time.</para>
        <para>This means that Snapshot transitions will be affected by time scaling.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Audio.AudioMixerUpdateMode.UnscaledTime">
      <summary>
        <para>Update the AudioMixer with unscaled realtime.</para>
        <para>Use this to ignore the games current time scale and update Snapshot transitions in realtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Off">
      <summary>
        <para>No reverb preset selected.</para>
        <para>All the values are disabled and the sound is the default without any modifications.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Generic">
      <summary>Generic preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.PaddedCell">
      <summary>Padded cell preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Room">
      <summary>Room preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Bathroom">
      <summary>Bathroom preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Livingroom">
      <summary>Livingroom preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Stoneroom">
      <summary>Stoneroom preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Auditorium">
      <summary>Auditorium preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Concerthall">
      <summary>Concert hall preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Cave">
      <summary>Cave preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Arena">
      <summary>Arena preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Hangar">
      <summary>Hangar preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.CarpetedHallway">
      <summary>Carpeted hallway preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Hallway">
      <summary>Hallway preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.StoneCorridor">
      <summary>Stone corridor preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Alley">
      <summary>Alley preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Forest">
      <summary>Forest preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.City">
      <summary>City preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Mountains">
      <summary>Mountains preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Quarry">
      <summary>Quarry preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Plain">
      <summary>Plain preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioVelocityUpdateMode.Auto">
      <summary>Updates the source or listener in the fixed update loop if it is attached to a <see cref="UnityEngine.Rigidbody"></see>, dynamic otherwise.</summary>
    </member>
    <member name="F:UnityEngine.AudioVelocityUpdateMode.Fixed">
      <summary>Updates the source or listener in the fixed update loop.</summary>
    </member>
    <member name="F:UnityEngine.AudioVelocityUpdateMode.Dynamic">
      <summary>Updates the source or listener in the dynamic update loop.</summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.PCM">
      <summary>
        <para>Uncompressed pulse-code modulation.</para>
        <para>PCM is uncompressed raw audio data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.Vorbis">
      <summary>
        <para>Vorbis compression format.</para>
        <para>Raw vorbis format, without Ogg headers. This format is an optimised version of Ogg Vorbis that is more performant.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.ADPCM">
      <summary>
        <para>Adaptive differential pulse-code modulation.</para>
        <para>This compression format is cheap to decode but contains additional noise artifacts over other compression types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.MP3">
      <summary>
        <para>MPEG Audio Layer III.</para>
        <para>This codec has poor looping characteristics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.VAG">
      <summary>Sony proprietary hardware format.</summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.HEVAG">
      <summary>Sony proprietory hardware codec.</summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.XMA">
      <summary>Xbox One proprietary hardware format.</summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.AAC">
      <summary>AAC Audio Compression.</summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.GCADPCM">
      <summary>Nintendo ADPCM audio compression format.</summary>
    </member>
    <member name="F:UnityEngine.AudioCompressionFormat.ATRAC9">
      <summary>Sony proprietary hardware format.</summary>
    </member>
    <member name="F:UnityEngine.AudioDataLoadState.Unloaded">
      <summary>
        <para>Value returned by AudioClip.loadState for an AudioClip that has no audio data loaded and where loading has not been initiated yet.</para>
        <para>This is the initial value of AudioClip.loadState that has the option "Preload audio data" unchecked.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioDataLoadState.Loading">
      <summary>Value returned by AudioClip.loadState for an AudioClip that is currently loading audio data.</summary>
    </member>
    <member name="F:UnityEngine.AudioDataLoadState.Loaded">
      <summary>Value returned by AudioClip.loadState for an AudioClip that has succeeded loading its audio data.</summary>
    </member>
    <member name="F:UnityEngine.AudioDataLoadState.Failed">
      <summary>Value returned by AudioClip.loadState for an AudioClip that has failed loading its audio data.</summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Raw">
      <summary>Channel count is unaffected.</summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Mono">
      <summary>Channel count is set to 1. The speakers are monaural.</summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Stereo">
      <summary>Channel count is set to 2. The speakers are stereo. This is the editor default.</summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Quad">
      <summary>Channel count is set to 4. 4 speaker setup. This includes front left, front right, rear left, rear right.</summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Surround">
      <summary>Channel count is set to 5. 5 speaker setup. This includes front left, front right, center, rear left, rear right.</summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Mode5point1">
      <summary>Channel count is set to 6. 5.1 speaker setup. This includes front left, front right, center, rear left, rear right and a subwoofer.</summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Mode7point1">
      <summary>Channel count is set to 8. 7.1 speaker setup. This includes front left, front right, center, rear left, rear right, side left, side right and a subwoofer.</summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Prologic">
      <summary>Channel count is set to 2. Stereo output, but data is encoded in a way that is picked up by a Prologic/Prologic2 decoder and split into a 5.1 speaker setup.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.ParkingLot">
      <summary>Parking Lot preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.SewerPipe">
      <summary>Sewer pipe preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Underwater">
      <summary>Underwater presset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Drugged">
      <summary>Drugged preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Dizzy">
      <summary>Dizzy preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Psychotic">
      <summary>Psychotic preset.</summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.User">
      <summary>
        <para>User defined preset.</para>
        <para>Select this preset if you want to change manually the values of your preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioRolloffMode.Logarithmic">
      <summary>Use this mode when you want a real-world rolloff.</summary>
    </member>
    <member name="F:UnityEngine.AudioRolloffMode.Linear">
      <summary>Use this mode when you want to lower the volume of your sound over the distance.</summary>
    </member>
    <member name="F:UnityEngine.AudioRolloffMode.Custom">
      <summary>
        <para>Use this when you want to use a custom rolloff.</para>
        <para>Note: Currently is not possible to modify the volume curve via scripting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSourceCurveType.CustomRolloff">
      <summary>
        <para>Custom Volume Rolloff.</para>
        <para>This defines how the AudioSource volume is attenuated with distance from the AudioListener.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSourceCurveType.SpatialBlend">
      <summary>
        <para>The Spatial Blend.</para>
        <para>This defines how 2D or 3D an AudioSource is. 0 means the AudioSource is fully 2D 1 corresponds to the AudioSource being fully 3D.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSourceCurveType.ReverbZoneMix">
      <summary>
        <para>Reverb Zone Mix.</para>
        <para>This defines how much of the signal is given to the current Reverb Zone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSourceCurveType.Spread">
      <summary>
        <para>The 3D Spread.</para>
        <para>This defines the current 3D spread of the playing AudioSource.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Rectangular">
      <summary>W[n] = 1.0.</summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Triangle">
      <summary>W[n] = TRI(2n/N).</summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Hamming">
      <summary>W[n] = 0.54 - (0.46 * COS(n/N) ).</summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Hanning">
      <summary>W[n] = 0.5 * (1.0 - COS(n/N) ).</summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Blackman">
      <summary>W[n] = 0.42 - (0.5 * COS(n/N) ) + (0.08 * COS(2.0 * n/N) ).</summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.BlackmanHarris">
      <summary>W[n] = 0.35875 - (0.48829 * COS(1.0 * n/N)) + (0.14128 * COS(2.0 * n/N)) - (0.01168 * COS(3.0 * n/N)).</summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.devices">
      <summary>
        <para>Return a list of available devices.</para>
        <para>This queries the system for the list of devices connected and it can be slow. You should cache this value by keeping a copy of the result if you want to use it repeatedly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.deviceName">
      <summary>
        <para>Set this to specify the name of the device to use.</para>
        <para>This only has an effect when set while the camera is not running. Note: if you want to use WebCamTexture to get the camera stream from device connected through Unity Remote, then you must initalize it through the constructor. It's not possible to change device using WebCamTexture.deviceName from regular devices to remote devices and vice versa.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.didUpdateThisFrame">
      <summary>
        <para>Did the video buffer update this frame?</para>
        <para>Use this to check if the video buffer has changed since the last frame. When setting a low frame rate, it is likely that the video updates slower then the game, so it does not make sense to do expensive video processing in each Update call, so check this value before doing any processing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.isPlaying">
      <summary>Returns if the camera is currently playing.</summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.requestedFPS">
      <summary>
        <para>Set the requested frame rate of the camera device (in frames per second).</para>
        <para>It will use a closest frame rate to the one requested which is supported by the camera. The requested values only have an effect when set while the camera is not running.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.requestedHeight">
      <summary>
        <para>Set the requested height of the camera device.</para>
        <para>It will use a closest resolution to the one requested which is supported by the camera. The requested values only have an effect when set while the camera is not running.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.requestedWidth">
      <summary>
        <para>Set the requested width of the camera device.</para>
        <para>It will use a closest resolution to the one requested which is supported by the camera. The requested values only have an effect when set while the camera is not running.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.videoRotationAngle">
      <summary>
        <para>Returns an clockwise angle (in degrees), which can be used to rotate a polygon so camera contents are shown in correct orientation.</para>
        <para>Call <see cref="UnityEngine.Application.RequestUserAuthorization"></see> before creating a WebCamTexture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.videoVerticallyMirrored">
      <summary>
        <para>Returns if the texture image is vertically flipped.</para>
        <para>Please note, that this will query platform-specific part, which might be not ready before actual video feed started; so it is not enough to call it once after play.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixel(System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel color at coordinates (x, y).</para>
        <para>If the pixel coordinates are out of bounds (larger than width/height or small than 0), they will be clamped or repeat based on the texture's wrap mode. If you are reading a large block of pixels from the texture, it may be faster to use <see cref="UnityEngine.WebCamTexture.GetPixels"></see> which returns a whole block of pixel colors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixels">
      <summary>
        <para>Get a block of pixel colors.</para>
        <para>This function returns an array of pixel colors of the whole mip level of the texture. The returned array is a flattened 2D array, where pixels are laid out left to right, top to bottom (i.e. row after row). Array size is width by height of the mip level used. The default mip level is zero (the base texture) in which case the size is just the size of the texture. In general case, mip level size is <c>mipWidth=max(1,width&gt;&gt;miplevel)</c> and similarly for height. Using <c>GetPixels</c> can be faster than calling <see cref="UnityEngine.WebCamTexture.GetPixel"></see> repeatedly, especially for large textures. In addition, <c>GetPixels</c> can access individual mipmap levels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixels(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Get a block of pixel colors.</para>
        <para>This function is an extended version of <c>GetPixels</c> above; it does not return the whole mip level but only <c>blockWidth</c> by <c>blockHeight</c> region starting at <c>x,y</c>. The block must fit into the used mip level. The returned array is <c>blockWidth*blockHeight</c> size.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixels32(UnityEngine.Color32[])">
      <summary>
        <para>Returns the pixels data in raw format.</para>
        <para>This can be faster then calling <c>GetPixels</c>, as pixel data does not have to be converted to color structs, so you may want to use it if you need to do continuous processing on the video feed. You can optionally pass in an array of Color32s to use in <c>colors</c> to avoid allocating new memory each frame, which is faster when you are continuously reading data from the camera. The array needs to be initialized to a length matching width * height of the texture. If you don't pass an array, GetPixels32 will allocate one for you and return it.</para>
      </summary>
      <param name="colors">Optional array to receive pixel data.</param>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixels32">
      <summary>
        <para>Returns the pixels data in raw format.</para>
        <para>This can be faster then calling <c>GetPixels</c>, as pixel data does not have to be converted to color structs, so you may want to use it if you need to do continuous processing on the video feed. You can optionally pass in an array of Color32s to use in <c>colors</c> to avoid allocating new memory each frame, which is faster when you are continuously reading data from the camera. The array needs to be initialized to a length matching width * height of the texture. If you don't pass an array, GetPixels32 will allocate one for you and return it.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.Pause">
      <summary>
        <para>Pauses the camera.</para>
        <para>Call <see cref="UnityEngine.Application.RequestUserAuthorization"></see> before creating a WebCamTexture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.Play">
      <summary>
        <para>Starts the camera.</para>
        <para>Call <see cref="UnityEngine.Application.RequestUserAuthorization"></see> before creating a WebCamTexture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.Stop">
      <summary>
        <para>Stops the camera.</para>
        <para>Call <see cref="UnityEngine.Application.RequestUserAuthorization"></see> before creating a WebCamTexture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamDevice.isFrontFacing">
      <summary>True if camera faces the same direction a screen does, false otherwise.</summary>
    </member>
    <member name="P:UnityEngine.WebCamDevice.name">
      <summary>A human-readable name of the device. Varies across different systems.</summary>
    </member>
    <member name="F:UnityEngine.AudioClipLoadType.DecompressOnLoad">
      <summary>
        <para>The audio data is decompressed when the audio clip is loaded.</para>
        <para>The audio clip will load the data and make sure it's kept in memory in decompressed form, allowing scripts to modify the audio data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioClipLoadType.CompressedInMemory">
      <summary>
        <para>The audio data of the clip will be kept in memory in compressed form.</para>
        <para>The data is fully loaded into memory, but in compressed form, and therefore takes up the least amount of space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioClipLoadType.Streaming">
      <summary>
        <para>Streams audio data from disk.</para>
        <para>This generally results in the lowest memory-usage and offloads decoding to a dedicated streaming thread, therefore reducing CPU usage on the mixer thread.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioDistortionFilter.distortionLevel">
      <summary>Distortion value. 0.0 to 1.0. Default = 0.5.</summary>
    </member>
    <member name="M:UnityEngine.AudioClip.GetData(System.Single[],System.Int32)">
      <summary>
        <para>Fills an array with sample data from the clip.</para>
        <para>The samples are floats ranging from -1.0f to 1.0f. The sample count is determined by the length of the float array. Use the offsetSamples parameter to start the read from a specific position in the clip. If the read length from the offset is longer than the clip length, the read will wrap around and read the remaining samples from the start of the clip. Note that with compressed audio files, the sample data can only be retrieved when the <c>Load Type</c> is set to <c>Decompress on Load</c> in the audio importer. If this is not the case then the array will be returned with zeroes for all the sample values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioClip.LoadAudioData">
      <summary>Loads the audio data of a clip. Clips that have "Preload Audio Data" set will load the audio data automatically.</summary>
      <returns>Returns true if loading succeeded.</returns>
    </member>
    <member name="M:UnityEngine.AudioClip.SetData(System.Single[],System.Int32)">
      <summary>
        <para>Set sample data in a clip.</para>
        <para>The samples should be floats ranging from -1.0f to 1.0f (exceeding these limits will lead to artifacts and undefined behaviour). The sample count is determined by the length of the float array. Use offsetSamples to write into a random position in the clip. If the length from the offset is longer than the clip length, the write will wrap around and write the remaining samples from the start of the clip. Note that for compressed audio, the sample data can only be set when the <c>Load Type</c> is set to <c>Decompress on Load</c> in the audio importer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioClip.UnloadAudioData">
      <summary>Unloads the audio data associated with the clip. This works only for AudioClips that are based on actual sound file assets.</summary>
      <returns>Returns false if unloading failed.</returns>
    </member>
    <member name="M:UnityEngine.AudioClip.Create(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Creates a user AudioClip with a name and with the given length in samples, channels and frequency.</para>
        <para>Set your own audio data with SetData. Use the PCMReaderCallback and PCMSetPositionCallback delegates to get a callback whenever the clip reads data and changes the position. If stream is true, Unity will on demand read in small chunks of data. If it's false, all the samples will be read during the creation.</para>
      </summary>
      <param name="name">Name of clip.</param>
      <param name="lengthSamples">Number of sample frames.</param>
      <param name="channels">Number of channels per frame.</param>
      <param name="frequency">Sample frequency of clip.</param>
      <param name="stream">True if clip is streamed, that is if the pcmreadercallback generates data on the fly.</param>
      <returns>A reference to the created AudioClip.</returns>
    </member>
    <member name="M:UnityEngine.AudioClip.Create(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Creates a user AudioClip with a name and with the given length in samples, channels and frequency.</para>
        <para>Set your own audio data with SetData. Use the PCMReaderCallback and PCMSetPositionCallback delegates to get a callback whenever the clip reads data and changes the position. If stream is true, Unity will on demand read in small chunks of data. If it's false, all the samples will be read during the creation.</para>
      </summary>
      <param name="name">Name of clip.</param>
      <param name="lengthSamples">Number of sample frames.</param>
      <param name="channels">Number of channels per frame.</param>
      <param name="frequency">Sample frequency of clip.</param>
      <param name="_3D">Audio clip is played back in 3D.</param>
      <param name="stream">True if clip is streamed, that is if the pcmreadercallback generates data on the fly.</param>
      <returns>A reference to the created AudioClip.</returns>
    </member>
    <member name="F:UnityEngine.AudioConfiguration.dspBufferSize">
      <summary>The length of the DSP buffer in samples determining the latency of sounds by the audio output device.</summary>
    </member>
    <member name="F:UnityEngine.AudioConfiguration.numRealVoices">
      <summary>The current maximum number of simultaneously audible sounds in the game.</summary>
    </member>
    <member name="F:UnityEngine.AudioConfiguration.numVirtualVoices">
      <summary>The maximum number of managed sounds in the game. Beyond this limit sounds will simply stop playing.</summary>
    </member>
    <member name="F:UnityEngine.AudioConfiguration.sampleRate">
      <summary>The current sample rate of the audio output device used.</summary>
    </member>
    <member name="F:UnityEngine.AudioConfiguration.speakerMode">
      <summary>The current speaker mode used by the audio output device.</summary>
    </member>
    <member name="P:UnityEngine.AudioListener.pause">
      <summary>
        <para>The paused state of the audio system.</para>
        <para>If set to true, all AudioSources playing will be paused. This works in the same way as pausing the game in the editor. While the pause-state is true, the AudioSettings.dspTime will be frozen and further AudioSource play requests will start off paused. If you want certain sounds to still play during the pause, you need to set the ignoreListenerPause property on the AudioSource to true for these. This is typically menu item sounds or background music for the menu. Any scheduled play requests will be frozen in time, so that if you scheduled a sound to play after 3 seconds and paused the audio system 1 second after this, the scheduled sounds will start playing 2 seconds after unpausing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioListener.volume">
      <summary>Controls the game sound volume (0.0 to 1.0).</summary>
    </member>
    <member name="P:UnityEngine.AudioListener.velocityUpdateMode">
      <summary>
        <para>This lets you set whether the Audio Listener should be updated in the fixed or dynamic update.</para>
        <para>Make sure this is set to update in the same update loop as the Audio Listener is moved in if you are experiencing problems with Doppler effect simulation. The default setting will automatically set the listener to be updated in the fixed update loop if it is attached to a rigidbody, and dynamic otherwise.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioListener.GetOutputData(System.Single[],System.Int32)">
      <summary>
        <para>Provides a block of the listener (master)'s output data.</para>
        <para>The array given in the samples parameter will be filled with the requested data.</para>
      </summary>
      <param name="samples">The array to populate with audio samples. Its length must be a power of 2.</param>
      <param name="channel">The channel to sample from.</param>
      <seealso cref="M:UnityEngine.AudioListener.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.GetOutputData(System.Single[],System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioListener.GetOutputData(System.Int32,System.Int32)">
      <summary>
        <para>
          <c>Deprecated Version</c>. Returns a block of the listener (master)'s output data.</para>
        <para>This variation of the function allocates a new array each time it is called. Use the Non-alloc version instead for better performance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioListener.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      <summary>
        <para>Provides a block of the listener (master)'s spectrum data.</para>
        <para>The array given in the samples parameter will be filled with the requested data. Number of values (the length of the samples array) must be a power of 2. (ie 128/256/512 etc). Min = 64. Max = 8192. Use <see cref="UnityEngine.FFTWindow"></see> to reduce leakage between frequency bins/bands. Note, the more complex window type, the better the quality, but reduced speed. This function will use the sampling rate specified in AudioSettings.outputSampleRate, and NOT the sampling rate specified for the audio clip.</para>
      </summary>
      <param name="samples">The array to populate with audio samples. Its length must be a power of 2.</param>
      <param name="channel">The channel to sample from.</param>
      <param name="window">The FFTWindow type to use when sampling.</param>
      <seealso cref="M:UnityEngine.AudioListener.GetOutputData(System.Single[],System.Int32)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.GetOutputData(System.Single[],System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioListener.GetSpectrumData(System.Int32,System.Int32,UnityEngine.FFTWindow)">
      <summary>
        <para>
          <c>Deprecated Version</c>. Returns a block of the listener (master)'s spectrum data.</para>
        <para>This variation of the function allocates a new array each time it is called. Use the Non-alloc version instead for better performance.</para>
      </summary>
      <param name="numSamples">Number of values (the length of the samples array). Must be a power of 2. Min = 64. Max = 8192.</param>
      <param name="channel">The channel to sample from.</param>
      <param name="window">The FFTWindow type to use when sampling.</param>
    </member>
    <member name="P:UnityEngine.AudioClip.ambisonic">
      <summary>
        <para>Returns true if this audio clip is ambisonic (read-only).</para>
        <para>Corresponds to the ambisonic flag in the AudioClip's inspector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioClip.channels">
      <summary>The number of channels in the audio clip. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.AudioClip.frequency">
      <summary>The sample frequency of the clip in Hertz. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.AudioClip.length">
      <summary>The length of the audio clip in seconds. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.AudioClip.loadInBackground">
      <summary>Corresponding to the "Load In Background" flag in the inspector, when this flag is set, the loading will happen delayed without blocking the main thread.</summary>
    </member>
    <member name="P:UnityEngine.AudioClip.loadState">
      <summary>Returns the current load state of the audio data associated with an AudioClip.</summary>
    </member>
    <member name="P:UnityEngine.AudioClip.loadType">
      <summary>
        <para>The load type of the clip (read-only).</para>
        <para>The load type, which can be set up in the inspector of the AudioClip, controls how the clip is being loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioClip.preloadAudioData">
      <summary>Preloads audio data of the clip when the clip asset is loaded. When this flag is off, scripts have to call AudioClip.LoadAudioData() to load the data before the clip can be played. Properties like length, channels and format are available before the audio data has been loaded.</summary>
    </member>
    <member name="P:UnityEngine.AudioClip.samples">
      <summary>The length of the audio clip in samples. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.delay">
      <summary>Chorus delay in ms. 0.1 to 100.0. Default = 40.0 ms.</summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.depth">
      <summary>Chorus modulation depth. 0.0 to 1.0. Default = 0.03.</summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.dryMix">
      <summary>Volume of original signal to pass to output. 0.0 to 1.0. Default = 0.5.</summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.rate">
      <summary>Chorus modulation rate in hz. 0.0 to 20.0. Default = 0.8 hz.</summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.wetMix1">
      <summary>Volume of 1st chorus tap. 0.0 to 1.0. Default = 0.5.</summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.wetMix2">
      <summary>Volume of 2nd chorus tap. This tap is 90 degrees out of phase of the first tap. 0.0 to 1.0. Default = 0.5.</summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.wetMix3">
      <summary>Volume of 3rd chorus tap. This tap is 90 degrees out of phase of the second tap. 0.0 to 1.0. Default = 0.5.</summary>
    </member>
    <member name="P:UnityEngine.AudioHighPassFilter.cutoffFrequency">
      <summary>Highpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioHighPassFilter.highpassResonanceQ">
      <summary>
        <para>Determines how much the filter's self-resonance isdampened.</para>
        <para>Higher Highpass resonance Q indicates a lower rate of energy loss i.e. the oscillations die out more slowly. Highpass resonance Q value goes from 1.0 to 10.0. Default = 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioEchoFilter.decayRatio">
      <summary>Echo decay per delay. 0 to 1. 1.0 = No decay, 0.0 = total decay (i.e. simple 1 line delay). Default = 0.5.</summary>
    </member>
    <member name="P:UnityEngine.AudioEchoFilter.delay">
      <summary>Echo delay in ms. 10 to 5000. Default = 500.</summary>
    </member>
    <member name="P:UnityEngine.AudioEchoFilter.dryMix">
      <summary>Volume of original signal to pass to output. 0.0 to 1.0. Default = 1.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioEchoFilter.wetMix">
      <summary>Volume of echo signal to pass to output. 0.0 to 1.0. Default = 1.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSettings.driverCapabilities">
      <summary>Returns the speaker mode capability of the current audio driver. (Read Only)</summary>
    </member>
    <member name="P:UnityEngine.AudioSettings.dspTime">
      <summary>
        <para>Returns the current time of the audio system.</para>
        <para>This is a value specified in seconds and based on the actual number of samples the audio system processes and is therefore much more precise than the time obtained via the <see cref="UnityEngine.Time.time"></see> property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSettings.outputSampleRate">
      <summary>
        <para>Get the mixer's current output rate.</para>
        <para>As of version 5.0 setting the sample rate from scripts is no longer supported. This has to be set in the Audio section of the project settings instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSettings.speakerMode">
      <summary>
        <para>Gets the current speaker mode. Default is 2 channel stereo.</para>
        <para>Setting the speaker mode from scripts is no longer supported. Use <see cref="UnityEngine.AudioSettings.GetConfiguration"></see> and <see cref="UnityEngine.AudioSettings.Reset"></see> to adjust AudioSettings.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSettings.GetConfiguration">
      <summary>
        <para>Returns the current configuration of the audio device and system. The values in the struct may then be modified and reapplied via <see cref="UnityEngine.AudioSettings.Reset"></see>.</para>
        <para>See <see cref="UnityEngine.AudioSettings.Reset"></see> for an example.</para>
      </summary>
      <returns>The new configuration to be applied.</returns>
    </member>
    <member name="M:UnityEngine.AudioSettings.GetDSPBufferSize(System.Int32@,System.Int32@)">
      <summary>
        <para>Get the mixer's buffer size in samples.</para>
        <para>For mobiles (iOS devices and Android) the is also settable from the menu 'Audio Settings-&gt;Mobile DSP Buffer size'. The software mixer mixes to a ringbuffer. The size of this ringbuffer is determined here. It mixes a block of sound data every 'bufferlength' number of samples, and there are 'numbuffers' number of these blocks that make up the entire ringbuffer. Adjusting these values can lead to extremely low latency performance (smaller values), or greater stability in sound output (larger values). Warning! The 'buffersize' is generally best left alone. Making the granularity smaller will just increase CPU usage (cache misses and DSP network overhead). Making it larger affects how often you hear commands update such as volume/pitch/pan changes. Anything above 20ms will be noticable and sound parameter changes will be obvious instead of smooth. Unity chooses the most optimal size by default for best stability, depending on the output type, and if the drivers are emulated or not (for example DirectSound is emulated using waveOut on NT). It is not recommended changing this value unless you really need to. You may get worse performance than the default settings chosen by Unity. As of version 5.0 setting the DSP buffer size from scripts is no longer supported. This has to be set in the Audio section of the project settings instead.</para>
      </summary>
      <param name="bufferLength">Is the length of each buffer in the ringbuffer.</param>
      <param name="numBuffers">Is number of buffers.</param>
    </member>
    <member name="M:UnityEngine.AudioSettings.GetSpatializerPluginName">
      <summary>
        <para>Returns the name of the spatializer selected on the currently-running platform.</para>
        <para>This function can be used in the Editor and in player builds.</para>
      </summary>
      <returns>The spatializer plugin name.</returns>
    </member>
    <member name="M:UnityEngine.AudioSettings.GetSpatializerPluginNames">
      <summary>
        <para>Returns an array with the names of all the available spatializer plugins.</para>
        <para>This is an Editor-only function.</para>
      </summary>
      <returns>An array of spatializer names.</returns>
    </member>
    <member name="M:UnityEngine.AudioSettings.Reset(UnityEngine.AudioConfiguration)">
      <summary>Performs a change of the device configuration. In response to this the <see cref="UnityEngine.AudioSettings.OnAudioConfigurationChanged"></see> delegate is invoked with the argument deviceWasChanged=false. It cannot be guaranteed that the exact settings specified can be used, but the an attempt is made to use the closest match supported by the system.</summary>
      <param name="config">The new configuration to be used.</param>
      <returns>True if all settings could be successfully applied.</returns>
    </member>
    <member name="M:UnityEngine.AudioSettings.SetSpatializerPluginName(System.String)">
      <summary>
        <para>Sets the spatializer plugin for all platform groups. If a null or empty string is passed in, the existing spatializer plugin will be cleared.</para>
        <para>This is an Editor-only function. This function will throw an argument exception on an invalid plugin name.</para>
      </summary>
      <param name="pluginName">The spatializer plugin name.</param>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.decayHFRatio">
      <summary>High-frequency to mid-frequency decay time ratio.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.decayTime">
      <summary>Reverberation decay time at mid frequencies.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.density">
      <summary>Value that controls the modal density in the late reverberation decay.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.diffusion">
      <summary>Value that controls the echo density in the late reverberation decay.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.HFReference">
      <summary>Reference high frequency (hz).</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.LFReference">
      <summary>Reference low frequency (hz).</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.maxDistance">
      <summary>The distance from the centerpoint that the reverb will not have any effect. Default = 15.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.minDistance">
      <summary>The distance from the centerpoint that the reverb will have full effect at. Default = 10.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reflections">
      <summary>Early reflections level relative to room effect.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reflectionsDelay">
      <summary>Initial reflection delay time.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reverb">
      <summary>Late reverberation level relative to room effect.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reverbDelay">
      <summary>Late reverberation delay time relative to initial reflection.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reverbPreset">
      <summary>Set/Get reverb preset properties.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.room">
      <summary>Room effect level (at mid frequencies).</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.roomHF">
      <summary>Relative room effect level at high frequencies.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.roomLF">
      <summary>Relative room effect level at low frequencies.</summary>
    </member>
    <member name="M:UnityEngine.AudioRenderer.GetSampleCountForCaptureFrame">
      <summary>Returns the number of samples available since the last time <see cref="UnityEngine.AudioRenderer.Render"></see> was called. This is dependent on the frame capture rate.</summary>
      <returns>Number of samples available since last recorded frame.</returns>
    </member>
    <member name="M:UnityEngine.AudioRenderer.Start">
      <summary>Enters audio recording mode. After this Unity will output silence until <see cref="UnityEngine.AudioRenderer.Stop"></see> is called.</summary>
      <returns>True if the engine was switched into output recording mode. False if it is already recording.</returns>
    </member>
    <member name="M:UnityEngine.AudioRenderer.Stop">
      <summary>Exits audio recording mode. After this audio output will be audible again.</summary>
      <returns>True if the engine was recording when this function was called.</returns>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.decayHFRatio">
      <summary>Decay HF Ratio : High-frequency to low-frequency decay time ratio. Ranges from 0.1 to 2.0. Default is 0.5.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.decayTime">
      <summary>Reverberation decay time at low-frequencies in seconds. Ranges from 0.1 to 20.0. Default is 1.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.density">
      <summary>Reverberation density (modal density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.diffusion">
      <summary>Reverberation diffusion (echo density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.bypassEffects">
      <summary>Bypass effects (Applied from filter components or global listener filters).</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.dryLevel">
      <summary>Mix level of dry signal in output in mB. Ranges from -10000.0 to 0.0. Default is 0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.bypassListenerEffects">
      <summary>When set global effects on the AudioListener will not be applied to the audio signal generated by the AudioSource. Does not apply if the AudioSource is playing into a mixer group.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.hfReference">
      <summary>Reference high frequency in Hz. Ranges from 20.0 to 20000.0. Default is 5000.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.bypassReverbZones">
      <summary>When set doesn't route the signal from an AudioSource into the global reverb associated with reverb zones.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.lfReference">
      <summary>Reference low-frequency in Hz. Ranges from 20.0 to 1000.0. Default is 250.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.clip">
      <summary>The default <see cref="UnityEngine.AudioClip"></see> to play.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reflectionsDelay">
      <summary>Late reverberation level relative to room effect in mB. Ranges from -10000.0 to 2000.0. Default is 0.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.dopplerLevel">
      <summary>Sets the Doppler scale for this AudioSource.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reflectionsLevel">
      <summary>Early reflections level relative to room effect in mB. Ranges from -10000.0 to 1000.0. Default is -10000.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.ignoreListenerPause">
      <summary>
        <para>Allows AudioSource to play even though AudioListener.pause is set to true. This is useful for the menu element sounds or background music in pause menus.</para>
        <para>This property can only be set via the script and is not serialized.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.ignoreListenerVolume">
      <summary>
        <para>This makes the audio source not take into account the volume of the audio listener.</para>
        <para>Enable this when playing back music. When playing back music you want a separate setting which is unaffected by the normal sound effects volume.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reverbDelay">
      <summary>Late reverberation delay time relative to first reflection in seconds. Ranges from 0.0 to 0.1. Default is 0.04.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.isPlaying">
      <summary>
        <para>Is the <see cref="UnityEngine.AudioSource.clip"></see> playing right now (Read Only)?</para>
        <para>Note: AudioSource.isPlaying will return <c>false</c> when AudioSource.Pause() is called. When you use AudioSource.Play() again back, it will return true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reverbLevel">
      <summary>Late reverberation level relative to room effect in mB. Ranges from -10000.0 to 2000.0. Default is 0.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reverbPreset">
      <summary>Set/Get reverb preset properties.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.isVirtual">
      <summary>
        <para>True if all sounds played by the AudioSource (main sound started by Play() or playOnAwake as well as one-shots) are culled by the audio system.</para>
        <para>A sound is culled when its resulting volume is lower than the volumes of the N loudest voices, where N is the number of maximum audible sounds specified in the audio project settings or via <see cref="UnityEngine.AudioConfiguration"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.room">
      <summary>Room effect level at low frequencies in mB. Ranges from -10000.0 to 0.0. Default is 0.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.loop">
      <summary>
        <para>Is the audio clip looping?</para>
        <para>If you disable looping on a playing AudioSource the sound will stop after the end of the current loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.roomHF">
      <summary>Room effect high-frequency level re. low frequency level in mB. Ranges from -10000.0 to 0.0. Default is 0.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.maxDistance">
      <summary>
        <para>(Logarithmic rolloff) MaxDistance is the distance a sound stops attenuating at.</para>
        <para>(Linear rolloff) MaxDistance is the distance where the sound is completely inaudible.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.minDistance">
      <summary>
        <para>Within the Min distance the AudioSource will cease to grow louder in volume.</para>
        <para>Outside the min distance the volume starts to attenuate.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.roomLF">
      <summary>Room effect low-frequency level in mB. Ranges from -10000.0 to 0.0. Default is 0.0.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.mute">
      <summary>Un- / Mutes the AudioSource. Mute sets the volume=0, Un-Mute restore the original volume.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.outputAudioMixerGroup">
      <summary>The target group to which the AudioSource should route its signal.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.panStereo">
      <summary>
        <para>Pans a playing sound in a stereo way (left or right). This only applies to sounds that are Mono or Stereo.</para>
        <para>This pan is applied before 3D panning calculations are considered. In other words, stereo panning affects the left right balance of the sound before it is spatialised in 3D. Mono sounds are panned from left to right using constant power panning (non linear fade). This means when pan = 0.0, the balance for the sound in each speaker is 71% left and 71% right, not 50% left and 50% right. This gives (audibly) smoother pans. Stereo sounds heave each left/right value faded up and down according to the specified pan position. This means when pan = 0.0, the balance for the sound in each speaker is 100% left and 100% right. When pan = -1.0, only the left channel of the stereo sound is audible, when pan = 1.0, only the right channel of the stereo sound is audible. Values range from -1.0 to 1.0. -1.0 = Full left 0.0 = center 1.0 = full right Default = 0.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.pitch">
      <summary>The pitch of the audio source.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.playOnAwake">
      <summary>If set to true, the audio source will automatically start playing on awake.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.priority">
      <summary>
        <para>Sets the priority of the <see cref="UnityEngine.AudioSource"></see>.</para>
        <para>Unity is virtualizing AudioSources, when there's more AudioSources playing than available hardware channels. The AudioSources with lowest priority (and audibility) is virtualized first. Priority is an integer between 0 and 255. 0=highest priority, 255=lowest priority.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.reverbZoneMix">
      <summary>
        <para>The amount by which the signal from the AudioSource will be mixed into the global reverb associated with the Reverb Zones.</para>
        <para>The range from 0 to 1 is linear (like the volume property) while the range from 1 to 1.1 is an extra boost range that allows you to boost the reverberated signal by 10 dB. The associated curve in combination with the distance-based attenuation curve is useful when trying to simulate transitions from near-field to distant sounds. Note that prior to Unity 5.0 reverb zones were not applied to 2D sounds. With the generalization of 2D and 3D sounds in Unity 5.0 through the Spatial Blend parameter the reverb can now be applied to any sound. Therefore when importing Unity projects made with versions prior to 5.0 this parameter will be set to 0 for all the sounds that were 2D sounds, but is now adjustable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.rolloffMode">
      <summary>Sets/Gets how the AudioSource attenuates over distance.</summary>
    </member>
    <member name="P:UnityEngine.AudioSource.spatialBlend">
      <summary>
        <para>Sets how much this AudioSource is affected by 3D spatialisation calculations (attenuation, doppler etc). 0.0 makes the sound full 2D, 1.0 makes it full 3D.</para>
        <para>Aside from determining if this AudioSource is heard as a 2D or 3D source, this property is useful to morph between the two modes. 3D spatial calculations are applied after stereo panning is determined and can be used in conjunction with panStereo. Morphing between the 2 modes is useful for sounds that should be progressively heard as normal 2D sounds the closer they are to the listener.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.spatialize">
      <summary>
        <para>Enables or disables spatialization.</para>
        <para>Custom spatializer effects improve the realism of sound propagation by incorporating the binaural head-related transfer function (HRTF) such that the listener can better sense the directionality of the sound through the filtering of the head and the micro-delays between the ears. Unity supports custom spatialization effects as optional plugins through the native audio plugin system, and in case such plugins are present, will show a "Spatialize" checkbox on the AudioSource that corresponds to this property. If no plugin is present (and selected in the project audio settings), attempts to set this property to true will fail with a warning.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.spatializePostEffects">
      <summary>
        <para>Determines if the spatializer effect is inserted before or after the effect filters.</para>
        <para>This flag only has an effect if the spatialize flag is enabled on the AudioSource. See <see cref="UnityEngine.AudioSource.spatialize"></see> for further information about spatialization.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.spread">
      <summary>
        <para>Sets the spread angle (in degrees) of a 3d stereo or multichannel sound in speaker space.</para>
        <para>0 = all sound channels are located at the same speaker location and is 'mono'. 360 = all subchannels are located at the opposite speaker location to the speaker location that it should be according to 3D position. Default = 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.time">
      <summary>
        <para>Playback position in seconds.</para>
        <para>Use this to read current playback time or to seek to a new playback time. Be aware that: On a compressed audio track position does not necessary reflect the actual time in the track Compressed audio is represented as a set of so-called packets. The length of a packet depends on the compression settings and can quite often be 2-3 seconds per packet.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.timeSamples">
      <summary>
        <para>Playback position in PCM samples.</para>
        <para>Use this to read current playback time or to seek to a new playback time in samples, if you want more precise timing than what <see cref="UnityEngine.AudioSource.time"></see> variable allows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.velocityUpdateMode">
      <summary>
        <para>Whether the Audio Source should be updated in the fixed or dynamic update.</para>
        <para>Make sure this is set to update in the same update loop as the Audio Source is moved in if you are experiencing problems with Doppler effect simulation for this source. The default setting will automatically set the source to be updated in the fixed update loop if it is attached to a rigidbody, and dynamic otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.volume">
      <summary>
        <para>The volume of the audio source (0.0 to 1.0).</para>
        <para>The AudioSource’s volume property controls the level of sound coming from an AudioClip. The highest volume level is 1 and the lowest is 0 where no sound is heard.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSource.GetAmbisonicDecoderFloat(System.Int32,System.Single@)">
      <summary>
        <para>Reads a user-defined parameter of a custom ambisonic decoder effect that is attached to an AudioSource.</para>
        <para>Since this is for internal use in custom inspectors controlling custom ambisonic decoder effects implemented as native audio plugins, it is up to the decoder to perform necessary clipping on the UI and native sides through the setparameter/getparameter callbacks of the native audio plugin.</para>
      </summary>
      <param name="index">Zero-based index of user-defined parameter to be read.</param>
      <param name="value">Return value of the user-defined parameter that is read.</param>
      <returns>True, if the parameter could be read.</returns>
    </member>
    <member name="M:UnityEngine.AudioSource.GetCustomCurve(UnityEngine.AudioSourceCurveType)">
      <summary>
        <para>Get the current custom curve for the given AudioSourceCurveType.</para>
        <para>Note that if there is no curve set, or the corresponding curve type value setter has been set, a single key AnimationCurve will be returned corresponding to the current value.</para>
      </summary>
      <param name="type">The curve type to get.</param>
      <returns>The custom AnimationCurve corresponding to the given curve type.</returns>
    </member>
    <member name="M:UnityEngine.AudioSource.GetOutputData(System.Single[],System.Int32)">
      <summary>
        <para>Provides a block of the currently playing source's output data.</para>
        <para>The array given in the samples parameter will be filled with the requested data.</para>
      </summary>
      <param name="samples">The array to populate with audio samples. Its length must be a power of 2.</param>
      <param name="channel">The channel to sample from.</param>
      <seealso cref="M:UnityEngine.AudioSource.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioListener.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioListener.GetOutputData(System.Single[],System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioSource.GetOutputData(System.Int32,System.Int32)">
      <summary>
        <para>
          <c>Deprecated Version</c>. Returns a block of the currently playing source's output data.</para>
        <para>This variation of the function allocates a new array each time it is called. Use the Non-alloc version instead for better performance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSource.GetSpatializerFloat(System.Int32,System.Single@)">
      <summary>
        <para>Reads a user-defined parameter of a custom spatializer effect that is attached to an AudioSource.</para>
        <para>Since this is for internal use in custom inspectors controlling custom spatializer effects implemented as native audio plugins, it is up to the spatializer to perform necessary clipping on the UI and native sides through the setparameter/getparameter callbacks of the native audio plugin.</para>
      </summary>
      <param name="index">Zero-based index of user-defined parameter to be read.</param>
      <param name="value">Return value of the user-defined parameter that is read.</param>
      <returns>True, if the parameter could be read.</returns>
    </member>
    <member name="M:UnityEngine.AudioSource.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      <summary>
        <para>Provides a block of the currently playing audio source's spectrum data.</para>
        <para>The array given in the samples parameter will be filled with the requested data. Number of values (the length of the samples array provided) must be a power of 2. (ie 128/256/512 etc). Min = 64. Max = 8192. Use <see cref="UnityEngine.FFTWindow"></see> to reduce leakage between frequency bins/bands. Note, the more complex window type, the better the quality, but reduced speed. This function will use the sampling rate specified in AudioSettings.outputSampleRate, and NOT the sampling rate specified for the audio clip.</para>
      </summary>
      <param name="samples">The array to populate with audio samples. Its length must be a power of 2.</param>
      <param name="channel">The channel to sample from.</param>
      <param name="window">The FFTWindow type to use when sampling.</param>
      <seealso cref="M:UnityEngine.AudioSource.GetOutputData(System.Single[],System.Int32)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioListener.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioListener.GetOutputData(System.Single[],System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioSource.GetSpectrumData(System.Int32,System.Int32,UnityEngine.FFTWindow)">
      <summary>
        <para>Deprecated Version. Returns a block of the currently playing source's spectrum data.</para>
        <para>This variation of the function allocates a new array each time it is called. Use the Non-alloc version instead for better performance. Number of values (numSamples) must be a power of 2. (ie 128/256/512 etc). Min = 64. Max = 8192. Use <see cref="UnityEngine.FFTWindow"></see> to reduce leakage between frequency bins/bands. Note, the more complex window type, the better the quality, but reduced speed.</para>
      </summary>
      <param name="numSamples">The number of samples to retrieve. Must be a power of 2.</param>
      <param name="channel">The channel to sample from.</param>
      <param name="window">The FFTWindow type to use when sampling.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.Pause">
      <summary>Pauses playing the <see cref="UnityEngine.AudioSource.clip"></see>.</summary>
      <seealso cref="M:UnityEngine.AudioSource.Play(System.UInt64)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.Stop">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioSource.Play(System.UInt64)">
      <summary>
        <para>Plays the <see cref="UnityEngine.AudioSource.clip"></see> with an optional certain delay.</para>
        <para>The delay parameter is deprecated, please use the newer PlayDelayed function instead which specifies the delay in seconds. Note: To obtain sample accuracy with an <see cref="UnityEngine.AudioClip"></see> with a different samplerate (than 44.1 khz) you have to do the math yourselves. Delaying an audiosource with an attached <see cref="UnityEngine.AudioClip"></see> with samplerate of, say, 32 khz, with 16k samples(.5 sec) is done by Play(22050). ((44100/32000) * 16000 = 22050). Note: The <see cref="UnityEngine.AudioSource.PlayScheduled"></see> API will give you more accurate control over when the audio clip is played.</para>
      </summary>
      <param name="delay">Delay in number of samples, assuming a 44100Hz sample rate (meaning that Play(44100) will delay the playing by exactly 1 sec).</param>
      <seealso cref="M:UnityEngine.AudioSource.Stop">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.Pause">
      </seealso>
      <seealso cref="P:UnityEngine.AudioSource.clip">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.PlayScheduled(System.Double)">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioSource.Play">
      <summary>
        <para>Plays the <see cref="UnityEngine.AudioSource.clip"></see> with an optional certain delay.</para>
        <para>The delay parameter is deprecated, please use the newer PlayDelayed function instead which specifies the delay in seconds. Note: To obtain sample accuracy with an <see cref="UnityEngine.AudioClip"></see> with a different samplerate (than 44.1 khz) you have to do the math yourselves. Delaying an audiosource with an attached <see cref="UnityEngine.AudioClip"></see> with samplerate of, say, 32 khz, with 16k samples(.5 sec) is done by Play(22050). ((44100/32000) * 16000 = 22050). Note: The <see cref="UnityEngine.AudioSource.PlayScheduled"></see> API will give you more accurate control over when the audio clip is played.</para>
      </summary>
      <seealso cref="M:UnityEngine.AudioSource.Stop">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.Pause">
      </seealso>
      <seealso cref="P:UnityEngine.AudioSource.clip">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.PlayScheduled(System.Double)">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayDelayed(System.Single)">
      <summary>
        <para>Plays the <see cref="UnityEngine.AudioSource.clip"></see> with a delay specified in seconds. Users are advised to use this function instead of the old Play(delay) function that took a delay specified in samples relative to a reference rate of 44.1 kHz as an argument.</para>
        <para>Note: This function replaces the Play(delay) function when called with the delay-argument. In that function the delay had to be specified as samples relative to a reference rate of 44100. This is inconvenient when the engine is running on a different sample rate and the source sound has an even different rate. Working with delays specified in seconds makes this independent of these.</para>
      </summary>
      <param name="delay">Delay time specified in seconds.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayOneShot(UnityEngine.AudioClip,System.Single)">
      <summary>Plays an <see cref="UnityEngine.AudioClip"></see>, and scales the <see cref="UnityEngine.AudioSource"></see> volume by volumeScale.</summary>
      <param name="clip">The clip being played.</param>
      <param name="volumeScale">The scale of the volume (0-1).</param>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayOneShot(UnityEngine.AudioClip)">
      <summary>Plays an <see cref="UnityEngine.AudioClip"></see>, and scales the <see cref="UnityEngine.AudioSource"></see> volume by volumeScale.</summary>
      <param name="clip">The clip being played.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayScheduled(System.Double)">
      <summary>
        <para>Plays the <see cref="UnityEngine.AudioSource.clip"></see> at a specific time on the absolute time-line that AudioSettings.dspTime reads from.</para>
        <para>This is the preferred way to stitch AudioClips in music players because it is independent of the frame rate and gives the audio system enough time to prepare the playback of the sound to fetch it from media where the opening and buffering takes a lot of time (streams) without causing sudden CPU spikes.</para>
        <para>The example at <see cref="UnityEngine.AudioSource.SetScheduledEndTime"></see> shows how you can play two audio clips without pops or clicks between the clips. The approach is to have two AudioSources with clips attached, and queue up each clip using its AudioSource.</para>
      </summary>
      <param name="time">Time in seconds on the absolute time-line that AudioSettings.dspTime refers to for when the sound should start playing.</param>
      <seealso cref="M:UnityEngine.AudioSource.SetScheduledStartTime(System.Double)">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioSource.SetAmbisonicDecoderFloat(System.Int32,System.Single)">
      <summary>
        <para>Sets a user-defined parameter of a custom ambisonic decoder effect that is attached to an AudioSource.</para>
        <para>Since this is for internal use in custom inspectors controlling custom ambisonic decoder effects implemented as native audio plugins, it is up to the decoder to perform necessary clipping on the UI and native sides through the setparameter/getparameter callbacks of the native audio plugin.</para>
      </summary>
      <param name="index">Zero-based index of user-defined parameter to be set.</param>
      <param name="value">New value of the user-defined parameter.</param>
      <returns>True, if the parameter could be set.</returns>
    </member>
    <member name="M:UnityEngine.AudioSource.SetCustomCurve(UnityEngine.AudioSourceCurveType,UnityEngine.AnimationCurve)">
      <summary>
        <para>Set the custom curve for the given AudioSourceCurveType.</para>
        <para>The curve will be scaled so that it is applied over AudioSource.maxDistance from the AudioSource. Note that the internal AnimationCurve to be rescaled to range from 0..1 for performance reasons. This means calling AudioSource.GetCustomCurve will return a potentially different curve to what was just set.</para>
      </summary>
      <param name="type">The curve type that should be set.</param>
      <param name="curve">The curve that should be applied to the given curve type.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.SetScheduledEndTime(System.Double)">
      <summary>
        <para>Changes the time at which a sound that has already been scheduled to play will end. Notice that depending on the timing not all rescheduling requests can be fulfilled.</para>
        <para>Note that the time specified is still a time on the absolute time-line, meaning that the sound will stop when reaching that time, regardless of when it was started. So if you have a 5 second long sound and want it to play at time T and stop after 3 seconds (i.e. silencing the last 2 seconds of the sound), you need to specify the end time to be T+3. This function is useful in music systems to overcome the discontinuities in signals that frame-based lossy codecs cause.</para>
        <para>Note: If possible create clips that overlap, and use the scheduled end time for the first, and <see cref="UnityEngine.AudioSource.time"></see> for the second to trim out the overlapped part, as the example above shows.</para>
      </summary>
      <param name="time">Time in seconds.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.SetScheduledStartTime(System.Double)">
      <summary>
        <para>Changes the time at which a sound that has already been scheduled to play will start.</para>
        <para>Notice that depending on the timing not all rescheduling requests can be fulfilled. One interesting use case for this is stinger sound effects that are initiated by game events, but that you also want to be synchronized to specific beats in music. Then this function can be used to defer the stinger until the next musical transition. Note: In general it is better to use <see cref="UnityEngine.AudioSource.PlayScheduled"></see> to cue up audio. Only use SetScheduledStartTime if you have scheduled an audio clip to play in the future and you need to change the time at which it starts. Calling SetScheduledStartTime will not cause an un-scheduled audio clip to play.</para>
      </summary>
      <param name="time">Time in seconds.</param>
      <seealso cref="M:UnityEngine.AudioSource.PlayScheduled(System.Double)">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioSource.SetSpatializerFloat(System.Int32,System.Single)">
      <summary>
        <para>Sets a user-defined parameter of a custom spatializer effect that is attached to an AudioSource.</para>
        <para>Since this is for internal use in custom inspectors controlling custom spatializer effects implemented as native audio plugins, it is up to the spatializer to perform necessary clipping on the UI and native sides through the setparameter/getparameter callbacks of the native audio plugin.</para>
      </summary>
      <param name="index">Zero-based index of user-defined parameter to be set.</param>
      <param name="value">New value of the user-defined parameter.</param>
      <returns>True, if the parameter could be set.</returns>
    </member>
    <member name="M:UnityEngine.AudioSource.Stop">
      <summary>
        <para>Stops playing the <see cref="UnityEngine.AudioSource.clip"></see>.</para>
        <para>The AudioSource.stop function stops the currently set Audio clip from playing. The Audio clip plays from the beginning the next time you play it.</para>
      </summary>
      <seealso cref="M:UnityEngine.AudioSource.Play(System.UInt64)">
      </seealso>
      <seealso cref="M:UnityEngine.AudioSource.Pause">
      </seealso>
    </member>
    <member name="M:UnityEngine.AudioSource.UnPause">
      <summary>
        <para>Unpause the paused playback of this AudioSource.</para>
        <para>This function is similar to calling Play () on a paused AudioSource, except that it will not create a new playback voice if it is not currently paused. This is also useful if you have paused one-shots and want to resume playback without creating a new playback voice for the attached AudioClip.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayClipAtPoint(UnityEngine.AudioClip,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Plays an AudioClip at a given position in world space.</para>
        <para>This function creates an audio source but automatically disposes of it once the clip has finished playing.</para>
      </summary>
      <param name="clip">Audio data to play.</param>
      <param name="position">Position in world space from which sound originates.</param>
      <param name="volume">Playback volume.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayClipAtPoint(UnityEngine.AudioClip,UnityEngine.Vector3)">
      <summary>
        <para>Plays an AudioClip at a given position in world space.</para>
        <para>This function creates an audio source but automatically disposes of it once the clip has finished playing.</para>
      </summary>
      <param name="clip">Audio data to play.</param>
      <param name="position">Position in world space from which sound originates.</param>
    </member>
    <member name="P:UnityEngine.AudioLowPassFilter.customCutoffCurve">
      <summary>
        <para>Returns or sets the current custom frequency cutoff curve.</para>
        <para>The curve will be scaled so that it is applied over AudioSource.maxDistance from the AudioSource. Note that if there is no curve set, or AudioLowPassFilter.cutoffFrequency has been set, a single key AnimationCurve will be returned corresponding to the current cutoff frequency. Setting the curve will result in the internal AnimationCurve to be rescaled to range from 0..1 for performance reasons. This means calling AudioLowPassFilter.customCutoffCurve will return a potentially different curve to what was just set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioLowPassFilter.cutoffFrequency">
      <summary>
        <para>Lowpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.</para>
        <para>Note that setting this value will reset any custom cutoff curve set for this AudioLowPassFilter.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioLowPassFilter.lowpassResonanceQ">
      <summary>
        <para>Determines how much the filter's self-resonance is dampened.</para>
        <para>Higher Lowpass Resonance Q indicates a lower rate of energy loss i.e. the oscillations die out more slowly. Lowpass resonance Q value goes from 1.0 to 10.0. Default = 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Microphone.devices">
      <summary>
        <para>A list of available microphone devices, identified by name.</para>
        <para>You can use the name with the <see cref="UnityEngine.Microphone.Start"></see> and <see cref="UnityEngine.Microphone.End"></see> functions to specify which microphone you wish to start/stop recording.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Microphone.End(System.String)">
      <summary>
        <para>Stops recording.</para>
        <para>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the <see cref="UnityEngine.Microphone.devices"></see> property.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
    </member>
    <member name="M:UnityEngine.Microphone.GetDeviceCaps(System.String,System.Int32@,System.Int32@)">
      <summary>
        <para>Get the frequency capabilities of a device.</para>
        <para>Passing null or an empty string for the device name will select the default device. You can use the <see cref="UnityEngine.Microphone.devices"></see> property to get a list of all available microphones. When a value of zero is returned in the <c>minFreq</c> and <c>maxFreq</c> parameters, this indicates that the device supports any frequency.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
      <param name="minFreq">Returns the minimum sampling frequency of the device.</param>
      <param name="maxFreq">Returns the maximum sampling frequency of the device.</param>
    </member>
    <member name="M:UnityEngine.Microphone.GetPosition(System.String)">
      <summary>
        <para>Get the position in samples of the recording.</para>
        <para>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the <see cref="UnityEngine.Microphone.devices"></see> property. You can use this to control latency. If you want a 30ms latency, poll GetPosition() until 30ms (in samples) has gone and then start the audio.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
    </member>
    <member name="M:UnityEngine.Microphone.IsRecording(System.String)">
      <summary>
        <para>Query if a device is currently recording.</para>
        <para>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the <see cref="UnityEngine.Microphone.devices"></see> property.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
    </member>
    <member name="M:UnityEngine.Microphone.Start(System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
        <para>Start Recording with device.</para>
        <para>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the <see cref="UnityEngine.Microphone.devices"></see> property. You can find the range of sample rates supported by a microphone using the <see cref="UnityEngine.Microphone.GetDeviceCaps"></see> property. Note that if you want to use the Microphone class in the web player, you need to get the user's permission to do so. Call <see cref="UnityEngine.Application.RequestUserAuthorization"></see> before calling any Microphone methods.</para>
        <para>Note that web player is not supported from 5.4.0 onwards.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
      <param name="loop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
      <param name="lengthSec">Is the length of the AudioClip produced by the recording.</param>
      <param name="frequency">The sample rate of the AudioClip produced by the recording.</param>
      <returns>The function returns null if the recording fails to start.</returns>
    </member>
    <member name="P:UnityEngine.MovieTexture.audioClip">
      <summary>
        <para>Returns the <see cref="UnityEngine.AudioClip"></see> belonging to the MovieTexture.</para>
        <para>Note that this is a special <see cref="UnityEngine.AudioClip"></see> which will always play its audio synchronized to the movie. If you attach a Movie's audioClip to a source in the editor, it will start playing automatically when the movie is playing, Otherwise you'll have to start it manually when you start the movie. The clip can only be attached to one single <see cref="UnityEngine.AudioSource"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MovieTexture.duration">
      <summary>
        <para>The time, in seconds, that the movie takes to play back completely.</para>
        <para>Note that duration is only available once the movie has started. Until then duration will return -1. If you need to know the duration of a movie before it is played, consider extracting this information offline and creating a text asset. You can then look up the duration given the movie name.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MovieTexture.isPlaying">
      <summary>Returns whether the movie is playing or not.</summary>
    </member>
    <member name="P:UnityEngine.MovieTexture.isReadyToPlay">
      <summary>
        <para>If the movie is downloading from a web site, this returns if enough data has been downloaded so playback should be able to start without interruptions.</para>
        <para>For movies not associated with a web stream, this value always returns true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MovieTexture.loop">
      <summary>Set this to true to make the movie loop.</summary>
    </member>
    <member name="M:UnityEngine.MovieTexture.Pause">
      <summary>Pauses playing the movie.</summary>
    </member>
    <member name="M:UnityEngine.MovieTexture.Play">
      <summary>
        <para>Starts playing the movie.</para>
        <para>Note that a running MovieTexture will use a lot of CPU power, and it will continue running until it is manually stopped or a new level is loaded. Also note that MovieTextures does not behave exactly the same as for example audio clips. When you call the Play() method on a MovieTexture, it is the Asset that will start playing, and not a particular instance of the movie. This means that if you have for example several planes in your scene, all having the same MovieTexture set as their materials texture, when you call Play() on one of them, every instance of the Movie will start playing.</para>
      </summary>
      <seealso cref="M:UnityEngine.MovieTexture.Stop">
      </seealso>
      <seealso cref="P:UnityEngine.MovieTexture.audioClip">
      </seealso>
    </member>
    <member name="M:UnityEngine.MovieTexture.Stop">
      <summary>Stops playing the movie, and rewinds it to the beginning.</summary>
    </member>
  </members>
</doc>