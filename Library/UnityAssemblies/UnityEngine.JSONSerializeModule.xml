<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.JSONSerializeModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.JsonUtility">
      <summary>Utility functions for working with JSON data.</summary>
    </member>
    <member name="M:UnityEngine.JsonUtility.FromJson(System.String,System.Type)">
      <summary>
        <para>Create an object from its JSON representation.</para>
        <para>Internally, this method uses the Unity serializer; therefore the type you are creating must be supported by the serializer. It must be a plain class/struct marked with the Serializable attribute. Fields of the object must have types supported by the serializer. Fields that have unsupported types, as well as private fields or fields marked with the NonSerialized attribute, will be ignored. Only plain classes and structures are supported; classes derived from UnityEngine.Object (such as MonoBehaviour or ScriptableObject) are not. If the JSON representation is missing any fields, they will be given their default values (i.e. a field of type T will have value default(T) - it will not be given any value specified as a field initializer, as the constructor for the object is not executed during deserialization). The versions of this method that take strings can be called from background threads. The versions that take a TextAsset must be called from the main thread.</para>
      </summary>
      <param name="json">The JSON representation of the object.</param>
      <param name="type">The type of object represented by the Json.</param>
      <returns>An instance of the object.</returns>
    </member>
    <member name="M:UnityEngine.JsonUtility.FromJsonOverwrite(System.String,System.Object)">
      <summary>
        <para>Overwrite data in an object by reading from its JSON representation.</para>
        <para>This method is very similar to <see cref="UnityEngine.JsonUtility.FromJson``1"></see>, except that instead of creating a new object and loading the JSON data into it, it loads the JSON data into an existing object. This allows you to update the values stored in classes or objects without any allocations. Internally, this method uses the Unity serializer; therefore the object you pass in must be supported by the serializer: it must be a MonoBehaviour, ScriptableObject, or plain class/struct with the Serializable attribute applied. The types of fields that you want to be overwritten must be supported by the serializer; unsupported fields will be ignored, as will private fields, static fields, and fields with the NonSerialized attribute applied. Any plain class or structure is supported, along with classes derived from MonoBehaviour or ScriptableObject. Other engine types are not supported. In the Editor only, you can use <see cref="UnityEditor.EditorJsonUtility.FromJsonOverwrite"></see> to overwrite other engine objects. If a field of the object is not present in the JSON representation, that field will be left unchanged. The version of this method that takes a string can be called from background threads. You should not alter the object that is being overwritten while the function is running. The version of this method that takes a TextAsset cannot be called from a background thread.</para>
      </summary>
      <param name="json">The JSON representation of the object.</param>
      <param name="objectToOverwrite">The object that should be overwritten.</param>
    </member>
    <member name="M:UnityEngine.JsonUtility.ToJson(System.Object)">
      <summary>
        <para>Generate a JSON representation of the public fields of an object.</para>
        <para>Internally, this method uses the Unity serializer; therefore the object you pass in must be supported by the serializer: it must be a MonoBehaviour, ScriptableObject, or plain class/struct with the Serializable attribute applied. The types of fields that you want to be included must be supported by the serializer; unsupported fields will be ignored, as will private fields, static fields, and fields with the NonSerialized attribute applied. Any plain class or structure is supported, as well as classes derived from MonoBehaviour or ScriptableObject. Other engine types are not supported. (In the Editor only, you can use <see cref="UnityEditor.EditorJsonUtility.ToJson"></see> to serialize other engine types to JSON). Note that while it is possible to pass primitive types to this method, the results may not be what you expect; instead of serializing them directly, the method will attempt to serialize their public instance fields, producing an empty object as a result. Similarly, passing an array to this method will not produce a JSON array containing each element, but an object containing the public fields of the array object itself (of which there are none). To serialize the actual content of an array or primitive type, it is necessary to wrap it in a class or struct. This method can be called from background threads. You should not alter the object that you pass to this function while it is still executing.</para>
      </summary>
      <param name="obj">The object to convert to JSON form.</param>
      <returns>The object's data in JSON format.</returns>
    </member>
    <member name="M:UnityEngine.JsonUtility.ToJson(System.Object,System.Boolean)">
      <summary>
        <para>Generate a JSON representation of the public fields of an object.</para>
        <para>Internally, this method uses the Unity serializer; therefore the object you pass in must be supported by the serializer: it must be a MonoBehaviour, ScriptableObject, or plain class/struct with the Serializable attribute applied. The types of fields that you want to be included must be supported by the serializer; unsupported fields will be ignored, as will private fields, static fields, and fields with the NonSerialized attribute applied. Any plain class or structure is supported, as well as classes derived from MonoBehaviour or ScriptableObject. Other engine types are not supported. (In the Editor only, you can use <see cref="UnityEditor.EditorJsonUtility.ToJson"></see> to serialize other engine types to JSON). Note that while it is possible to pass primitive types to this method, the results may not be what you expect; instead of serializing them directly, the method will attempt to serialize their public instance fields, producing an empty object as a result. Similarly, passing an array to this method will not produce a JSON array containing each element, but an object containing the public fields of the array object itself (of which there are none). To serialize the actual content of an array or primitive type, it is necessary to wrap it in a class or struct. This method can be called from background threads. You should not alter the object that you pass to this function while it is still executing.</para>
      </summary>
      <param name="obj">The object to convert to JSON form.</param>
      <param name="prettyPrint">If true, format the output for readability. If false, format the output for minimum size. Default is false.</param>
      <returns>The object's data in JSON format.</returns>
    </member>
  </members>
</doc>