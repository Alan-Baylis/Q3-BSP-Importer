<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.ClothModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.Cloth">
      <summary>The Cloth class provides an interface to cloth simulation physics.</summary>
    </member>
    <member name="T:UnityEngine.ClothSkinningCoefficient">
      <summary>
        <para>The ClothSkinningCoefficient struct is used to set up how a <see cref="UnityEngine.Cloth"></see> component is allowed to move with respect to the <see cref="UnityEngine.SkinnedMeshRenderer"></see> it is attached to.</para>
        <para>This is set using the <see cref="UnityEngine.Cloth.coefficients"></see> property on the Cloth component, which is a per-vertex array of ClothSkinningCoefficient structs. Typically, you will not set these values from code, but instead, set them up in the editor which shows up when you look at the Cloth component in the inspector.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ClothSphereColliderPair">
      <summary>
        <para>A pair of SphereColliders used to define shapes for Cloth objects to collide against.</para>
        <para>A ClothSphereColliderPair can contain either a single valid SphereCollider instance (with the second one being null), or a pair of two SphereColliders. In the former cases the ClothSphereColliderPair just represents a single SphereCollider for the cloth to collide against. In the latter case, it represents a conic capsule shape defined by the two spheres, and the cone connecting the two. Conic capsule shapes are useful for modelling limbs of a character. Select the cloth object to see a visualization of Cloth colliders shapes in the scene view.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ClothSkinningCoefficient.collisionSphereDistance">
      <summary>
        <para>Definition of a sphere a vertex is not allowed to enter. This allows collision against the animated cloth.</para>
        <para>The pair (collisionSphereRadius, collisionSphereDistance) define a sphere for each cloth vertex. The sphere's center is located at the position constrainPosition - constrainNormal * (collisionSphereRadius + collisionSphereDistance) and its radius is collisionSphereRadius, where constrainPosition and constrainNormal are the vertex positions and normals generated by the SkinnedMeshRenderer. The Cloth makes sure that the cloth vertex does not enter this sphere. As a typical usecase, set collisionSphereDistance to zero and collisionSphereRadius to a large value w.r.t. the triangle size. In this setup, the cloth collides against the skinned mesh. Default: 0.0 Range: [0,inf).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ClothSkinningCoefficient.maxDistance">
      <summary>
        <para>Distance a vertex is allowed to travel from the skinned mesh vertex position.</para>
        <para>The Cloth component makes sure that the cloth vertices stay within maxDistance from the skinned mesh vertex positions. If maxDistance is zero, the vertex is not simulated but set to the skinned mesh vertex position. This behavior is useful for attaching the cloth vertex to the skin of an animated character. Default: 0.2 Range: [0, inf).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.bendingStiffness">
      <summary>
        <para>Bending stiffness of the cloth.</para>
        <para>Must be between zero and one. Setting the value to zero disables bending stiffness simulation. In many cases, when you want a cloth to be more stiff, actually reducing the number of vertices will get you better results - and performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.capsuleColliders">
      <summary>
        <para>An array of CapsuleColliders which this Cloth instance should collide with.</para>
        <para>Any capsule colliders specified in Cloth.capsuleColliders will collide with the cloth vertices. A maximum of 32 capsules are supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.clothSolverFrequency">
      <summary>
        <para>Number of cloth solver iterations per second.</para>
        <para>The solver frequency is specified as iterations per second. A solver frequency value of 240 corresponds to 4 iterations per frame at 60 frames per second. In general, simulation will become more accurate if higher solver frequency value is used. However, simulation time grows roughly linearly with solver frequency. Typically this value is between 120 and 300.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.coefficients">
      <summary>The cloth skinning coefficients used to set up how the cloth interacts with the skinned mesh.</summary>
    </member>
    <member name="P:UnityEngine.Cloth.collisionMassScale">
      <summary>How much to increase mass of colliding particles.</summary>
    </member>
    <member name="P:UnityEngine.Cloth.damping">
      <summary>
        <para>Damp cloth motion.</para>
        <para>Set this to damp the motions of a cloth instance. Must be between zero and one. Setting this to zero will disable cloth damping.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.enableContinuousCollision">
      <summary>
        <para>Enable continuous collision to improve collision stability.</para>
        <para>Continuous collision is around 2x more computationally expensive than discrete collision, but it is necessary to detect collision between fast moving objects. Continuous collision analyzes the trajectory of particles and capsules to determine when a contact occurs. After the first time of contact, the particle is moved with the shape until the end of the iteration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.enabled">
      <summary>
        <para>Is this cloth enabled?</para>
        <para>This is the same as the checkbox next to the component label in the inspector. A disabled cloth component will not update it's physics simulation, so you can use this to suspend the simulation of cloth objects when they are not needed, as cloth simulation is a very CPU-intensive task.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.externalAcceleration">
      <summary>
        <para>A constant, external acceleration applied to the cloth.</para>
        <para>Use this to simulate constant forces on the cloth, such as wind waving a flag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.friction">
      <summary>The friction of the cloth when colliding with the character.</summary>
    </member>
    <member name="P:UnityEngine.Cloth.normals">
      <summary>
        <para>The current normals of the cloth object.</para>
        <para>This gives you read access to the normals of the cloth object, so you can analyse it's current simulation state. Note that the normal indices may not necessarily correspond to the indices of the source mesh - especially when triangle stripping or UV seams are used in the source mesh (ie, multiple indices for the same vertex), cloth vertices will be different, as the cloth simulation only uses a single index for each vertex.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.randomAcceleration">
      <summary>
        <para>A random, external acceleration applied to the cloth.</para>
        <para>Use this to simulate randomly changing forces on the cloth, such as wind turbulences waving a flag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.selfCollisionDistance">
      <summary>
        <para>Minimum distance at which two cloth particles repel each other (default: 0.0).</para>
        <para>A value larger than 0.0 enables particle versus particle collision. Self-collision distance should be smaller than the smallest distance between two particles in the rest configuration. If the distance is larger, self-collision may violate some distance constraints and result in jittering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.selfCollisionStiffness">
      <summary>Self-collision stiffness defines how strong the separating impulse should be for colliding particles.</summary>
    </member>
    <member name="P:UnityEngine.Cloth.sleepThreshold">
      <summary>
        <para>Cloth's sleep threshold.</para>
        <para>Sleep threshold is a linear speed of cloth particles, below which the whole cloth piece is going to fall asleep.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.sphereColliders">
      <summary>
        <para>An array of ClothSphereColliderPairs which this Cloth instance should collide with.</para>
        <para>Any ClothSphereColliderPair specified in Cloth.capsuleColliders will collide with the cloth vertices. A maximum of 32 spheres are supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.stiffnessFrequency">
      <summary>
        <para>Sets the stiffness frequency parameter.</para>
        <para>The stiffness frequency controls the power-law nonlinearity of all rate of change parameters (stretch stiffness, shear stiffness, bending stiffness, tether stiffness, self-collision stiffness, motion constraint stiffness, damp coefficient, linear and angular drag coefficients). Increasing the frequency avoids numerical cancellation for values near zero or one, but increases the non-linearity of the parameter. It is not recommended to change this parameter after cloth initialization. For example, the portion of edge overstretch removed per second is equal to the stretch stiffness raised to the power of the stiffness frequency.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.stretchingStiffness">
      <summary>
        <para>Stretching stiffness of the cloth.</para>
        <para>Must be greater than zero and smaller or equal to one. In many cases, when you want a cloth to be more stiff, actually reducing the number of vertices will get you better results - and performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.useGravity">
      <summary>Should gravity affect the cloth simulation?</summary>
    </member>
    <member name="P:UnityEngine.Cloth.useTethers">
      <summary>
        <para>Use Tether Anchors.</para>
        <para>Apply constraints that help to prevent the moving cloth particles from going too far away from the fixed ones. This helps to reduce excess stretchiness.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.useVirtualParticles">
      <summary>
        <para>Add one virtual particle per triangle to improve collision stability.</para>
        <para>Virtual particles provide a way of improving cloth collision without increasing the cloth resolution. They are called 'virtual' particles because they only exist during the collision processing stage and do not have their position, velocity or mass explicitly stored like regular particles, they can be thought of as providing additional samples on the collision surface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.vertices">
      <summary>
        <para>The current vertex positions of the cloth object.</para>
        <para>This gives you read access to the vertex positions of the cloth object, so you can analyse it's current simulation state. Note that the vertex indices may not necessarily correspond to the indices of the source mesh - especially when triangle stripping or UV seams are used in the source mesh (ie, multiple indices for the same vertex), cloth vertices will be different, as the cloth simulation only uses a single index for each vertex.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.worldAccelerationScale">
      <summary>How much world-space acceleration of the character will affect cloth vertices.</summary>
    </member>
    <member name="P:UnityEngine.Cloth.worldVelocityScale">
      <summary>How much world-space movement of the character will affect cloth vertices.</summary>
    </member>
    <member name="M:UnityEngine.Cloth.ClearTransformMotion">
      <summary>
        <para>Clear the pending transform changes from affecting the cloth simulation.</para>
        <para>When the transform of a cloth changes, the cloth will not directly follow that change, but instead, the new positions of the SkinnedMeshRenderer's vertices will affect the cloth through the configured constraints in the next cloth simulation update, so that moving the tranform will result in realistic motion of the cloth. You can call ClearTransformMotion on the cloth to change this behavior. Calling ClearTransformMotion will move the cloth simulation particles along with the transform, so that the transform movement has no effect on the cloth simulation. This is useful if you want to teleport Characters from one point in the scene to another, without having the cloth suddenly jerk into place.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cloth.SetEnabledFading(System.Boolean,System.Single)">
      <summary>Fade the cloth simulation in or out.</summary>
      <param name="enabled">Fading enabled or not.</param>
    </member>
    <member name="M:UnityEngine.Cloth.SetEnabledFading(System.Boolean)">
      <summary>Fade the cloth simulation in or out.</summary>
      <param name="enabled">Fading enabled or not.</param>
    </member>
    <member name="P:UnityEngine.ClothSphereColliderPair.first">
      <summary>The first SphereCollider of a ClothSphereColliderPair.</summary>
    </member>
    <member name="P:UnityEngine.ClothSphereColliderPair.second">
      <summary>The second SphereCollider of a ClothSphereColliderPair.</summary>
    </member>
  </members>
</doc>