<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.ParticleSystemModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.Rendering.UVChannelFlags">
      <summary>A flag representing each UV channel.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.TextureSheetAnimationModule">
      <summary>
        <para>Script interface for the Texture Sheet Animation module.</para>
        <para>This module allows you to add animations to your particle textures. This is achieved by authoring flipbook textures, which look like this: Each numbered region represents a frame of the animation, and must be distributed evenly across the texture. Select a variable below to see script examples. You may want to use this texture on your particle system with each example, to see how the module works.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.TrailModule">
      <summary>Access the particle system trails module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.TriggerModule">
      <summary>
        <para>Script interface for the Trigger module.</para>
        <para>This module is useful for killing particles when they touch a set of collision shapes, or for calling a script command to let you apply custom particle behaviors when the trigger is activated. The example code for <see cref="UnityEngine.UI.BaseMeshEffect.MonoBehaviour.OnParticleTrigger"></see> shows how the callback type action works.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.VelocityOverLifetimeModule">
      <summary>Script interface for the Velocity Over Lifetime module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemRenderer">
      <summary>Renders particles on to the screen (Shuriken).</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemNoiseQuality">
      <summary>The quality of the generated noise.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemOverlapAction">
      <summary>What action to perform when the particle trigger module passes a test.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemRenderMode">
      <summary>
        <para>The rendering mode for particle systems (Shuriken).</para>
        <para>This is used by the <see cref="UnityEngine.ParticleSystemRenderer"></see> to determine how to render the particles.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemRenderSpace">
      <summary>How particles are aligned when rendered.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemScalingMode">
      <summary>Control how particle systems apply transform scale.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemShapeMultiModeValue">
      <summary>The mode used to generate new points in a shape (Shuriken).</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemShapeType">
      <summary>
        <para>The emission shape (Shuriken).</para>
        <para>This is used by the <see cref="UnityEngine.ParticleSystem.ShapeModule"></see> to determine how to sort the particles.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemSimulationSpace">
      <summary>The space to simulate particles in.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemSortMode">
      <summary>The sorting mode for particle systems.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemStopAction">
      <summary>The action to perform when the Particle System stops.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemStopBehavior">
      <summary>The behavior to apply when calling <see cref="UnityEngine.ParticleSystem.Stop"></see>.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemSubEmitterProperties">
      <summary>The properties of sub-emitter particles.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemSubEmitterType">
      <summary>The events that cause new particles to be spawned.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemTrailMode">
      <summary>Choose how Particle Trails are generated.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemTrailTextureMode">
      <summary>Choose how textures are applied to Particle Trails.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemTriggerEventType">
      <summary>The different types of particle triggers.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemVertexStream">
      <summary>All possible particle system vertex shader inputs.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemVertexStreams">
      <summary>All possible particle system vertex shader inputs.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemAnimationMode">
      <summary>The animation mode.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemAnimationType">
      <summary>
        <para>The animation type.</para>
        <para>Controls how texture sheet animations play.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemCollisionMode">
      <summary>Whether to use 2D or 3D colliders for particle collisions.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemCollisionQuality">
      <summary>Quality of world collisions. Medium and low quality are approximate and may leak particles.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemCollisionType">
      <summary>The type of collisions to use for a given particle system.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemCurveMode">
      <summary>
        <para>The particle curve mode (Shuriken).</para>
        <para>This is used by <see cref="UnityEngine.ParticleSystem.MinMaxCurve"></see> to determine which mode to evaluate curves in.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemCustomData">
      <summary>Which stream of custom particle data to set.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemCustomDataMode">
      <summary>Which mode the Custom Data module uses to generate its data.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemEmissionType">
      <summary>The mode in which particles are emitted.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemEmitterVelocityMode">
      <summary>Control how a Particle System calculates its velocity.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemGradientMode">
      <summary>
        <para>The particle gradient mode (Shuriken).</para>
        <para>This is used by <see cref="UnityEngine.ParticleSystem.MinMaxGradient"></see> to determine which mode to evaluate color gradients in.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemInheritVelocityMode">
      <summary>How to apply emitter velocity to particles.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemMeshShapeType">
      <summary>The mesh emission type.</summary>
    </member>
    <member name="T:UnityEngine.ParticleCollisionEvent">
      <summary>Information about a particle collision.</summary>
    </member>
    <member name="T:UnityEngine.ParticlePhysicsExtensions">
      <summary>Method extension for Physics in Particle System.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem">
      <summary>
        <para>Script interface for particle systems (Shuriken).</para>
        <para>Shuriken is a powerful and versatile particle system component. General parameters The Particle System's general parameters are kept inside a special Main module. These parameters are visible in the Inspector above all the other modules: In script, these parameters are accessible through <see cref="UnityEngine.ParticleSystem.main"></see>. Module effect multipliers Every module has special multiplier properties that allow you to change the overall effect of a curve without having to edit the curve itself. These multiplier properties are all named after the curve they affect - for instance ParticleSystem.emission.rateMultiplier controls the overall effect of ParticleSystem.emission.rate in a given system. Constant value shorthand Parameters support a shorthand notation for simple constant values. To set a constant value for a parameter, all you need to do is assign a number to it. It is not necessary to create a <see cref="UnityEngine.ParticleSystem.MinMaxCurve"></see> or <see cref="UnityEngine.ParticleSystem.MinMaxGradient"></see> object in the <see cref="UnityEngine.ParticleSystemCurveMode.Constant"></see> mode. For example, instead of: <c>ParticleSystem.emission.rate = new ParticleSystem.MinMaxCurve(5.0f);</c> write: <c>ParticleSystem.emission.rate = 5.0f;</c> Performance note: When setting properties on particle modules, the settings are passed immediately into native code. This gives the best performance. This means that setting properties on a module struct doesn't set something in script that requires setting back to the particle system; it all happens automatically.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.Burst">
      <summary>
        <para>Script interface for a Burst.</para>
        <para>A burst is a particle emission event, where a number of particles are all emitted at the same time.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.CollisionModule">
      <summary>Script interface for the Collision module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.ColorBySpeedModule">
      <summary>Script interface for the Color By Speed module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.ColorOverLifetimeModule">
      <summary>Script interface for the Color Over Lifetime module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.CustomDataModule">
      <summary>Script interface for the Custom Data module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.EmissionModule">
      <summary>Script interface for the Emission module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.EmitParams">
      <summary>Script interface for particle emission parameters.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.ExternalForcesModule">
      <summary>Script interface for the External Forces module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.ForceOverLifetimeModule">
      <summary>Script interface for the Force Over Lifetime module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.InheritVelocityModule">
      <summary>
        <para>The Inherit Velocity Module controls how the velocity of the emitter is transferred to the particles as they are emitted.</para>
        <para>NOTE: The inherit velocity module only has an effect if the particle system is set to simulate in world space. If the system is simulating in local space, this module is ignored.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.LightsModule">
      <summary>
        <para>Access the ParticleSystem Lights Module.</para>
        <para>The Lights Module allows you to attach realtime Lights to a percentage of your particles. The Lights Module is a simple and powerful module that allows particles to cast light onto their environment easily. Lights can inherit properties from the particles they are attached to, such as color and size. Point and Spot Lights are supported, including shadow casting and Light cookies.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule">
      <summary>Script interface for the Limit Velocity Over Lifetime module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.MainModule">
      <summary>Script interface for the main module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.MinMaxCurve">
      <summary>
        <para>Script interface for a Min-Max Curve.</para>
        <para>MinMaxCurve describes functions taking a value between a minimum and maximum limit and returning a value based on <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see>. Depending on the mode, the value returned may be randomized. For modes requiring curves, the value returned is dependent on one or two curves designed in the ParticleSystem Inspector, that can be evaluated to a single value between -n and n, where n is a constant also set in the Inspector.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.MinMaxGradient">
      <summary>MinMaxGradient contains two <see cref="UnityEngine.Gradient"></see>s, and returns a <see cref="UnityEngine.Color"></see> based on <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see>. Depending on the mode, the Color returned may be randomized. Gradients are edited via the ParticleSystem Inspector once a <see cref="UnityEngine.ParticleSystemGradientMode"></see> requiring them has been selected. Some modes do not require gradients, only colors.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.NoiseModule">
      <summary>Script interface for the Noise Module. The Noise Module allows you to apply turbulence to the movement of your particles. Use the low quality settings to create computationally efficient Noise, or simulate smoother, richer Noise with the higher quality settings. You can also choose to define the behavior of the Noise individually for each axis.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.Particle">
      <summary>Script interface for a Particle.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.RotationBySpeedModule">
      <summary>Script interface for the Rotation By Speed module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.RotationOverLifetimeModule">
      <summary>Script interface for the Rotation Over Lifetime module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.ShapeModule">
      <summary>Script interface for the Shape module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.SizeBySpeedModule">
      <summary>Script interface for the Size By Speed module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.SizeOverLifetimeModule">
      <summary>Script interface for the Size Over Lifetime module.</summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem.SubEmittersModule">
      <summary>Script interface for the Sub Emitters module.</summary>
    </member>
    <member name="F:UnityEngine.Rendering.UVChannelFlags.UV0">
      <summary>First UV channel.</summary>
    </member>
    <member name="F:UnityEngine.Rendering.UVChannelFlags.UV1">
      <summary>Second UV channel.</summary>
    </member>
    <member name="F:UnityEngine.Rendering.UVChannelFlags.UV2">
      <summary>Third UV channel.</summary>
    </member>
    <member name="F:UnityEngine.Rendering.UVChannelFlags.UV3">
      <summary>Fourth UV channel.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.activeVertexStreamsCount">
      <summary>The number of currently active custom vertex streams.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.alignment">
      <summary>
        <para>Control the direction that particles face.</para>
        <para>For many applications, it is beneficial for particles to always face the Camera. This property allows you to change whether particles in the system face the Camera or not. Particles can face the Camera in two ways: 1) Aligned to the Camera plane, so that all particles are aligned with the same facing direction. 2) Aligned individually to face the eye position, which can be more convincing for particles that approach the Camera in close proximity or for VR environments. Unaligned particles can be set to align to the world or to their local transform, as required.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.cameraVelocityScale">
      <summary>
        <para>How much are the particles stretched depending on the <see cref="UnityEngine.Camera"></see>'s speed.</para>
        <para>Use this to make particles become large if the viewing camera has a large speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.lengthScale">
      <summary>
        <para>How much are the particles stretched in their direction of motion.</para>
        <para>Use this to make particles always be longer than they are wide.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.maskInteraction">
      <summary>
        <para>Specifies how the Particle System Renderer interacts with <see cref="UnityEngine.SpriteMask"></see>.</para>
        <para>Particles by default do not interact with SpriteMasks and will be visible irrespective of any SpriteMask being present or not. Particle System Renderer can also be setup to be visible inside a mask by setting this value to VisibleInsideMask. The inverse can be achieved by seting the maskInteraction to VisibleOutsideMask.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.maxParticleSize">
      <summary>
        <para>Clamp the maximum particle size.</para>
        <para>Particles can become very heavy on fillrate. Use this setting to make sure they don't use too much performance when up close to the viewer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.mesh">
      <summary>Mesh used as particle instead of billboarded texture.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.meshCount">
      <summary>The number of meshes being used for particle rendering.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.minParticleSize">
      <summary>
        <para>Clamp the minimum particle size.</para>
        <para>Tiny particles can cause aliasing, and not contribute visually to the scene, whilst still costing performance. Use this setting to make sure they always maintain a minimum size on screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.normalDirection">
      <summary>
        <para>How much are billboard particle normals oriented towards the camera.</para>
        <para>Spherizes billboard normals when set to 0, and points them towards the camera when set to 1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.pivot">
      <summary>
        <para>Modify the pivot point used for rotating particles.</para>
        <para>The units are expressed as a multiplier of the particle sizes, relative to their diameters. For example, a value of 0.5 would adjust the pivot by the particle radius, allowing particles to rotate around their edges.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.renderMode">
      <summary>How particles are drawn.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.sortingFudge">
      <summary>
        <para>Biases particle system sorting amongst other transparencies.</para>
        <para>Use lower (negative) numbers to prioritize the particle system to draw closer to the front, and use higher numbers to prioritize other transparent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.sortMode">
      <summary>Sort particles within a system.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.trailMaterial">
      <summary>Set the material used by the Trail module for attaching trails to particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.velocityScale">
      <summary>
        <para>How much are the particles stretched depending on "how fast they move".</para>
        <para>Use this to make particles get longer as their speed increases.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystemRenderer.GetMeshes(UnityEngine.Mesh[])">
      <summary>Get the array of meshes to be used as particles.</summary>
      <param name="meshes">This array will be populated with the list of meshes being used for particle rendering.</param>
      <returns>The number of meshes actually written to the destination array.</returns>
      <seealso cref="P:UnityEngine.ParticleSystemRenderer.renderMode">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystemRenderer.SetMeshes(UnityEngine.Mesh[])">
      <summary>Set an array of meshes to be used as particles when the <see cref="UnityEngine.ParticleSystemRenderer.renderMode"></see> is set to <see cref="UnityEngine.ParticleSystemRenderMode.Mesh"></see>.</summary>
      <param name="meshes">Array of meshes to be used.</param>
      <seealso cref="P:UnityEngine.ParticleSystemRenderer.renderMode">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystemRenderer.SetMeshes(UnityEngine.Mesh[],System.Int32)">
      <summary>Set an array of meshes to be used as particles when the <see cref="UnityEngine.ParticleSystemRenderer.renderMode"></see> is set to <see cref="UnityEngine.ParticleSystemRenderMode.Mesh"></see>.</summary>
      <param name="meshes">Array of meshes to be used.</param>
      <param name="size">Number of elements from the mesh array to be applied.</param>
      <seealso cref="P:UnityEngine.ParticleSystemRenderer.renderMode">
      </seealso>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.space">
      <summary>Specifies if the velocities are in local space (rotated with the transform) or world space.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.speedModifier">
      <summary>Curve to control particle speed based on lifetime, without affecting the direction of the particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.speedModifierMultiplier">
      <summary>
        <para>Speed multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.x">
      <summary>Curve to control particle speed based on lifetime, on the X axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.xMultiplier">
      <summary>
        <para>X axis speed multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.y">
      <summary>Curve to control particle speed based on lifetime, on the Y axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.yMultiplier">
      <summary>
        <para>Y axis speed multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.z">
      <summary>Curve to control particle speed based on lifetime, on the Z axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.zMultiplier">
      <summary>
        <para>Z axis speed multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.worldSpace">
      <summary>
        <para>Drop new trail points in world space, regardless of Particle System Simulation Space.</para>
        <para>When set to true, trails will always be in world space, and will not move relative to the Transform component. When set to false, trails will move with the particle system transform, if also using local Simulation Space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TriggerModule.enabled">
      <summary>Enable/disable the Trigger module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TriggerModule.enter">
      <summary>Choose what action to perform when particles enter the trigger volume.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TriggerModule.exit">
      <summary>Choose what action to perform when particles leave the trigger volume.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TriggerModule.inside">
      <summary>
        <para>Choose what action to perform when particles are inside the trigger volume.</para>
        <para>This action will be performed every frame while particles are inside the trigger volume.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TriggerModule.maxColliderCount">
      <summary>The maximum number of collision shapes that can be attached to this particle system trigger.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TriggerModule.outside">
      <summary>
        <para>Choose what action to perform when particles are outside the trigger volume.</para>
        <para>This action will be performed every frame while particles are outside the trigger volume.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TriggerModule.radiusScale">
      <summary>
        <para>A multiplier applied to the size of each particle before overlaps are processed.</para>
        <para>Useful for improving the visual accuracy of overlaps, for example when there is an alpha border in the particle texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.TriggerModule.GetCollider(System.Int32)">
      <summary>Get a collision shape associated with this particle system trigger.</summary>
      <param name="index">Which collider to return.</param>
      <returns>The collider at the given index.</returns>
      <seealso cref="M:UnityEngine.ParticleSystem.TriggerModule.SetCollider(System.Int32,UnityEngine.Component)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.TriggerModule.SetCollider(System.Int32,UnityEngine.Component)">
      <summary>Set a collision shape associated with this particle system trigger.</summary>
      <param name="index">Which collider to set.</param>
      <param name="collider">The collider to associate with this trigger.</param>
    </member>
    <member name="P:UnityEngine.ParticleSystem.VelocityOverLifetimeModule.enabled">
      <summary>Enable/disable the Velocity Over Lifetime module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.animation">
      <summary>Specifies the animation type.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.cycleCount">
      <summary>Specifies how many times the animation will loop during the lifetime of the particle.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.enabled">
      <summary>Enable/disable the Texture Sheet Animation module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.flipU">
      <summary>
        <para>Flip the U coordinate on particles, causing them to appear mirrored horizontally.</para>
        <para>Set between 0 and 1, where higher values cause a higher proportion of particles to be mirrored, and 1 causes all particles to be mirrored.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.flipV">
      <summary>
        <para>Flip the V coordinate on particles, causing them to appear mirrored vertically.</para>
        <para>Set between 0 and 1, where higher values cause a higher proportion of particles to be mirrored, and 1 causes all particles to be mirrored.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.frameOverTime">
      <summary>Curve to control which frame of the texture sheet animation to play.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.frameOverTimeMultiplier">
      <summary>
        <para>Frame over time mutiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall frame over time multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.mode">
      <summary>Select whether the animated texture information comes from a grid of frames on a single texture, or from a list of Sprite objects.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.numTilesX">
      <summary>Defines the tiling of the texture in the X axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.numTilesY">
      <summary>Defines the tiling of the texture in the Y axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.rowIndex">
      <summary>Explicitly select which row of the texture sheet is used, when <see cref="UnityEngine.ParticleSystem.TextureSheetAnimationModule.useRandomRow"></see> is set to false.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.spriteCount">
      <summary>The total number of sprites.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.startFrame">
      <summary>Define a random starting frame for the texture sheet animation.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.startFrameMultiplier">
      <summary>
        <para>Starting frame multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall start frame multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.useRandomRow">
      <summary>Use a random row of the texture sheet for each particle emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TextureSheetAnimationModule.uvChannelMask">
      <summary>
        <para>Choose which UV channels will receive texture animation.</para>
        <para>By default, all UV channels receive animation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.TextureSheetAnimationModule.AddSprite(UnityEngine.Sprite)">
      <summary>Add a new Sprite.</summary>
      <param name="sprite">The Sprite to be added.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.TextureSheetAnimationModule.RemoveSprite(System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.TextureSheetAnimationModule.GetSprite(System.Int32)">
      <summary>Get the Sprite at the given index.</summary>
      <param name="index">The index of the desired Sprite.</param>
      <returns>The Sprite being requested.</returns>
      <seealso cref="M:UnityEngine.ParticleSystem.TextureSheetAnimationModule.SetSprite(System.Int32,UnityEngine.Sprite)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.TextureSheetAnimationModule.RemoveSprite(System.Int32)">
      <summary>Remove a Sprite from the given index in the array.</summary>
      <param name="index">The index from which to remove a Sprite.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.TextureSheetAnimationModule.AddSprite(UnityEngine.Sprite)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.TextureSheetAnimationModule.SetSprite(System.Int32,UnityEngine.Sprite)">
      <summary>Set the Sprite at the given index.</summary>
      <param name="index">The index of the Sprite being modified.</param>
      <param name="sprite">The Sprite being assigned.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.TextureSheetAnimationModule.GetSprite(System.Int32)">
      </seealso>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.colorOverLifetime">
      <summary>The gradient controlling the trail colors during the lifetime of the attached particle.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.colorOverTrail">
      <summary>The gradient controlling the trail colors over the length of the trail.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.dieWithParticles">
      <summary>If enabled, Trails will disappear immediately when their owning particle dies. Otherwise, the trail will persist until all its points have naturally expired, based on its lifetime.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.enabled">
      <summary>Enable/disable the Trail module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.generateLightingData">
      <summary>Configures the trails to generate Normals and Tangents. With this data, Scene lighting can affect the trails via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.inheritParticleColor">
      <summary>
        <para>Toggle whether the trail will inherit the particle color as its starting color.</para>
        <para>Any Trail module curves will be applied on top of the particle color, if enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.lifetime">
      <summary>
        <para>The curve describing the trail lifetime, throughout the lifetime of the particle.</para>
        <para>This value is relative to the particle lifetime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.lifetimeMultiplier">
      <summary>
        <para>Change the lifetime multiplier.</para>
        <para>This is more efficient than accessing the whole curve, if you only want to change the overall lifetime multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.minVertexDistance">
      <summary>
        <para>Set the minimum distance each trail can travel before a new vertex is added to it.</para>
        <para>Smaller values with give smoother trails, consisting of more vertices, but costing more performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.mode">
      <summary>Choose how particle trails are generated.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.ratio">
      <summary>
        <para>Choose what proportion of particles will receive a trail.</para>
        <para>Use a value between 0 and 1, where 0 will add trails to no particles, and 1 will add trails to all particles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.ribbonCount">
      <summary>
        <para>Select how many lines to create through the Particle System.</para>
        <para>For example, if using 1 ribbon, a single line is drawn, starting at the youngest particle, and travelling through each subsequent particle based on their ages, until finally reaching the oldest. If using a value larger than 1, multiple lines are drawn, connecting each Nth oldest particle. For example, is using 3 ribbons, every 3rd particle is connected (1,4,7, and 2,5,8 and 3,6,9).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.sizeAffectsLifetime">
      <summary>
        <para>Set whether the particle size will act as a multiplier on top of the trail lifetime.</para>
        <para>Useful for making larger particles have longer trails.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.sizeAffectsWidth">
      <summary>
        <para>Set whether the particle size will act as a multiplier on top of the trail width.</para>
        <para>Useful for making larger particles have wider trails.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.textureMode">
      <summary>
        <para>Choose whether the U coordinate of the trail texture is tiled or stretched.</para>
        <para>Stretching will cause the texture to be mapped once along the entire length of the trail, whereas Tiling will cause the texture to be repeated at a rate of once per world unit. To set the tiling rate, use <see cref="UnityEngine.Material.SetTextureScale"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.widthOverTrail">
      <summary>The curve describing the width, of each trail point.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.TrailModule.widthOverTrailMultiplier">
      <summary>
        <para>Change the width multiplier.</para>
        <para>This is more efficient than accessing the whole curve, if you only want to change the overall width multiplier.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemScalingMode.Hierarchy">
      <summary>Scale the particle system using the entire transform hierarchy.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemScalingMode.Local">
      <summary>Scale the particle system using only its own transform scale. (Ignores parent scale).</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemScalingMode.Shape">
      <summary>Only apply transform scale to the shape component, which controls where particles are spawned, but does not affect their size or movement.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeMultiModeValue.Random">
      <summary>Generate points randomly. (Default)</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeMultiModeValue.Loop">
      <summary>Animate the emission point around the shape.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTrailMode.PerParticle">
      <summary>Makes a trail behind each particle as the particle moves.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTrailMode.Ribbon">
      <summary>Draws a line between each particle, connecting the youngest particle to the oldest.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTrailTextureMode.Stretch">
      <summary>Map the texture once along the entire length of the trail.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTrailTextureMode.Tile">
      <summary>Repeat the texture along the trail. To set the tiling rate, use <see cref="UnityEngine.Material.SetTextureScale"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTrailTextureMode.DistributePerSegment">
      <summary>Map the texture once along the entire length of the trail, assuming all vertices are evenly spaced.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTrailTextureMode.RepeatPerSegment">
      <summary>Repeat the texture along the trail, repeating at a rate of once per trail segment. To adjust the tiling rate, use <see cref="UnityEngine.Material.SetTextureScale"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSubEmitterType.Birth">
      <summary>Spawns new particles when particles from the parent system are born.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSubEmitterType.Collision">
      <summary>Spawns new particles when particles from the parent system collide with something.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSubEmitterType.Death">
      <summary>Spawns new particles when particles from the parent system die.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemOverlapAction.Ignore">
      <summary>Do nothing.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemOverlapAction.Kill">
      <summary>Kill all particles that pass this test.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemOverlapAction.Callback">
      <summary>Send the OnParticleTrigger command to the particle system's script.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.Billboard">
      <summary>Render particles as billboards facing the active camera. (Default)</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.Stretch">
      <summary>Stretch particles in the direction of motion.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.HorizontalBillboard">
      <summary>Render particles as billboards always facing up along the y-Axis.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.VerticalBillboard">
      <summary>Render particles as billboards always facing the player, but not pitching along the x-Axis.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemStopBehavior.StopEmittingAndClear">
      <summary>Stops particle system emitting and removes all existing emitted particles.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.Mesh">
      <summary>Render particles as meshes.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemStopBehavior.StopEmitting">
      <summary>Stops particle system emitting any further particles. All existing particles will remain until they expire.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.None">
      <summary>
        <para>Do not render particles.</para>
        <para>Can be useful when using the Trails or Lights Modules, for example.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderSpace.View">
      <summary>Particles face the camera plane.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderSpace.World">
      <summary>Particles align with the world.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderSpace.Local">
      <summary>Particles align with their local transform.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderSpace.Facing">
      <summary>Particles face the eye position.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderSpace.Velocity">
      <summary>Particles are aligned to their direction of travel.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemNoiseQuality.High">
      <summary>High quality 3D noise.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSubEmitterProperties.InheritNothing">
      <summary>When spawning new particles, do not inherit any properties from the parent particles.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSubEmitterProperties.InheritEverything">
      <summary>When spawning new particles, inherit all available properties from the parent particles.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSubEmitterProperties.InheritColor">
      <summary>When spawning new particles, multiply the start color by the color of the parent particles.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSubEmitterProperties.InheritSize">
      <summary>When spawning new particles, multiply the start size by the size of the parent particles.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSubEmitterProperties.InheritRotation">
      <summary>When spawning new particles, add the start rotation to the rotation of the parent particles.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSubEmitterProperties.InheritLifetime">
      <summary>New particles will have a shorter lifespan, the closer their parent particles are to death.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSimulationSpace.Local">
      <summary>Simulate particles in local space.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSimulationSpace.World">
      <summary>Simulate particles in world space.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSimulationSpace.Custom">
      <summary>Simulate particles relative to a custom transform component, defined by <see cref="UnityEngine.ParticleSystem.MainModule.customSimulationSpace"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSortMode.None">
      <summary>No sorting.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSortMode.Distance">
      <summary>Sort based on distance.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSortMode.OldestInFront">
      <summary>Sort the oldest particles to the front.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSortMode.YoungestInFront">
      <summary>Sort the youngest particles to the front.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemStopAction.None">
      <summary>Do nothing.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemStopAction.Disable">
      <summary>Disable the GameObject containing the Particle System.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemStopAction.Destroy">
      <summary>Destroy the GameObject containing the Particle System.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemStopAction.Callback">
      <summary>Call OnPaticleSystemStopped on the ParticleSystem script.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.UV">
      <summary>The first UV stream of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.UV2">
      <summary>The second UV stream of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeMultiModeValue.PingPong">
      <summary>Animate the emission point around the shape, alternating between clockwise and counter-clockwise directions.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.UV3">
      <summary>The third UV stream of each particle (only for meshes).</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeMultiModeValue.BurstSpread">
      <summary>Distribute new particles around the shape evenly.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.UV4">
      <summary>The fourth UV stream of each particle (only for meshes).</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.AnimBlend">
      <summary>The amount to blend between animated texture frames, from 0 to 1.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.AnimFrame">
      <summary>The current animation frame index of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Center">
      <summary>The center position of the entire particle, in world space.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.VertexID">
      <summary>The vertex ID of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.SizeX">
      <summary>The X axis size of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.SizeXY">
      <summary>The X and Y axis sizes of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.SizeXYZ">
      <summary>The 3D size of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Rotation">
      <summary>The Z axis rotation of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Rotation3D">
      <summary>The 3D rotation of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.RotationSpeed">
      <summary>The Z axis rotational speed of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.RotationSpeed3D">
      <summary>The 3D rotational speed of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Velocity">
      <summary>The velocity of each particle, in world space.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Speed">
      <summary>The speed of each particle, calculated by taking the magnitude of the velocity.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.AgePercent">
      <summary>The normalized age of each particle, from 0 to 1.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.InvStartLifetime">
      <summary>The reciprocal of the starting lifetime, in seconds (1.0f / startLifetime).</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.StableRandomX">
      <summary>A random number for each particle, which remains constant during their lifetime.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.StableRandomXY">
      <summary>Two random numbers for each particle, which remain constant during their lifetime.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.StableRandomXYZ">
      <summary>Three random numbers for each particle, which remain constant during their lifetime.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.StableRandomXYZW">
      <summary>Four random numbers for each particle, which remain constant during their lifetime.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.VaryingRandomX">
      <summary>A random number for each particle, which changes during their lifetime.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.VaryingRandomXY">
      <summary>Two random numbers for each particle, which change during their lifetime.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.VaryingRandomXYZ">
      <summary>Three random numbers for each particle, which change during their lifetime.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.VaryingRandomXYZW">
      <summary>Four random numbers for each particle, which change during their lifetime.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Custom1X">
      <summary>One custom value for each particle, defined by the Custom Data Module, or <see cref="UnityEngine.ParticleSystem.SetCustomParticleData"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Custom1XY">
      <summary>Two custom values for each particle, defined by the Custom Data Module, or <see cref="UnityEngine.ParticleSystem.SetCustomParticleData"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Custom1XYZ">
      <summary>Three custom values for each particle, defined by the Custom Data Module, or <see cref="UnityEngine.ParticleSystem.SetCustomParticleData"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Custom1XYZW">
      <summary>Four custom values for each particle, defined by the Custom Data Module, or <see cref="UnityEngine.ParticleSystem.SetCustomParticleData"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Custom2X">
      <summary>One custom value for each particle, defined by the Custom Data Module, or <see cref="UnityEngine.ParticleSystem.SetCustomParticleData"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Custom2XY">
      <summary>Two custom values for each particle, defined by the Custom Data Module, or <see cref="UnityEngine.ParticleSystem.SetCustomParticleData"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Custom2XYZ">
      <summary>Three custom values for each particle, defined by the Custom Data Module, or <see cref="UnityEngine.ParticleSystem.SetCustomParticleData"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Custom2XYZW">
      <summary>Four custom values for each particle, defined by the Custom Data Module, or <see cref="UnityEngine.ParticleSystem.SetCustomParticleData"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.NoiseSumX">
      <summary>The accumulated X axis noise, over the lifetime of the particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.NoiseSumXY">
      <summary>The accumulated X and Y axis noise, over the lifetime of the particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.NoiseSumXYZ">
      <summary>The accumulated 3D noise, over the lifetime of the particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.NoiseImpulseX">
      <summary>The X axis noise on the current frame.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.NoiseImpulseXY">
      <summary>The X and Y axis noise on the current frame.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.NoiseImpulseXYZ">
      <summary>The 3D noise on the current frame.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.Sphere">
      <summary>Emit from a sphere.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.Hemisphere">
      <summary>Emit from a half-sphere.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.Cone">
      <summary>Emit from the base of a cone.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.Box">
      <summary>Emit from the volume of a box.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.Mesh">
      <summary>Emit from a mesh.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.ConeVolume">
      <summary>Emit from a cone.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.Circle">
      <summary>Emit from a circle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.SingleSidedEdge">
      <summary>Emit from an edge.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.MeshRenderer">
      <summary>Emit from a mesh renderer.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.SkinnedMeshRenderer">
      <summary>Emit from a skinned mesh renderer.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.BoxShell">
      <summary>Emit from the surface of a box.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.BoxEdge">
      <summary>Emit from the edges of a box.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemShapeType.Donut">
      <summary>Emit from a Donut.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTriggerEventType.Inside">
      <summary>
        <para>Trigger when particles are inside the collision volume.</para>
        <para>This action will be performed every frame while particles are inside the trigger volume.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTriggerEventType.Outside">
      <summary>
        <para>Trigger when particles are outside the collision volume.</para>
        <para>This action will be performed every frame while particles are outside the trigger volume.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTriggerEventType.Enter">
      <summary>Trigger when particles enter the collision volume.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemTriggerEventType.Exit">
      <summary>Trigger when particles leave the collision volume.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemNoiseQuality.Low">
      <summary>Low quality 1D noise.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemNoiseQuality.Medium">
      <summary>Medium quality 2D noise.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Position">
      <summary>The position of each particle vertex, in world space.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Normal">
      <summary>The vertex normal of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Tangent">
      <summary>The tangent vector for each particle (for normal mapping).</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemVertexStream.Color">
      <summary>The color of each particle.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemAnimationMode.Grid">
      <summary>Use a regular grid to construct a sequence of animation frames.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemAnimationMode.Sprites">
      <summary>Use a list of sprites to construct a sequence of animation frames.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemAnimationType.WholeSheet">
      <summary>Animate over the whole texture sheet from left to right, top to bottom.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemAnimationType.SingleRow">
      <summary>Animate a single row in the sheet from left to right.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCollisionQuality.High">
      <summary>The most accurate world collisions.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCollisionQuality.Medium">
      <summary>Approximate world collisions.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCollisionQuality.Low">
      <summary>Fastest and most approximate world collisions.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCollisionType.Planes">
      <summary>Collide with a list of planes.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCollisionType.World">
      <summary>Collide with the world geometry.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCollisionMode.Collision3D">
      <summary>Use 3D colliders to collide particles against.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCollisionMode.Collision2D">
      <summary>Use 2D colliders to collide particles against.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemInheritVelocityMode.Initial">
      <summary>
        <para>Each particle inherits the emitter's velocity on the frame when it was initially emitted.</para>
        <para>Each particle then maintains this constant velocity throughout its lifetime. The magnitude of the velocity can be modified by the curve multiplier.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemInheritVelocityMode.Current">
      <summary>
        <para>Each particle's velocity is set to the emitter's current velocity value, every frame.</para>
        <para>If the curve multiplier's default value (a constant value of 1) is not modified, this gives the effect of the particles sticking with the emitter. The magnitude of the inherited velocity can be modified by the curve multiplier.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemMeshShapeType.Vertex">
      <summary>Emit from the vertices of the mesh.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemMeshShapeType.Edge">
      <summary>Emit from the edges of the mesh.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemMeshShapeType.Triangle">
      <summary>Emit from the surface of the mesh.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemEmitterVelocityMode.Transform">
      <summary>Calculate the Particle System velocity by using the Transform component.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemEmitterVelocityMode.Rigidbody">
      <summary>Calculate the Particle System velocity by using a Rigidbody or Rigidbody2D component, if one exists on the Game Object.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemGradientMode.Color">
      <summary>Use a single color for the <see cref="UnityEngine.ParticleSystem.MinMaxGradient"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemGradientMode.Gradient">
      <summary>Use a single color gradient for the <see cref="UnityEngine.ParticleSystem.MinMaxGradient"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemGradientMode.TwoColors">
      <summary>Use a random value between 2 colors for the <see cref="UnityEngine.ParticleSystem.MinMaxGradient"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemGradientMode.TwoGradients">
      <summary>Use a random value between 2 color gradients for the <see cref="UnityEngine.ParticleSystem.MinMaxGradient"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemGradientMode.RandomColor">
      <summary>
        <para>Define a list of colors in the <see cref="UnityEngine.ParticleSystem.MinMaxGradient"></see>, to be chosen from at random.</para>
        <para>The gradient is evaluated at a random point. The color returned is uninterpolated between color keys. Each color key in the gradient effectively changes the gradient to a fixed color for values between that key and the following key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCustomData.Custom1">
      <summary>The first stream of custom per-particle data.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCustomData.Custom2">
      <summary>The second stream of custom per-particle data.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCustomDataMode.Disabled">
      <summary>Don't generate any data.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCustomDataMode.Vector">
      <summary>Generate data using <see cref="UnityEngine.ParticleSystem.MinMaxCurve"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCustomDataMode.Color">
      <summary>Generate data using <see cref="UnityEngine.ParticleSystem.MinMaxGradient"></see>.</summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCurveMode.Constant">
      <summary>
        <para>Use a single constant for the <see cref="UnityEngine.ParticleSystem.MinMaxCurve"></see>.</para>
        <para>The value returned will always be the same.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCurveMode.Curve">
      <summary>
        <para>Use a single curve for the <see cref="UnityEngine.ParticleSystem.MinMaxCurve"></see>.</para>
        <para>The curve is evaluated at the input value (for example, the age of the Particle System or the velocity of the particle), and so will always give the same result for the same input value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCurveMode.TwoCurves">
      <summary>
        <para>Use a random value between 2 curves for the <see cref="UnityEngine.ParticleSystem.MinMaxCurve"></see>.</para>
        <para>Two curves will each be evaluated at the input value (for example, Particle System age or particle speed, depending on the module), and a random value between the two results will be computed and returned. Thus, some control over the overall value is retained, but the result is still randomized.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemCurveMode.TwoConstants">
      <summary>
        <para>Use a random value between 2 constants for the <see cref="UnityEngine.ParticleSystem.MinMaxCurve"></see>.</para>
        <para>The value returned will be chosen at each evaluation as a random value between the two given constants, and will not be dependent on the variable factor (for instance, Particle System age, or particle speed).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Burst.repeatInterval">
      <summary>How often to repeat the burst, in seconds.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Burst.time">
      <summary>
        <para>The time that each burst occurs.</para>
        <para>Can be either Time or Distance, based on the current emission mode.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticlePhysicsExtensions.GetCollisionEvents(UnityEngine.ParticleSystem,UnityEngine.GameObject,UnityEngine.ParticleCollisionEvent[])">
      <summary>
        <para>Get the particle collision events for a GameObject. Returns the number of events written to the array.</para>
        <para>This method is typically called from <see cref="UnityEngine.UI.BaseMeshEffect.MonoBehaviour.OnParticleCollision"></see> in response to a collision callback. If the array used is too short, the list of collision events will be truncated. This means you will not have every event that occurred. To avoid this use ParticleSystem.GetSafeCollisionEventSize to determine an appropriate array size prior the call.</para>
      </summary>
      <param name="go">The GameObject for which to retrieve collision events.</param>
      <param name="collisionEvents">Array to write collision events to.</param>
      <seealso cref="M:UnityEngine.UI.BaseMeshEffect.MonoBehaviour.OnParticleCollision(UnityEngine.GameObject)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticlePhysicsExtensions.GetSafeCollisionEventSize(UnityEngine.ParticleSystem)">
      <summary>
        <para>Safe array size for use with ParticleSystem.GetCollisionEvents.</para>
        <para>This is guaranteed to be large enough to use with ParticleSystem.GetCollisionEvents for the current frame. GetCollisionEvents may return fewer elements for some GameObjects though.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticlePhysicsExtensions.GetSafeTriggerParticlesSize(UnityEngine.ParticleSystem,UnityEngine.ParticleSystemTriggerEventType)">
      <summary>
        <para>Safe array size for use with ParticleSystem.GetTriggerParticles.</para>
        <para>This is guaranteed to be large enough to use with ParticleSystem.GetTriggerParticles for the current frame. GetTriggerParticles may return fewer elements for some GameObjects though.</para>
      </summary>
      <param name="ps">Particle system.</param>
      <param name="type">Type of trigger to return size for.</param>
      <returns>Number of particles with this trigger event type.</returns>
    </member>
    <member name="P:UnityEngine.ParticleSystem.trails">
      <summary>Access the particle system trails module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleCollisionEvent.colliderComponent">
      <summary>
        <para>The <see cref="UnityEngine.Collider"></see> or <see cref="UnityEngine.Collider2D"></see> for the GameObject struck by the particles.</para>
        <para>Cast the return value and test for null, if you expect both Collider and Collider2D components to be returned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.trigger">
      <summary>Access the particle system trigger module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleCollisionEvent.intersection">
      <summary>
        <para>Intersection point of the collision in world coordinates.</para>
        <para>The intersection point is reported in world coordinates regardless of whether the particle system is simulated in local coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.useAutoRandomSeed">
      <summary>
        <para>Controls whether the Particle System uses an automatically-generated random number to seed the random number generator.</para>
        <para>If set to true, the Particle System will generate a new random seed each time it is played. If set to false, <see cref="UnityEngine.ParticleSystem.randomSeed"></see> will be used instead, allowing for a constant seed (useful if you want your particles to play in exactly the same way each time) or user-defined random value (for example, you may want to cycle through an array of seeds).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleCollisionEvent.normal">
      <summary>
        <para>Geometry normal at the intersection point of the collision.</para>
        <para>The normal is reported in world coordinates regardless of whether the particle system is simulated in local coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.velocityOverLifetime">
      <summary>
        <para>Access the particle system velocity over lifetime module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleCollisionEvent.velocity">
      <summary>
        <para>Incident velocity at the intersection point of the collision.</para>
        <para>The velocity is reported in world coordinates regardless of whether the particle system is simulated in local coordinates.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Clear(System.Boolean)">
      <summary>Remove all particles in the particle system.</summary>
      <param name="withChildren">Clear all child particle systems as well.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Clear">
      <summary>Remove all particles in the particle system.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Emit(System.Int32)">
      <summary>Emit <c>count</c> particles immediately.</summary>
      <param name="count">Number of particles to emit.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.IsAlive(System.Boolean)">
      <summary>Does the system have any live particles (or will produce more)?</summary>
      <param name="withChildren">Check all child particle systems as well.</param>
      <returns>True if the particle system is still "alive", false if the particle system is done emitting particles and all particles are dead.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.IsAlive">
      <summary>Does the system have any live particles (or will produce more)?</summary>
      <returns>True if the particle system is still "alive", false if the particle system is done emitting particles and all particles are dead.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      <summary>
        <para>Pauses the system so no new particles are emitted and the existing particles are not updated.</para>
        <para>The following example creates a GUI window for manipulating a particle system.</para>
      </summary>
      <param name="withChildren">Pause all child particle systems as well.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Stop(System.Boolean,UnityEngine.ParticleSystemStopBehavior)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Pause">
      <summary>
        <para>Pauses the system so no new particles are emitted and the existing particles are not updated.</para>
        <para>The following example creates a GUI window for manipulating a particle system.</para>
      </summary>
      <seealso cref="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Stop(System.Boolean,UnityEngine.ParticleSystemStopBehavior)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      <summary>
        <para>Starts the particle system.</para>
        <para>Sets the particle systems into play mode and enables emitting (if it has been disabled). If the particle system has been paused, then this resumes playing from the previous time. If the particle system has stopped, then the system starts from time 0, and, if it is relevant, the <see href="ParticleSystem-startDelay" cref="startDelay"></see> is applied. The following example creates a GUI window for manipulating a particle system.</para>
      </summary>
      <param name="withChildren">Play all child particle systems as well.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.Stop(System.Boolean,UnityEngine.ParticleSystemStopBehavior)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      </seealso>
      <seealso cref="P:UnityEngine.ParticleSystem.isEmitting">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Play">
      <summary>
        <para>Starts the particle system.</para>
        <para>Sets the particle systems into play mode and enables emitting (if it has been disabled). If the particle system has been paused, then this resumes playing from the previous time. If the particle system has stopped, then the system starts from time 0, and, if it is relevant, the <see href="ParticleSystem-startDelay" cref="startDelay"></see> is applied. The following example creates a GUI window for manipulating a particle system.</para>
      </summary>
      <seealso cref="M:UnityEngine.ParticleSystem.Stop(System.Boolean,UnityEngine.ParticleSystemStopBehavior)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      </seealso>
      <seealso cref="P:UnityEngine.ParticleSystem.isEmitting">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</summary>
      <param name="t">Time period in seconds to advance the ParticleSystem simulation by. If <c>restart</c> is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If <c>restart</c> is false, the ParticleSystem simulation will be advanced in time from its current state by this value.</param>
      <param name="withChildren">Fastforward all child particle systems as well.</param>
      <param name="restart">Restart and start from the beginning.</param>
      <param name="fixedTimeStep">Only update the system at fixed intervals, based on the value in "Fixed Time" in the Time options.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single,System.Boolean,System.Boolean)">
      <summary>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</summary>
      <param name="t">Time period in seconds to advance the ParticleSystem simulation by. If <c>restart</c> is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If <c>restart</c> is false, the ParticleSystem simulation will be advanced in time from its current state by this value.</param>
      <param name="withChildren">Fastforward all child particle systems as well.</param>
      <param name="restart">Restart and start from the beginning.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single,System.Boolean)">
      <summary>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</summary>
      <param name="t">Time period in seconds to advance the ParticleSystem simulation by. If <c>restart</c> is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If <c>restart</c> is false, the ParticleSystem simulation will be advanced in time from its current state by this value.</param>
      <param name="withChildren">Fastforward all child particle systems as well.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single)">
      <summary>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</summary>
      <param name="t">Time period in seconds to advance the ParticleSystem simulation by. If <c>restart</c> is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If <c>restart</c> is false, the ParticleSystem simulation will be advanced in time from its current state by this value.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Stop(System.Boolean,UnityEngine.ParticleSystemStopBehavior)">
      <summary>
        <para>Stops playing the particle system using the supplied stop behaviour.</para>
        <para>The following example creates a GUI window for manipulating a particle system.</para>
      </summary>
      <param name="withChildren">Stop all child particle systems as well.</param>
      <param name="stopBehavior">Stop emitting or stop emitting and clear the system.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Stop(System.Boolean)">
      <summary>
        <para>Stops playing the particle system using the supplied stop behaviour.</para>
        <para>The following example creates a GUI window for manipulating a particle system.</para>
      </summary>
      <param name="withChildren">Stop all child particle systems as well.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Stop">
      <summary>
        <para>Stops playing the particle system using the supplied stop behaviour.</para>
        <para>The following example creates a GUI window for manipulating a particle system.</para>
      </summary>
      <seealso cref="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      </seealso>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.sendCollisionMessages">
      <summary>Send collision callback messages.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.type">
      <summary>
        <para>The type of particle collision to perform.</para>
        <para>Here is an example of plane collsiion:</para>
        <para>Here is an example of world collision:</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.voxelSize">
      <summary>
        <para>Size of voxels in the collision cache.</para>
        <para>Smaller values improve accuracy, but require higher memory usage and are less efficient.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.CollisionModule.GetPlane(System.Int32)">
      <summary>Get a collision plane associated with this particle system.</summary>
      <param name="index">Specifies which plane to access.</param>
      <returns>The plane.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.CollisionModule.SetPlane(System.Int32,UnityEngine.Transform)">
      <summary>Set a collision plane to be used with this particle system.</summary>
      <param name="index">Specifies which plane to set.</param>
      <param name="transform">The plane to set.</param>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ColorBySpeedModule.color">
      <summary>The gradient controlling the particle colors.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ColorBySpeedModule.enabled">
      <summary>Enable/disable the Color By Speed module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ColorBySpeedModule.range">
      <summary>Apply the color gradient between these minimum and maximum speeds.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Burst.count">
      <summary>Number of particles to be emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Burst.cycleCount">
      <summary>How many times to play the burst. (0 means infinitely).</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Burst.maxCount">
      <summary>Maximum number of particles to be emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Burst.minCount">
      <summary>Minimum number of particles to be emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ColorOverLifetimeModule.color">
      <summary>The gradient controlling the particle colors.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ColorOverLifetimeModule.enabled">
      <summary>Enable/disable the Color Over Lifetime module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CustomDataModule.enabled">
      <summary>Enable/disable the Custom Data module.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.CustomDataModule.GetColor(UnityEngine.ParticleSystemCustomData)">
      <summary>Get a <see cref="UnityEngine.ParticleSystem.MinMaxGradient"></see>, that is being used to generate custom HDR color data.</summary>
      <param name="stream">The name of the custom data stream to retrieve the gradient from.</param>
      <returns>The color gradient being used to generate custom color data.</returns>
      <seealso cref="M:UnityEngine.ParticleSystem.CustomDataModule.SetColor(UnityEngine.ParticleSystemCustomData,UnityEngine.ParticleSystem.MinMaxGradient)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.GetCustomParticleData(UnityEngine.ParticleSystemCustomData)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.CustomDataModule.GetMode(UnityEngine.ParticleSystemCustomData)">
      <summary>Find out the type of custom data that is being generated for the chosen data stream.</summary>
      <param name="stream">The name of the custom data stream to query.</param>
      <returns>The type of data being generated for the requested stream.</returns>
      <seealso cref="M:UnityEngine.ParticleSystem.CustomDataModule.SetMode(UnityEngine.ParticleSystemCustomData,UnityEngine.ParticleSystemCustomDataMode)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.GetCustomParticleData(UnityEngine.ParticleSystemCustomData)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.CustomDataModule.GetVector(UnityEngine.ParticleSystemCustomData,System.Int32)">
      <summary>Get a <see cref="UnityEngine.ParticleSystem.MinMaxCurve"></see>, that is being used to generate custom data.</summary>
      <param name="stream">The name of the custom data stream to retrieve the curve from.</param>
      <param name="component">The component index to retrieve the curve for (0-3, mapping to the xyzw components of a Vector4 or float4).</param>
      <returns>The curve being used to generate custom data.</returns>
      <seealso cref="M:UnityEngine.ParticleSystem.CustomDataModule.SetVector(UnityEngine.ParticleSystemCustomData,System.Int32,UnityEngine.ParticleSystem.MinMaxCurve)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.GetCustomParticleData(UnityEngine.ParticleSystemCustomData)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.CustomDataModule.GetVectorComponentCount(UnityEngine.ParticleSystemCustomData)">
      <summary>Query how many <see cref="UnityEngine.ParticleSystem.MinMaxCurve"></see> elements are being used to generate this stream of custom data.</summary>
      <param name="stream">The name of the custom data stream to retrieve the curve from.</param>
      <returns>The number of curves.</returns>
      <seealso cref="M:UnityEngine.ParticleSystem.CustomDataModule.SetVectorComponentCount(UnityEngine.ParticleSystemCustomData,System.Int32)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.GetCustomParticleData(UnityEngine.ParticleSystemCustomData)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.CustomDataModule.SetMode(UnityEngine.ParticleSystemCustomData,UnityEngine.ParticleSystemCustomDataMode)">
      <summary>Choose the type of custom data to generate for the chosen data stream.</summary>
      <param name="stream">The name of the custom data stream to enable data generation on.</param>
      <param name="mode">The type of data to generate.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.CustomDataModule.GetMode(UnityEngine.ParticleSystemCustomData)">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.GetCustomParticleData(UnityEngine.ParticleSystemCustomData)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.CustomDataModule.SetVectorComponentCount(UnityEngine.ParticleSystemCustomData,System.Int32)">
      <summary>Specify how many curves are used to generate custom data for this stream.</summary>
      <param name="stream">The name of the custom data stream to apply the curve to.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.CustomDataModule.GetVectorComponentCount(UnityEngine.ParticleSystemCustomData)">
      </seealso>
      <seealso cref="T:UnityEngine.ParticleSystem.MinMaxCurve">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.GetCustomParticleData(UnityEngine.ParticleSystemCustomData)">
      </seealso>
    </member>
    <member name="P:UnityEngine.ParticleSystem.collision">
      <summary>
        <para>Access the particle system collision module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.colorBySpeed">
      <summary>
        <para>Access the particle system color by lifetime module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.colorOverLifetime">
      <summary>
        <para>Access the particle system color over lifetime module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.customData">
      <summary>
        <para>Access the particle system Custom Data module.</para>
        <para>Once configured, this module will generate custom per-particle data, which you can use either in script or shaders. To read the data from script, simply call <see cref="UnityEngine.ParticleSystem.GetCustomParticleData"></see>. To read it in a shader, enable the custom data streams in the <see cref="UnityEngine.ParticleSystemRenderer"></see> Module, or call ParticleSystemRenderer.EnableVertexStreams from script. Once enabled, the custom data will be passed to your vertex shader through a TEXCOORD channel. The <see cref="UnityEngine.ParticleSystemRenderer"></see> Inspector will tell you which channels are being used. Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.emission">
      <summary>
        <para>Access the particle system emission module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.externalForces">
      <summary>
        <para>Access the particle system external forces module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.forceOverLifetime">
      <summary>
        <para>Access the particle system force over lifetime module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.inheritVelocity">
      <summary>
        <para>Access the particle system velocity inheritance module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.isEmitting">
      <summary>Is the particle system currently emitting particles? A particle system may stop emitting when its emission module has finished, it has been paused or if the system has been stopped using <see cref="UnityEngine.ParticleSystem.Stop"></see> with the <see cref="UnityEngine.ParticleSystemStopBehavior.StopEmitting"></see> flag. Resume emitting by calling <see cref="UnityEngine.ParticleSystem.Play"></see>.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.isPaused">
      <summary>Is the particle system paused right now ?</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.isPlaying">
      <summary>Is the particle system playing right now ?</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.isStopped">
      <summary>Is the particle system stopped right now ?</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.lights">
      <summary>Access the particle system lights module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.limitVelocityOverLifetime">
      <summary>
        <para>Access the particle system limit velocity over lifetime module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.main">
      <summary>
        <para>Access the main particle system settings.</para>
        <para>The general settings visible in the ParticleSystem's inspector above all of the other modules are accessible from this special main module.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.noise">
      <summary>Access the particle system noise module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.particleCount">
      <summary>The current number of particles (Read Only).</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.randomSeed">
      <summary>
        <para>Override the random seed used for the particle system emission.</para>
        <para>Setting this will also set <see cref="UnityEngine.ParticleSystem.useAutoRandomSeed"></see> to false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.rotationBySpeed">
      <summary>
        <para>Access the particle system rotation by speed module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.rotationOverLifetime">
      <summary>
        <para>Access the particle system rotation over lifetime module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.shape">
      <summary>
        <para>Access the particle system shape module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.sizeBySpeed">
      <summary>
        <para>Access the particle system size by speed module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.sizeOverLifetime">
      <summary>
        <para>Access the particle system size over lifetime module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.subEmitters">
      <summary>
        <para>Access the particle system sub emitters module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.textureSheetAnimation">
      <summary>
        <para>Access the particle system texture sheet animation module.</para>
        <para>Particle system modules do not need to be reassigned back to the system; they are interfaces and not independent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.time">
      <summary>
        <para>Playback position in seconds.</para>
        <para>Use this to read current playback time or to seek to a new playback time.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.InheritVelocityModule.curve">
      <summary>Curve to define how much emitter velocity is applied during the lifetime of a particle.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.InheritVelocityModule.curveMultiplier">
      <summary>
        <para>Change the curve multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall curve multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.InheritVelocityModule.enabled">
      <summary>Enable/disable the InheritVelocity module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.InheritVelocityModule.mode">
      <summary>How to apply emitter velocity to particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.alphaAffectsIntensity">
      <summary>
        <para>Toggle whether the particle alpha gets multiplied by the light intensity, when computing the final light intensity.</para>
        <para>Useful for fading the lights out at the same time as the particles, to avoid popping.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.enabled">
      <summary>Enable/disable the Lights module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.intensity">
      <summary>Define a curve to apply custom intensity scaling to particle lights.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.intensityMultiplier">
      <summary>
        <para>Intensity multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall intensity multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.light">
      <summary>Select what Light prefab you want to base your particle lights on.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.maxLights">
      <summary>
        <para>Set a limit on how many lights this Module can create.</para>
        <para>This value is useful for avoiding bad performance, due to how easy it can be to create lots of lights.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.range">
      <summary>Define a curve to apply custom range scaling to particle lights.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.rangeMultiplier">
      <summary>
        <para>Range multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall range multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.ratio">
      <summary>
        <para>Choose what proportion of particles will receive a dynamic light.</para>
        <para>Use a value between 0 and 1, where 0 will apply lights to no particles, and 1 will apply lights to all particles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.sizeAffectsRange">
      <summary>
        <para>Toggle where the particle size will be multiplied by the light range, to determine the final light range.</para>
        <para>This is useful for shrinking light influence at the same time as particles disappear, to avoid popping.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.useParticleColor">
      <summary>
        <para>Toggle whether the particle lights will have their color multiplied by the particle color.</para>
        <para>Remember to also set your light color to white, if you want to control the lights to have the exact same color as the particles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.bounce">
      <summary>How much force is applied to each particle after a collision.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.bounceMultiplier">
      <summary>
        <para>Change the bounce multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall bounce multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LightsModule.useRandomDistribution">
      <summary>
        <para>Randomly assign lights to new particles based on <see cref="UnityEngine.ParticleSystem.LightsModule.ratio"></see>.</para>
        <para>When this property is false, lights will instead be assigned regularly according to <see cref="UnityEngine.ParticleSystem.LightsModule.ratio"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.colliderForce">
      <summary>How much force is applied to a Collider when hit by particles from this Particle System.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.collidesWith">
      <summary>Control which layers this particle system collides with.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.dampen">
      <summary>How much speed is lost from each particle after a collision.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.dampenMultiplier">
      <summary>
        <para>Change the dampen multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall dampen multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.enabled">
      <summary>Enable/disable the Collision module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.enableDynamicColliders">
      <summary>Allow particles to collide with dynamic colliders when using world collision mode.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.lifetimeLoss">
      <summary>How much a particle's lifetime is reduced after a collision.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.lifetimeLossMultiplier">
      <summary>
        <para>Change the lifetime loss multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall lifetime loss multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.maxCollisionShapes">
      <summary>The maximum number of collision shapes that will be considered for particle collisions. Excess shapes will be ignored. Terrains take priority.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.maxKillSpeed">
      <summary>Kill particles whose speed goes above this threshold, after a collision.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.maxPlaneCount">
      <summary>The maximum number of planes it is possible to set as colliders.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.minKillSpeed">
      <summary>Kill particles whose speed falls below this threshold, after a collision.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.mode">
      <summary>Choose between 2D and 3D world collisions.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.multiplyColliderForceByCollisionAngle">
      <summary>If true, the collision angle is considered when applying forces from particles to Colliders.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.multiplyColliderForceByParticleSize">
      <summary>
        <para>If true, particle sizes are considered when applying forces to Colliders.</para>
        <para>If enabled, the force applied to a collider is proportional to the area (2D) or volume (3D) of the particle hitting the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.multiplyColliderForceByParticleSpeed">
      <summary>If true, particle speeds are considered when applying forces to Colliders.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.quality">
      <summary>
        <para>Specifies the accuracy of particle collisions against colliders in the scene.</para>
        <para>The high quality setting is the least likely to exhibit any leaked particles through colliders, but comes with the highest CPU load. Medium and low quality use simpler approximations and may leak particles, but offer faster performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.CollisionModule.radiusScale">
      <summary>
        <para>A multiplier applied to the size of each particle before collisions are processed.</para>
        <para>Useful for improving the visual accuracy of collisions, for example when there is an alpha border in the particle texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ForceOverLifetimeModule.enabled">
      <summary>Enable/disable the Force Over Lifetime module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ForceOverLifetimeModule.randomized">
      <summary>When randomly selecting values between two curves or constants, this flag will cause a new random force to be chosen on each frame.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ForceOverLifetimeModule.space">
      <summary>Are the forces being applied in local or world space?</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ForceOverLifetimeModule.x">
      <summary>The curve defining particle forces in the X axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ForceOverLifetimeModule.xMultiplier">
      <summary>
        <para>Change the X axis mulutiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall X axis multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ForceOverLifetimeModule.y">
      <summary>The curve defining particle forces in the Y axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ForceOverLifetimeModule.yMultiplier">
      <summary>
        <para>Change the Y axis multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall Y axis multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ForceOverLifetimeModule.z">
      <summary>The curve defining particle forces in the Z axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ForceOverLifetimeModule.zMultiplier">
      <summary>
        <para>Change the Z axis multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall Z axis multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.angularVelocity">
      <summary>
        <para>Override the angular velocity of emitted particles.</para>
        <para>This value will be ignored if the particle system uses either of the velocity modules.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.angularVelocity3D">
      <summary>Override the 3D angular velocity of emitted particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.applyShapeToPosition">
      <summary>
        <para>When overriding the position of particles, setting this flag to true allows you to retain the influence of the shape module.</para>
        <para>With this flag set to false, the position specified is the exact position where particles will spawn from, and the shape module is ignored.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.axisOfRotation">
      <summary>Override the axis of rotation of emitted particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.position">
      <summary>
        <para>Override the position of emitted particles.</para>
        <para>When using this parameter, the Shape Module will be skipped, giving you direct control over particle spawn positions. To retain the effects of the shape module, set <see cref="UnityEngine.ParticleSystem.EmitParams.applyShapeToPosition"></see> to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.randomSeed">
      <summary>Override the random seed of emitted particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.rotation">
      <summary>Override the rotation of emitted particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.rotation3D">
      <summary>Override the 3D rotation of emitted particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.startColor">
      <summary>Override the initial color of emitted particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.startLifetime">
      <summary>Override the lifetime of emitted particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.startSize">
      <summary>Override the initial size of emitted particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.startSize3D">
      <summary>Override the initial 3D size of emitted particles.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmitParams.velocity">
      <summary>Override the velocity of emitted particles.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmitParams.ResetAngularVelocity">
      <summary>Reverts angularVelocity and angularVelocity3D back to the values specified in the inspector.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmitParams.ResetAxisOfRotation">
      <summary>Revert the axis of rotation back to the value specified in the inspector.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmitParams.ResetPosition">
      <summary>Revert the position back to the value specified in the inspector.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmitParams.ResetRandomSeed">
      <summary>Revert the random seed back to the value specified in the inspector.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmitParams.ResetRotation">
      <summary>Reverts rotation and rotation3D back to the values specified in the inspector.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmitParams.ResetStartColor">
      <summary>Revert the initial color back to the value specified in the inspector.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmitParams.ResetStartLifetime">
      <summary>Revert the lifetime back to the value specified in the inspector.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmitParams.ResetStartSize">
      <summary>Revert the initial size back to the value specified in the inspector.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmitParams.ResetVelocity">
      <summary>Revert the velocity back to the value specified in the inspector.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ExternalForcesModule.enabled">
      <summary>Enable/disable the External Forces module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ExternalForcesModule.multiplier">
      <summary>Multiplies the magnitude of applied external forces.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxCurve.curveMultiplier">
      <summary>
        <para>Set a multiplier to be applied to the curves.</para>
        <para>SA <see cref="UnityEngine.ParticleSystem.MinMaxCurve.curve"></see>, <see cref="UnityEngine.ParticleSystem.MinMaxCurve.curveMin"></see>, <see cref="UnityEngine.ParticleSystem.MinMaxCurve.curveMax"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxCurve.mode">
      <summary>Set the mode that the min-max curve will use to evaluate values.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.MinMaxCurve.Evaluate(System.Single)">
      <summary>
        <para>Manually query the curve to calculate values based on what mode it is in.</para>
        <para>The time and lerpFactor parameters will be automatically clamped into the 0-1 range.</para>
      </summary>
      <param name="time">Normalized time (in the range 0 - 1, where 1 represents 100%) at which to evaluate the curve. This is valid when <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see> is set to <see cref="UnityEngine.ParticleSystemCurveMode.Curve"></see> or <see cref="UnityEngine.ParticleSystemCurveMode.TwoCurves"></see>.</param>
      <returns>Calculated curve/constant value.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.MinMaxCurve.Evaluate(System.Single,System.Single)">
      <summary>
        <para>Manually query the curve to calculate values based on what mode it is in.</para>
        <para>The time and lerpFactor parameters will be automatically clamped into the 0-1 range.</para>
      </summary>
      <param name="time">Normalized time (in the range 0 - 1, where 1 represents 100%) at which to evaluate the curve. This is valid when <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see> is set to <see cref="UnityEngine.ParticleSystemCurveMode.Curve"></see> or <see cref="UnityEngine.ParticleSystemCurveMode.TwoCurves"></see>.</param>
      <param name="lerpFactor">Blend between the 2 curves/constants (Valid when <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see> is set to <see cref="UnityEngine.ParticleSystemCurveMode.TwoConstants"></see> or <see cref="UnityEngine.ParticleSystemCurveMode.TwoCurves"></see>).</param>
      <returns>Calculated curve/constant value.</returns>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmissionModule.burstCount">
      <summary>The current number of bursts.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmissionModule.enabled">
      <summary>Enable/disable the Emission module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxGradient.color">
      <summary>
        <para>Set a constant color.</para>
        <para>Useful when <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see> is set to <see cref="UnityEngine.ParticleSystemGradientMode.Color"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmissionModule.rateOverDistance">
      <summary>
        <para>The rate at which new particles are spawned, over distance.</para>
        <para>New particles will only be emitted when the emitter moves.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxGradient.colorMax">
      <summary>
        <para>Set a constant color for the upper bound.</para>
        <para>Useful when <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see> is set to <see cref="UnityEngine.ParticleSystemGradientMode.TwoColors"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmissionModule.rateOverDistanceMultiplier">
      <summary>
        <para>Change the rate over distance multiplier.</para>
        <para>This is more efficient than accessing the whole curve, if you only want to change the overall rate multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxGradient.colorMin">
      <summary>
        <para>Set a constant color for the lower bound.</para>
        <para>Useful when <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see> is set to <see cref="UnityEngine.ParticleSystemGradientMode.TwoColors"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmissionModule.rateOverTime">
      <summary>The rate at which new particles are spawned, over time.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxGradient.gradient">
      <summary>
        <para>Set the gradient.</para>
        <para>Useful when <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see> is set to <see cref="UnityEngine.ParticleSystemGradientMode.Gradient"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.EmissionModule.rateOverTimeMultiplier">
      <summary>
        <para>Change the rate over time multiplier.</para>
        <para>This is more efficient than accessing the whole curve, if you only want to change the overall rate multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxGradient.gradientMax">
      <summary>
        <para>Set a gradient for the upper bound.</para>
        <para>Useful when <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see> is set to <see cref="UnityEngine.ParticleSystemGradientMode.TwoGradients"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.EmissionModule.GetBurst(System.Int32)">
      <summary>Get a single burst from the array of bursts.</summary>
      <param name="index">The index of the burst to retrieve.</param>
      <returns>The burst data at the given index.</returns>
      <seealso cref="T:UnityEngine.ParticleSystem.Burst">
      </seealso>
      <seealso cref="M:UnityEngine.ParticleSystem.EmissionModule.GetBursts(UnityEngine.ParticleSystem.Burst[])">
      </seealso>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxGradient.gradientMin">
      <summary>
        <para>Set a gradient for the lower bound.</para>
        <para>Useful when <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see> is set to <see cref="UnityEngine.ParticleSystemGradientMode.TwoGradients"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxGradient.mode">
      <summary>Set the mode that the min-max gradient will use to evaluate colors.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.MinMaxGradient.Evaluate(System.Single)">
      <summary>
        <para>Manually query the gradient to calculate colors based on what mode it is in.</para>
        <para>The time and lerpFactor parameters will be automatically clamped into the 0-1 range.</para>
      </summary>
      <param name="time">Normalized time (in the range 0 - 1, where 1 represents 100%) at which to evaluate the gradient. This is valid when <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see> is set to <see cref="UnityEngine.ParticleSystemGradientMode.Gradient"></see> or <see cref="UnityEngine.ParticleSystemGradientMode.TwoGradients"></see>.</param>
      <returns>Calculated gradient/color value.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.MinMaxGradient.Evaluate(System.Single,System.Single)">
      <summary>
        <para>Manually query the gradient to calculate colors based on what mode it is in.</para>
        <para>The time and lerpFactor parameters will be automatically clamped into the 0-1 range.</para>
      </summary>
      <param name="time">Normalized time (in the range 0 - 1, where 1 represents 100%) at which to evaluate the gradient. This is valid when <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see> is set to <see cref="UnityEngine.ParticleSystemGradientMode.Gradient"></see> or <see cref="UnityEngine.ParticleSystemGradientMode.TwoGradients"></see>.</param>
      <param name="lerpFactor">Blend between the 2 gradients/colors (Valid when <see cref="UnityEngine.ParticleSystem.MinMaxGradient.mode"></see> is set to <see cref="UnityEngine.ParticleSystemGradientMode.TwoColors"></see> or <see cref="UnityEngine.ParticleSystemGradientMode.TwoGradients"></see>).</param>
      <returns>Calculated gradient/color value.</returns>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.skinnedMeshRenderer">
      <summary>SkinnedMeshRenderer to emit particles from.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.sphericalDirectionAmount">
      <summary>
        <para>Spherizes the starting direction of particles.</para>
        <para>A value closer to 1 will apply a stronger spherization to the particle directions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.useMeshColors">
      <summary>Modulate the particle colors with the vertex colors, or the material color if no vertex colors exist.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.useMeshMaterialIndex">
      <summary>Emit from a single material, or the whole mesh.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startColor">
      <summary>The initial color of particles when emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startDelay">
      <summary>
        <para>Start delay in seconds.</para>
        <para>Use this to delay when the playback starts on the system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startDelayMultiplier">
      <summary>
        <para>Start delay multiplier in seconds.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall start delay multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.enabled">
      <summary>Enable/disable the Size By Speed module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startLifetime">
      <summary>
        <para>The total lifetime in seconds that each new particle will have.</para>
        <para>This value is set on the particle when it is created by the particle system. Assign a value of float.PositiveInfinity to particles to prevent the Particle System from destroying them. This gives the particles an infinite lifespan.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startLifetimeMultiplier">
      <summary>
        <para>Start lifetime multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall lifetime multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.range">
      <summary>Apply the size curve between these minimum and maximum speeds.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.separateAxes">
      <summary>
        <para>Set the size by speed on each axis separately.</para>
        <para>When disabled, only the x axis speed curve is used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startRotation">
      <summary>
        <para>The initial rotation of particles when emitted.</para>
        <para>Note that the value should be given in radians.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.size">
      <summary>Curve to control particle size based on speed.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startRotation3D">
      <summary>A flag to enable 3D particle rotation.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.sizeMultiplier">
      <summary>
        <para>Size multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startRotationMultiplier">
      <summary>
        <para>Start rotation multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall rotation multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.x">
      <summary>Size by speed curve for the X axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startRotationX">
      <summary>
        <para>The initial rotation of particles around the X axis when emitted.</para>
        <para>Note that the value should be given in radians.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.xMultiplier">
      <summary>
        <para>X axis size multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startRotationXMultiplier">
      <summary>
        <para>Start rotation multiplier around the X axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall rotation multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.y">
      <summary>Size by speed curve for the Y axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startRotationY">
      <summary>
        <para>The initial rotation of particles around the Y axis when emitted.</para>
        <para>Note that the value should be given in radians.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startRotationYMultiplier">
      <summary>
        <para>Start rotation multiplier around the Y axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall rotation multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.yMultiplier">
      <summary>
        <para>Y axis size multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startRotationZ">
      <summary>
        <para>The initial rotation of particles around the Z axis when emitted.</para>
        <para>Note that the value should be given in radians.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.z">
      <summary>
        <para>Size by speed curve for the Z axis.</para>
        <para>Only used by mesh particles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startRotationZMultiplier">
      <summary>
        <para>Start rotation multiplier around the Z axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall rotation multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeBySpeedModule.zMultiplier">
      <summary>Z axis size multiplier.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSize">
      <summary>The initial size of particles when emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSize3D">
      <summary>A flag to enable specifying particle size individually for each axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSizeMultiplier">
      <summary>
        <para>Start size multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSizeX">
      <summary>The initial size of particles along the X axis when emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSizeXMultiplier">
      <summary>
        <para>Start rotation multiplier along the X axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSizeY">
      <summary>The initial size of particles along the Y axis when emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSizeYMultiplier">
      <summary>
        <para>Start rotation multiplier along the Y axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSizeZ">
      <summary>The initial size of particles along the Z axis when emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSizeZMultiplier">
      <summary>
        <para>Start rotation multiplier along the Z axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSpeed">
      <summary>The initial speed of particles when emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.startSpeedMultiplier">
      <summary>
        <para>A multiplier of the initial speed of particles when emitted.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.stopAction">
      <summary>Configure whether the GameObject will automatically disable or destroy itself, when the Particle System is stopped and all particles have died.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.useUnscaledTime">
      <summary>
        <para>When true, use the unscaled delta time to simulate the Particle System. Otherwise, use the scaled delta time.</para>
        <para>This is useful for playing effects whilst the game is paused and [[Time.timeScale] is set to zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.enabled">
      <summary>Enable/disable the Size Over Lifetime module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.separateAxes">
      <summary>
        <para>Set the size over lifetime on each axis separately.</para>
        <para>When disabled, only the x axis rotation curve is used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.size">
      <summary>Curve to control particle size based on lifetime.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.sizeMultiplier">
      <summary>
        <para>Size multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.x">
      <summary>Size over lifetime curve for the X axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.xMultiplier">
      <summary>
        <para>X axis size multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.y">
      <summary>Size over lifetime curve for the Y axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.yMultiplier">
      <summary>
        <para>Y axis size multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.z">
      <summary>
        <para>Size over lifetime curve for the Z axis.</para>
        <para>Only used by mesh particles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SizeOverLifetimeModule.zMultiplier">
      <summary>
        <para>Z axis size multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall size multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationOverLifetimeModule.z">
      <summary>Rotation over lifetime curve for the Z axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationOverLifetimeModule.zMultiplier">
      <summary>
        <para>Rotation multiplier around the Z axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall rotation multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxCurve.constant">
      <summary>
        <para>Set the constant value.</para>
        <para>Useful when <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see> is set to <see cref="UnityEngine.ParticleSystemCurveMode.Constant"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxCurve.constantMax">
      <summary>
        <para>Set a constant for the upper bound.</para>
        <para>Useful when <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see> is set to <see cref="UnityEngine.ParticleSystemCurveMode.TwoConstants"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxCurve.constantMin">
      <summary>
        <para>Set a constant for the lower bound.</para>
        <para>Useful when <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see> is set to <see cref="UnityEngine.ParticleSystemCurveMode.TwoConstants"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxCurve.curve">
      <summary>
        <para>Set the curve.</para>
        <para>Values should be set between 0 and 1. Use the curve multiplier to define the overall range of the curve. Useful when <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see> is set to <see cref="UnityEngine.ParticleSystemCurveMode.Curve"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxCurve.curveMax">
      <summary>
        <para>Set a curve for the upper bound.</para>
        <para>Values should be set between 0 and 1. Use the curve multiplier to define the overall range of the curve. Useful when <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see> is set to <see cref="UnityEngine.ParticleSystemCurveMode.TwoCurves"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MinMaxCurve.curveMin">
      <summary>
        <para>Set a curve for the lower bound.</para>
        <para>Values should be set between 0 and 1. Use the curve multiplier to define the overall range of the curve. Useful when <see cref="UnityEngine.ParticleSystem.MinMaxCurve.mode"></see> is set to <see cref="UnityEngine.ParticleSystemCurveMode.TwoCurves"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.alignToDirection">
      <summary>
        <para>Align particles based on their initial direction of travel.</para>
        <para>The Shape Module supports setting the initial rotation of particles based on their direction of travel. This can be useful to make particles appear to have originated from the surface of a Mesh (for example, paint flaking off a surface). This works with any shape type. Any ParticleSystem.startRotation set gets applied on top of this setting, so you can use both together. You can use this setting in conjunction with the <see cref="UnityEngine.ParticleSystem.MainModule.startRotation"></see> setting; the rotation given by <see cref="UnityEngine.ParticleSystem.MainModule.startRotation"></see> is added on top of that calculated by <see cref="UnityEngine.ParticleSystem.ShapeModule.alignToDirection"></see>. For example: add a <see cref="UnityEngine.ParticleSystem.MainModule.startRotation"></see> of 90 degrees when using <see cref="UnityEngine.ParticleSystem.ShapeModule.alignToDirection"></see>, and all the particles become perpendicular to the surface, like little spikes sticking out of it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.angle">
      <summary>Angle of the cone.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.arc">
      <summary>
        <para>Circle arc angle.</para>
        <para>Note that the value should be given in radians.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.arcMode">
      <summary>The mode used for generating particles around the arc.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.arcSpeed">
      <summary>
        <para>When using one of the animated modes, how quickly to move the emission position around the arc.</para>
        <para>The value is specified in terms of the number of complete 360 degree rotations. A value of 2 would mean that the emission position rotated 2 full times per second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.arcSpeedMultiplier">
      <summary>
        <para>A multiplier of the arc speed of the emission shape.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.arcSpread">
      <summary>
        <para>Control the gap between emission points around the arc.</para>
        <para>The value is specified in radians.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.boxThickness">
      <summary>
        <para>Thickness of the box.</para>
        <para>When using edge and shell modes, this controls how far from the perimeter, particles can be generated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.donutRadius">
      <summary>
        <para>The radius of the Donut shape.</para>
        <para>Controls the secondary radius of the Donut shape.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.enabled">
      <summary>Enable/disable the Shape module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.length">
      <summary>
        <para>Length of the cone.</para>
        <para>Note:<see cref="UnityEngine.ParticleSystem.ShapeModule.length"></see> is valid only when <see cref="UnityEngine.ParticleSystem.ShapeModule.shapeType"></see> is set to <c>ConeVolume</c> or <c>ConeVolumeShell</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.mesh">
      <summary>Mesh to emit particles from.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.meshMaterialIndex">
      <summary>Emit particles from a single material of a mesh.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.meshRenderer">
      <summary>MeshRenderer to emit particles from.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.meshShapeType">
      <summary>Where on the mesh to emit particles from.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.normalOffset">
      <summary>Move particles away from the surface of the source mesh.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.position">
      <summary>Apply an offset to the position from which particles are emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.radius">
      <summary>Radius of the shape.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.radiusMode">
      <summary>The mode used for generating particles along the radius.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.radiusSpeed">
      <summary>
        <para>When using one of the animated modes, how quickly to move the emission position along the radius.</para>
        <para>The value is specified in world units.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.radiusSpeedMultiplier">
      <summary>
        <para>A multiplier of the radius speed of the emission shape.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.radiusSpread">
      <summary>Control the gap between emission points along the radius.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.radiusThickness">
      <summary>
        <para>Thickness of the radius.</para>
        <para>When emitting from the edge of Circles, Cones and Spheres, this can be used to add a thicker border to where particles are emitted.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.customSimulationSpace">
      <summary>Simulate particles relative to a custom transform component.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.duration">
      <summary>
        <para>The duration of the particle system in seconds.</para>
        <para>This property can only be set when the particle system in not playing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.randomDirectionAmount">
      <summary>
        <para>Randomizes the starting direction of particles.</para>
        <para>A value closer to 1 will apply a stronger randomization to the particle directions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.emitterVelocityMode">
      <summary>Control how the Particle System calculates its velocity, when moving in the world.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.randomPositionAmount">
      <summary>
        <para>Randomizes the starting position of particles.</para>
        <para>A higher value will apply more randomization to the particle positions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.gravityModifier">
      <summary>Scale applied to the gravity, defined by <see cref="UnityEngine.Physics.gravity"></see>.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.rotation">
      <summary>Apply a rotation to the shape from which particles are emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.gravityModifierMultiplier">
      <summary>
        <para>Change the gravity mulutiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall gravity multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.scale">
      <summary>Apply scale to the shape from which particles are emitted.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.loop">
      <summary>
        <para>Is the particle system looping?</para>
        <para>If you disable looping on a playing particle system, it will stop after the end of the current loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.maxParticles">
      <summary>The maximum number of particles to emit.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.playOnAwake">
      <summary>
        <para>If set to true, the particle system will automatically start playing on startup.</para>
        <para>Note that this setting is shared between all particle systems in the current particle effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.ShapeModule.shapeType">
      <summary>Type of shape to emit particles from.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.prewarm">
      <summary>When looping is enabled, this controls whether this particle system will look like it has already simulated for one loop when first becoming visible.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.randomizeRotationDirection">
      <summary>
        <para>Cause some particles to spin in the opposite direction.</para>
        <para>Set between 0 and 1, where higher values will cause a higher proportion of particles to spin in the opposite direction.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.scalingMode">
      <summary>
        <para>Control how the particle system's Transform Component is applied to the particle system.</para>
        <para>Hierarchy: Scale according to its Transform and all its parents. Local: Scale using only its own Transform, ignroing all parents. Shape: Only apply scale to the source positions of the particles, but not their size. The source positions are defined by the Shape module.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.simulationSpace">
      <summary>
        <para>This selects the space in which to simulate particles. It can be either world or local space.</para>
        <para>Toggle between local and world space simulation using the following example:</para>
        <para>Simulate particles relative to an independent game object using the following example:</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.angularVelocity">
      <summary>
        <para>The angular velocity of the particle.</para>
        <para>This is the particle's angular velocity in degrees per second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.angularVelocity3D">
      <summary>
        <para>The 3D angular velocity of the particle.</para>
        <para>This is the particle's angular velocity in degrees per second, around each axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.MainModule.simulationSpeed">
      <summary>
        <para>Override the default playback speed of the Particle System.</para>
        <para>Useful for speeding up or slowing down the entire simulation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.animatedVelocity">
      <summary>
        <para>The animated velocity of the particle.</para>
        <para>Animated velocity is used for effects that are not based on physics, but rather are based on creating a specific velocity over time. Examples of modules that use this type of velocity are the Noise and Velocity over Lifetime modules. This velocity is not remembered across frames, because modules that use this value calculate a new velocity value each frame. The animated velocity is also used by the <see cref="UnityEngine.ParticleSystemRenderer"></see> if <c>Render Mode</c> is set to <see cref="UnityEngine.ParticleSystemRenderMode.Stretch"></see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.position">
      <summary>
        <para>The position of the particle.</para>
        <para>The position is defined relative to the simulation space (ie, world space or local space) set by the simulationSpace property. You can use <see cref="UnityEngine.Transform.TransformPoint"></see> and <see cref="UnityEngine.Transform.InverseTransformPoint"></see> to convert points between local and world space as necessary.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.randomSeed">
      <summary>
        <para>The random seed of the particle.</para>
        <para>This is used to create the value used to interpolate between the two curves when random between curves is used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.remainingLifetime">
      <summary>
        <para>The remaining lifetime of the particle.</para>
        <para>This is the time in seconds for how long this particle will remain alive. When the lifetime drops below zero the Particle will be killed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.rotation">
      <summary>
        <para>The rotation of the particle.</para>
        <para>This is the particle's rotation in degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.rotation3D">
      <summary>
        <para>The 3D rotation of the particle.</para>
        <para>This is the particle's rotation in degrees, on each axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.startColor">
      <summary>
        <para>The initial color of the particle. The current color of the particle is calculated procedurally based on this value and the active color modules.</para>
        <para>Alpha channel of the color is used to fade out particles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.startLifetime">
      <summary>
        <para>The starting lifetime of the particle.</para>
        <para>This is the total lifetime of this particle in seconds. It is set by the particle system when creating the particle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.startSize">
      <summary>
        <para>The initial size of the particle. The current size of the particle is calculated procedurally based on this value and the active size modules.</para>
        <para>This is particle's size in meters in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.startSize3D">
      <summary>
        <para>The initial 3D size of the particle. The current size of the particle is calculated procedurally based on this value and the active size modules.</para>
        <para>This is particle's size in meters in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.totalVelocity">
      <summary>
        <para>The total velocity of the particle.</para>
        <para>This is calculated as the sum of <see cref="UnityEngine.ParticleSystem.Particle.velocity"></see> and <see cref="UnityEngine.ParticleSystem.Particle.animatedVelocity"></see>. Some particle features use the physics-based velocity, and other features use the aniamted velocity. Use this property to obtain the total combined velocity of the particle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.Particle.velocity">
      <summary>
        <para>The velocity of the particle.</para>
        <para>This velocity is used for effects that are based on physics. Examples of features that use this type of velocity are the Force module, Gravity, and Start Speed. This velocity is remembered across frames, and will be reapplied to the particle position of each frame. The velocity is also used by the <see cref="UnityEngine.ParticleSystemRenderer"></see> if <c>Render Mode</c> is set to <see cref="UnityEngine.ParticleSystemRenderMode.Stretch"></see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Particle.GetCurrentColor(UnityEngine.ParticleSystem)">
      <summary>Calculate the current color of the particle by applying the relevant curves to its startColor property.</summary>
      <param name="system">The particle system from which this particle was emitted.</param>
      <returns>Current color.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Particle.GetCurrentSize(UnityEngine.ParticleSystem)">
      <summary>Calculate the current size of the particle by applying the relevant curves to its startSize property.</summary>
      <param name="system">The particle system from which this particle was emitted.</param>
      <returns>Current size.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Particle.GetCurrentSize3D(UnityEngine.ParticleSystem)">
      <summary>Calculate the current 3D size of the particle by applying the relevant curves to its startSize3D property.</summary>
      <param name="system">The particle system from which this particle was emitted.</param>
      <returns>Current size.</returns>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationBySpeedModule.enabled">
      <summary>Enable/disable the Rotation By Speed module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationBySpeedModule.range">
      <summary>Apply the rotation curve between these minimum and maximum speeds.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationBySpeedModule.separateAxes">
      <summary>
        <para>Set the rotation by speed on each axis separately.</para>
        <para>When disabled, only the z axis rotation curve is used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationBySpeedModule.x">
      <summary>Rotation by speed curve for the X axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationBySpeedModule.xMultiplier">
      <summary>
        <para>Speed multiplier along the X axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationBySpeedModule.y">
      <summary>Rotation by speed curve for the Y axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.dampen">
      <summary>Controls how much the velocity that exceeds the velocity limit should be dampened.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationBySpeedModule.yMultiplier">
      <summary>
        <para>Speed multiplier along the Y axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.drag">
      <summary>Controls the amount of drag applied to the particle velocities.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationBySpeedModule.z">
      <summary>Rotation by speed curve for the Z axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.dragMultiplier">
      <summary>
        <para>Change the drag multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall drag multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationBySpeedModule.zMultiplier">
      <summary>
        <para>Speed multiplier along the Z axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.enabled">
      <summary>Enable/disable the Limit Force Over Lifetime module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.limit">
      <summary>Maximum velocity curve, when not using one curve per axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.limitMultiplier">
      <summary>
        <para>Change the limit multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall limit multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.limitX">
      <summary>Maximum velocity curve for the X axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.limitXMultiplier">
      <summary>
        <para>Change the limit multiplier on the X axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall limit multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.limitY">
      <summary>Maximum velocity curve for the Y axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.limitYMultiplier">
      <summary>
        <para>Change the limit multiplier on the Y axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall limit multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.limitZ">
      <summary>Maximum velocity curve for the Z axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationOverLifetimeModule.enabled">
      <summary>Enable/disable the Rotation Over Lifetime module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.limitZMultiplier">
      <summary>
        <para>Change the limit multiplier on the Z axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall limit multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationOverLifetimeModule.separateAxes">
      <summary>
        <para>Set the rotation over lifetime on each axis separately.</para>
        <para>When disabled, only the z axis rotation curve is used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.multiplyDragByParticleSize">
      <summary>Adjust the amount of drag applied to particles, based on their sizes.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationOverLifetimeModule.x">
      <summary>Rotation over lifetime curve for the X axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationOverLifetimeModule.xMultiplier">
      <summary>
        <para>Rotation multiplier around the X axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall rotation multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.multiplyDragByParticleVelocity">
      <summary>Adjust the amount of drag applied to particles, based on their speeds.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.separateAxes">
      <summary>Set the velocity limit on each axis separately.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationOverLifetimeModule.y">
      <summary>Rotation over lifetime curve for the Y axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.RotationOverLifetimeModule.yMultiplier">
      <summary>
        <para>Rotation multiplier around the Y axis.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall rotation multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule.space">
      <summary>
        <para>Specifies if the velocity limits are in local space (rotated with the transform) or world space.</para>
        <para>Only applies when separateAxes is set to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.damping">
      <summary>Higher frequency noise will reduce the strength by a proportional amount, if enabled.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.enabled">
      <summary>Enable/disable the Noise module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.frequency">
      <summary>Low values create soft, smooth noise, and high values create rapidly changing noise.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.octaveCount">
      <summary>
        <para>Layers of noise that combine to produce final noise.</para>
        <para>Please note that adding octaves will substantially decrease performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.octaveMultiplier">
      <summary>When combining each octave, scale the intensity by this amount.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.octaveScale">
      <summary>When combining each octave, zoom in by this amount.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.positionAmount">
      <summary>How much the noise affects the particle positions.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.quality">
      <summary>Generate 1D, 2D or 3D noise.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.remap">
      <summary>Define how the noise values are remapped.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.remapEnabled">
      <summary>Enable remapping of the final noise values, allowing for noise values to be translated into different values.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.remapMultiplier">
      <summary>
        <para>Remap multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall remap multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.remapX">
      <summary>Define how the noise values are remapped on the X axis, when using the <see cref="UnityEngine.ParticleSystem.NoiseModule.separateAxes"></see> option.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.remapXMultiplier">
      <summary>
        <para>X axis remap multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall remap multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.remapY">
      <summary>Define how the noise values are remapped on the Y axis, when using the <see cref="UnityEngine.ParticleSystem.NoiseModule.separateAxes"></see> option.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.remapYMultiplier">
      <summary>
        <para>Y axis remap multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall remap multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.remapZ">
      <summary>Define how the noise values are remapped on the Z axis, when using the <see cref="UnityEngine.ParticleSystem.NoiseModule.separateAxes"></see> option.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.remapZMultiplier">
      <summary>
        <para>Z axis remap multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall remap multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.rotationAmount">
      <summary>How much the noise affects the particle rotation, in degrees per second.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.scrollSpeed">
      <summary>Scroll the noise map over the particle system.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.scrollSpeedMultiplier">
      <summary>
        <para>Scroll speed multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall scroll speed multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.separateAxes">
      <summary>Control the noise separately for each axis.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.sizeAmount">
      <summary>How much the noise affects the particle sizes, applied as a multiplier on the size of each particle.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.strength">
      <summary>How strong the overall noise effect is.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.strengthMultiplier">
      <summary>
        <para>Strength multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall strength multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.strengthX">
      <summary>Define the strength of the effect on the X axis, when using the <see cref="UnityEngine.ParticleSystem.NoiseModule.separateAxes"></see> option.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.strengthXMultiplier">
      <summary>
        <para>X axis strength multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall strength multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.strengthY">
      <summary>Define the strength of the effect on the Y axis, when using the <see cref="UnityEngine.ParticleSystem.NoiseModule.separateAxes"></see> option.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.strengthYMultiplier">
      <summary>
        <para>Y axis strength multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall strength multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.strengthZ">
      <summary>Define the strength of the effect on the Z axis, when using the <see cref="UnityEngine.ParticleSystem.NoiseModule.separateAxes"></see> option.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.NoiseModule.strengthZMultiplier">
      <summary>
        <para>Z axis strength multiplier.</para>
        <para>This method is more efficient than accessing the whole curve, if you only want to change the overall strength multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SubEmittersModule.enabled">
      <summary>Enable/disable the Sub Emitters module.</summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.SubEmittersModule.subEmittersCount">
      <summary>The total number of sub-emitters.</summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.SubEmittersModule.AddSubEmitter(UnityEngine.ParticleSystem,UnityEngine.ParticleSystemSubEmitterType,UnityEngine.ParticleSystemSubEmitterProperties)">
      <summary>Add a new sub-emitter.</summary>
      <param name="subEmitter">The sub-emitter to be added.</param>
      <param name="type">The event that creates new particles.</param>
      <param name="properties">The properties of the new particles.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.SubEmittersModule.RemoveSubEmitter(System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.SubEmittersModule.GetSubEmitterProperties(System.Int32)">
      <summary>Get the properties of the sub-emitter at the given index.</summary>
      <param name="index">The index of the desired sub-emitter.</param>
      <returns>The properties of the requested sub-emitter.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.SubEmittersModule.GetSubEmitterSystem(System.Int32)">
      <summary>Get the sub-emitter Particle System at the given index.</summary>
      <param name="index">The index of the desired sub-emitter.</param>
      <returns>The sub-emitter being requested.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.SubEmittersModule.GetSubEmitterType(System.Int32)">
      <summary>Get the type of the sub-emitter at the given index.</summary>
      <param name="index">The index of the desired sub-emitter.</param>
      <returns>The type of the requested sub-emitter.</returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.SubEmittersModule.RemoveSubEmitter(System.Int32)">
      <summary>Remove a sub-emitter from the given index in the array.</summary>
      <param name="index">The index from which to remove a sub-emitter.</param>
      <seealso cref="M:UnityEngine.ParticleSystem.SubEmittersModule.AddSubEmitter(UnityEngine.ParticleSystem,UnityEngine.ParticleSystemSubEmitterType,UnityEngine.ParticleSystemSubEmitterProperties)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ParticleSystem.SubEmittersModule.SetSubEmitterProperties(System.Int32,UnityEngine.ParticleSystemSubEmitterProperties)">
      <summary>Set the properties of the sub-emitter at the given index.</summary>
      <param name="index">The index of the sub-emitter being modified.</param>
      <param name="properties">The new properties to assign to this sub-emitter.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.SubEmittersModule.SetSubEmitterSystem(System.Int32,UnityEngine.ParticleSystem)">
      <summary>Set the Particle System to use as the sub-emitter at the given index.</summary>
      <param name="index">The index of the sub-emitter being modified.</param>
      <param name="subEmitter">The Particle System being used as this sub-emitter.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.SubEmittersModule.SetSubEmitterType(System.Int32,UnityEngine.ParticleSystemSubEmitterType)">
      <summary>Set the type of the sub-emitter at the given index.</summary>
      <param name="index">The index of the sub-emitter being modified.</param>
      <param name="type">The new spawning type to assign to this sub-emitter.</param>
    </member>
  </members>
</doc>