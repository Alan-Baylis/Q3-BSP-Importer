<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.TextRenderingModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.FontStyle">
      <summary>Font Style applied to GUI Texts, Text Meshes or GUIStyles.</summary>
    </member>
    <member name="T:UnityEngine.UICharInfo">
      <summary>Class that specifies some information about a renderable character.</summary>
    </member>
    <member name="T:UnityEngine.UILineInfo">
      <summary>Information about a generated line of text.</summary>
    </member>
    <member name="T:UnityEngine.UIVertex">
      <summary>Vertex class used by a <see cref="UnityEngine.Canvas"></see> for managing vertices.</summary>
    </member>
    <member name="T:UnityEngine.Font">
      <summary>
        <para>Script interface for font assets.</para>
        <para>You can use this class to dynamically switch fonts on GUI texts or Text Meshes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUIText">
      <summary>A text string displayed in a GUI.</summary>
    </member>
    <member name="T:UnityEngine.CharacterInfo">
      <summary>Specification for how to render a character from the font texture. See <see cref="UnityEngine.Font.characterInfo"></see>.</summary>
    </member>
    <member name="T:UnityEngine.TextAlignment">
      <summary>
        <para>How multiline text should be aligned.</para>
        <para>This is used by the GUIText.alignment property.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextAnchor">
      <summary>
        <para>Where the anchor of the text is placed.</para>
        <para>This is used by GUIText.anchor property.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextGenerationSettings">
      <summary>A struct that stores the settings for TextGeneration.</summary>
    </member>
    <member name="T:UnityEngine.TextGenerator">
      <summary>
        <para>Class that can be used to generate text for rendering.</para>
        <para>Caches vertices, character info, and line info for memory friendlyness.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextMesh">
      <summary>A script interface for the text mesh component.</summary>
    </member>
    <member name="T:UnityEngine.VerticalWrapMode">
      <summary>Wrapping modes for text that reaches the vertical boundary.</summary>
    </member>
    <member name="T:UnityEngine.HorizontalWrapMode">
      <summary>Wrapping modes for text that reaches the horizontal boundary.</summary>
    </member>
    <member name="F:UnityEngine.FontStyle.Normal">
      <summary>No special style is applied.</summary>
    </member>
    <member name="F:UnityEngine.FontStyle.Bold">
      <summary>Bold style applied to your texts.</summary>
    </member>
    <member name="F:UnityEngine.FontStyle.Italic">
      <summary>Italic style applied to your texts.</summary>
    </member>
    <member name="F:UnityEngine.FontStyle.BoldAndItalic">
      <summary>Bold and Italic styles applied to your texts.</summary>
    </member>
    <member name="P:UnityEngine.Font.ascent">
      <summary>
        <para>The ascent of the font.</para>
        <para>The ascent of the font is the distance from the baseline to the top line of the font, as defined in the font's original data file.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Font.characterInfo">
      <summary>
        <para>Access an array of all characters contained in the font texture.</para>
        <para>You can read this if you want to render the font texture using custom generated Meshes, or you can set it when you want to build your own custom font assets from scripts (or modify existing ones).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Font.dynamic">
      <summary>Is the font a dynamic font.</summary>
    </member>
    <member name="P:UnityEngine.Font.fontSize">
      <summary>The default size of the font.</summary>
    </member>
    <member name="P:UnityEngine.Font.lineHeight">
      <summary>
        <para>The line height of the font.</para>
        <para>This is the line height of the font, used to align lines of text above each other.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Font.material">
      <summary>The material used for the font display.</summary>
    </member>
    <member name="F:UnityEngine.UICharInfo.charWidth">
      <summary>Character width.</summary>
    </member>
    <member name="F:UnityEngine.UICharInfo.cursorPos">
      <summary>Position of the character cursor in local (text generated) space.</summary>
    </member>
    <member name="M:UnityEngine.Font.GetCharacterInfo(System.Char,UnityEngine.CharacterInfo@,System.Int32,UnityEngine.FontStyle)">
      <summary>
        <para>Get rendering info for a specific character.</para>
        <para>Note: You should only ever need to use this when you want to implement your own text rendering. If the character <c>ch</c> with the specified <c>size</c> and <c>style</c> is present in the font texture, then this method will return true, and info will contain the texture placement information for that character. If the character is not present, this method returns false. If <c>size</c> is zero, it will use the default size for the font. Example at <see cref="UnityEngine.Font.RequestCharactersInTexture"></see>.</para>
      </summary>
      <param name="ch">The character you need rendering information for.</param>
      <param name="info">Returns the CharacterInfo struct with the rendering information for the character (if available).</param>
      <param name="size">The size of the character (default value of zero will use font default size).</param>
      <param name="style">The style of the character.</param>
      <seealso cref="P:UnityEngine.Font.characterInfo">
      </seealso>
    </member>
    <member name="M:UnityEngine.Font.GetCharacterInfo(System.Char,UnityEngine.CharacterInfo@,System.Int32)">
      <summary>
        <para>Get rendering info for a specific character.</para>
        <para>Note: You should only ever need to use this when you want to implement your own text rendering. If the character <c>ch</c> with the specified <c>size</c> and <c>style</c> is present in the font texture, then this method will return true, and info will contain the texture placement information for that character. If the character is not present, this method returns false. If <c>size</c> is zero, it will use the default size for the font. Example at <see cref="UnityEngine.Font.RequestCharactersInTexture"></see>.</para>
      </summary>
      <param name="ch">The character you need rendering information for.</param>
      <param name="info">Returns the CharacterInfo struct with the rendering information for the character (if available).</param>
      <param name="size">The size of the character (default value of zero will use font default size).</param>
      <seealso cref="P:UnityEngine.Font.characterInfo">
      </seealso>
    </member>
    <member name="M:UnityEngine.Font.GetCharacterInfo(System.Char,UnityEngine.CharacterInfo@)">
      <summary>
        <para>Get rendering info for a specific character.</para>
        <para>Note: You should only ever need to use this when you want to implement your own text rendering. If the character <c>ch</c> with the specified <c>size</c> and <c>style</c> is present in the font texture, then this method will return true, and info will contain the texture placement information for that character. If the character is not present, this method returns false. If <c>size</c> is zero, it will use the default size for the font. Example at <see cref="UnityEngine.Font.RequestCharactersInTexture"></see>.</para>
      </summary>
      <param name="ch">The character you need rendering information for.</param>
      <param name="info">Returns the CharacterInfo struct with the rendering information for the character (if available).</param>
      <seealso cref="P:UnityEngine.Font.characterInfo">
      </seealso>
    </member>
    <member name="F:UnityEngine.UILineInfo.height">
      <summary>Height of the line.</summary>
    </member>
    <member name="F:UnityEngine.UILineInfo.leading">
      <summary>Space in pixels between this line and the next line.</summary>
    </member>
    <member name="M:UnityEngine.Font.HasCharacter(System.Char)">
      <summary>
        <para>Does this font have a specific character?</para>
        <para>This function checks whether the font has a particular character defined. Some fonts do not have all characters defined (for example, no symbols, or no lower case characters).</para>
      </summary>
      <param name="c">The character to check for.</param>
      <returns>Whether or not the font has the character specified.</returns>
    </member>
    <member name="F:UnityEngine.UILineInfo.startCharIdx">
      <summary>Index of the first character in the line.</summary>
    </member>
    <member name="F:UnityEngine.UILineInfo.topY">
      <summary>The upper Y position of the line in pixels. This is used for text annotation such as the caret and selection box in the InputField.</summary>
    </member>
    <member name="M:UnityEngine.Font.RequestCharactersInTexture(System.String,System.Int32,UnityEngine.FontStyle)">
      <summary>
        <para>Request characters to be added to the font texture (dynamic fonts only).</para>
        <para>Note: You should only ever need to use this when you want to implement your own text rendering. Call this function to request Unity to make sure all the characters in the string <c>characters</c> are available in the font's font texture (and it's <c>characterInfo</c> property). This is useful when you want to implement your own code to render dynamic fonts. You can supply a custom font size and style for the characters. If <c>size</c> is zero (the default), it will use the default size for that font. RequestCharactersInTexture may cause the font texture to be regenerated if it does not have space to add all the requested characters. If the font texture is regenerated it will only contain characters which have been used using Font.RequestCharactersInTexture, or using Unity's text rendering functions during the last frame. So it is advisable to always call RequestCharactersInTexture for any text on the screen you wish to render using custom font rendering functions, even if the characters are currently present in the texture, to make sure they don't get purged during texture rebuild.</para>
      </summary>
      <param name="characters">The characters which are needed to be in the font texture.</param>
      <param name="size">The size of the requested characters (the default value of zero will use the font's default size).</param>
      <param name="style">The style of the requested characters.</param>
      <seealso cref="E:UnityEngine.Font.textureRebuilt">
      </seealso>
      <seealso cref="M:UnityEngine.Font.GetCharacterInfo(System.Char,UnityEngine.CharacterInfo@,System.Int32,UnityEngine.FontStyle)">
      </seealso>
    </member>
    <member name="M:UnityEngine.Font.RequestCharactersInTexture(System.String,System.Int32)">
      <summary>
        <para>Request characters to be added to the font texture (dynamic fonts only).</para>
        <para>Note: You should only ever need to use this when you want to implement your own text rendering. Call this function to request Unity to make sure all the characters in the string <c>characters</c> are available in the font's font texture (and it's <c>characterInfo</c> property). This is useful when you want to implement your own code to render dynamic fonts. You can supply a custom font size and style for the characters. If <c>size</c> is zero (the default), it will use the default size for that font. RequestCharactersInTexture may cause the font texture to be regenerated if it does not have space to add all the requested characters. If the font texture is regenerated it will only contain characters which have been used using Font.RequestCharactersInTexture, or using Unity's text rendering functions during the last frame. So it is advisable to always call RequestCharactersInTexture for any text on the screen you wish to render using custom font rendering functions, even if the characters are currently present in the texture, to make sure they don't get purged during texture rebuild.</para>
      </summary>
      <param name="characters">The characters which are needed to be in the font texture.</param>
      <param name="size">The size of the requested characters (the default value of zero will use the font's default size).</param>
      <seealso cref="E:UnityEngine.Font.textureRebuilt">
      </seealso>
      <seealso cref="M:UnityEngine.Font.GetCharacterInfo(System.Char,UnityEngine.CharacterInfo@,System.Int32,UnityEngine.FontStyle)">
      </seealso>
    </member>
    <member name="M:UnityEngine.Font.RequestCharactersInTexture(System.String)">
      <summary>
        <para>Request characters to be added to the font texture (dynamic fonts only).</para>
        <para>Note: You should only ever need to use this when you want to implement your own text rendering. Call this function to request Unity to make sure all the characters in the string <c>characters</c> are available in the font's font texture (and it's <c>characterInfo</c> property). This is useful when you want to implement your own code to render dynamic fonts. You can supply a custom font size and style for the characters. If <c>size</c> is zero (the default), it will use the default size for that font. RequestCharactersInTexture may cause the font texture to be regenerated if it does not have space to add all the requested characters. If the font texture is regenerated it will only contain characters which have been used using Font.RequestCharactersInTexture, or using Unity's text rendering functions during the last frame. So it is advisable to always call RequestCharactersInTexture for any text on the screen you wish to render using custom font rendering functions, even if the characters are currently present in the texture, to make sure they don't get purged during texture rebuild.</para>
      </summary>
      <param name="characters">The characters which are needed to be in the font texture.</param>
      <seealso cref="E:UnityEngine.Font.textureRebuilt">
      </seealso>
      <seealso cref="M:UnityEngine.Font.GetCharacterInfo(System.Char,UnityEngine.CharacterInfo@,System.Int32,UnityEngine.FontStyle)">
      </seealso>
    </member>
    <member name="M:UnityEngine.Font.CreateDynamicFontFromOSFont(System.String,System.Int32)">
      <summary>
        <para>Creates a Font object which lets you render a font installed on the user machine.</para>
        <para>CreateDynamicFontFromOSFont creates a font object which references fonts from the OS. This lets you render text using any font installed on the user's machine. See <see cref="UnityEngine.Font.GetOSInstalledFontNames"></see> for getting names of installed fonts at runtime, which can be used with this function.</para>
      </summary>
      <param name="fontname">The name of the OS font to use for this font object.</param>
      <param name="size">The default character size of the generated font.</param>
      <returns>The generate Font object.</returns>
    </member>
    <member name="M:UnityEngine.Font.CreateDynamicFontFromOSFont(System.String[],System.Int32)">
      <summary>
        <para>Creates a Font object which lets you render a font installed on the user machine.</para>
        <para>CreateDynamicFontFromOSFont creates a font object which references fonts from the OS. This lets you render text using any font installed on the user's machine. See <see cref="UnityEngine.Font.GetOSInstalledFontNames"></see> for getting names of installed fonts at runtime, which can be used with this function.</para>
      </summary>
      <param name="fontnames">Am array of names of OS fonts to use for this font object. When rendering characters using this font object, the first font which is installed on the machine, which contains the requested character will be used.</param>
      <param name="size">The default character size of the generated font.</param>
      <returns>The generate Font object.</returns>
    </member>
    <member name="M:UnityEngine.Font.GetMaxVertsForString(System.String)">
      <summary>Returns the maximum number of verts that the text generator may return for a given string.</summary>
      <param name="str">Input string.</param>
    </member>
    <member name="M:UnityEngine.Font.GetOSInstalledFontNames">
      <summary>
        <para>Get names of fonts installed on the machine.</para>
        <para>GetOSInstalledFontNames lets you get the names of all the fonts installed on the machine. These names can be passed to <see cref="UnityEngine.Font.CreateDynamicFontFromOSFont"></see>, to dynamically render text using any font installed on the user's OS.</para>
      </summary>
      <returns>An array of the names of all fonts installed on the machine.</returns>
    </member>
    <member name="F:UnityEngine.UIVertex.simpleVert">
      <summary>Simple UIVertex with sensible settings for use in the UI system.</summary>
    </member>
    <member name="F:UnityEngine.UIVertex.color">
      <summary>Vertex color.</summary>
    </member>
    <member name="F:UnityEngine.UIVertex.normal">
      <summary>Normal.</summary>
    </member>
    <member name="F:UnityEngine.UIVertex.position">
      <summary>Vertex position.</summary>
    </member>
    <member name="F:UnityEngine.UIVertex.tangent">
      <summary>Tangent.</summary>
    </member>
    <member name="F:UnityEngine.UIVertex.uv0">
      <summary>The first texture coordinate set of the mesh. Used by UI elements by default.</summary>
    </member>
    <member name="F:UnityEngine.UIVertex.uv1">
      <summary>The second texture coordinate set of the mesh, if present.</summary>
    </member>
    <member name="F:UnityEngine.UIVertex.uv2">
      <summary>The Third texture coordinate set of the mesh, if present.</summary>
    </member>
    <member name="F:UnityEngine.UIVertex.uv3">
      <summary>The forth texture coordinate set of the mesh, if present.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.advance">
      <summary>The horizontal distance from the origin of this character to the origin of the next character.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.bearing">
      <summary>The horizontal distance from the origin of this glyph to the begining of the glyph image.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.glyphHeight">
      <summary>The height of the glyph image.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.glyphWidth">
      <summary>The width of the glyph image.</summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.index">
      <summary>Unicode value of the character.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.maxX">
      <summary>The maximum extend of the glyph image in the x-axis.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.maxY">
      <summary>The maximum extend of the glyph image in the y-axis.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.minX">
      <summary>The minium extend of the glyph image in the x-axis.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.minY">
      <summary>The minimum extend of the glyph image in the y-axis.</summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.size">
      <summary>
        <para>The size of the character or 0 if it is the default font size.</para>
        <para>Only used with characters generated at runtime for dynamic fonts).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.style">
      <summary>
        <para>The style of the character.</para>
        <para>Only used with characters generated at runtime for dynamic fonts).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.uvBottomLeft">
      <summary>The uv coordinate matching the bottom left of the glyph image in the font texture.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.uvBottomRight">
      <summary>The uv coordinate matching the bottom right of the glyph image in the font texture.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.uvTopLeft">
      <summary>The uv coordinate matching the top left of the glyph image in the font texture.</summary>
    </member>
    <member name="P:UnityEngine.CharacterInfo.uvTopRight">
      <summary>The uv coordinate matching the top right of the glyph image in the font texture.</summary>
    </member>
    <member name="F:UnityEngine.TextAlignment.Left">
      <summary>Text lines are aligned on the left side.</summary>
    </member>
    <member name="F:UnityEngine.TextAlignment.Center">
      <summary>Text lines are centered.</summary>
    </member>
    <member name="F:UnityEngine.TextAlignment.Right">
      <summary>Text lines are aligned on the right side.</summary>
    </member>
    <member name="F:UnityEngine.VerticalWrapMode.Truncate">
      <summary>Text will be clipped when reaching the vertical boundary.</summary>
    </member>
    <member name="F:UnityEngine.VerticalWrapMode.Overflow">
      <summary>Text well continue to generate when reaching vertical boundary.</summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.UpperLeft">
      <summary>Text is anchored in upper left corner.</summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.UpperCenter">
      <summary>Text is anchored in upper side, centered horizontally.</summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.UpperRight">
      <summary>Text is anchored in upper right corner.</summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.MiddleLeft">
      <summary>Text is anchored in left side, centered vertically.</summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.MiddleCenter">
      <summary>Text is centered both horizontally and vertically.</summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.MiddleRight">
      <summary>Text is anchored in right side, centered vertically.</summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.LowerLeft">
      <summary>Text is anchored in lower left corner.</summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.LowerCenter">
      <summary>Text is anchored in lower side, centered horizontally.</summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.LowerRight">
      <summary>Text is anchored in lower right corner.</summary>
    </member>
    <member name="P:UnityEngine.TextMesh.alignment">
      <summary>How lines of text are aligned (Left, Right, Center).</summary>
    </member>
    <member name="P:UnityEngine.TextMesh.anchor">
      <summary>Which point of the text shares the position of the Transform.</summary>
    </member>
    <member name="P:UnityEngine.TextMesh.characterSize">
      <summary>The size of each character (This scales the whole text).</summary>
    </member>
    <member name="P:UnityEngine.TextMesh.color">
      <summary>
        <para>The color used to render the text.</para>
        <para>This is the base color used to render the text. &lt;color&gt; tags in rich text markup will override this.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.font">
      <summary>The <see cref="UnityEngine.Font"></see> used.</summary>
    </member>
    <member name="P:UnityEngine.TextMesh.fontSize">
      <summary>
        <para>The font size to use (for dynamic fonts).</para>
        <para>If this is set to a non-zero value, the font size specified in the font importer is overriden with a custom size. This is only supported for fonts set to use dynamic font rendering. Other fonts will always use the default font size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.fontStyle">
      <summary>
        <para>The font style to use (for dynamic fonts).</para>
        <para>If this is set to a value other then normal, the font style set in the font importer is overriden with a custom style. This is only supported for fonts set to use dynamic font rendering. Other fonts will always render in normal style.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.lineSpacing">
      <summary>How much space will be in-between lines of text.</summary>
    </member>
    <member name="P:UnityEngine.TextMesh.offsetZ">
      <summary>How far should the text be offset from the transform.position.z when drawing.</summary>
    </member>
    <member name="P:UnityEngine.TextMesh.richText">
      <summary>
        <para>Enable HTML-style tags for Text Formatting Markup.</para>
        <para>Supported tags are: &lt;color="htmlcolor"&gt;colored text&lt;/color&gt;, where "htmlcolor" is a html color string, like "#ff0000" or "red". &lt;b&gt;bold text&lt;/b&gt; &lt;i&gt;italic text&lt;/i&gt; &lt;size=20&gt;sized text&lt;/size&gt; &lt;material=1&gt;render using custom material index&lt;/material&gt; &lt;quad material=1 size=20 x=0.1 y=0.1 width=0.5 height=0.5/&gt;, to render a single quad using the given material and UVs, used for embedding images in text. These are only supported for fonts set to use dynamic font rendering, except for the 'color', 'material' and 'quad' tags.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.tabSize">
      <summary>How much space will be inserted for a tab '\t' character. This is a multiplum of the 'spacebar' character offset.</summary>
    </member>
    <member name="P:UnityEngine.TextMesh.text">
      <summary>The text that is displayed.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.resizeTextForBestFit">
      <summary>Should the text be resized to fit the configured bounds?</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.resizeTextMaxSize">
      <summary>Maximum size for resized text.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.resizeTextMinSize">
      <summary>Minimum size for resized text.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.richText">
      <summary>Allow rich text markup in generation.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.scaleFactor">
      <summary>A scale factor for the text. This is useful if the <see cref="UnityEngine.UI.Text"></see> is on a <see cref="UnityEngine.Canvas"></see> and the canvas is scaled.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.textAnchor">
      <summary>How is the generated text anchored.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.updateBounds">
      <summary>Should the text generator update the bounds from the generated text.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.verticalOverflow">
      <summary>What happens to text when it reaches the bottom generation bounds.</summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.characterCount">
      <summary>The number of characters that have been generated.</summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.characterCountVisible">
      <summary>The number of characters that have been generated and are included in the visible lines.</summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.characters">
      <summary>Array of generated characters.</summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.fontSizeUsedForBestFit">
      <summary>The size of the font that was found if using best fit mode.</summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.lineCount">
      <summary>Number of text lines generated.</summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.lines">
      <summary>Information about each generated text line.</summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.rectExtents">
      <summary>Extents of the generated text in rect format.</summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.vertexCount">
      <summary>Number of vertices generated.</summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.verts">
      <summary>Array of generated vertices.</summary>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetCharactersArray">
      <summary>Returns the current UICharInfo.</summary>
      <returns>Character information.</returns>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetLinesArray">
      <summary>Returns the current UILineInfo.</summary>
      <returns>Line information.</returns>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetPreferredHeight(System.String,UnityEngine.TextGenerationSettings)">
      <summary>Given a string and settings, returns the preferred height for a container that would hold this text.</summary>
      <param name="str">Generation text.</param>
      <param name="settings">Settings for generation.</param>
      <returns>Preferred height.</returns>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetPreferredWidth(System.String,UnityEngine.TextGenerationSettings)">
      <summary>Given a string and settings, returns the preferred width for a container that would hold this text.</summary>
      <param name="str">Generation text.</param>
      <param name="settings">Settings for generation.</param>
      <returns>Preferred width.</returns>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetVerticesArray">
      <summary>Returns the current UILineInfo.</summary>
      <returns>Vertices.</returns>
    </member>
    <member name="M:UnityEngine.TextGenerator.Invalidate">
      <summary>Mark the text generator as invalid. This will force a full text generation the next time Populate is called.</summary>
    </member>
    <member name="M:UnityEngine.TextGenerator.Populate(System.String,UnityEngine.TextGenerationSettings)">
      <summary>
        <para>Will generate the vertices and other data for the given string with the given settings.</para>
        <para>Will only regenerate if the string AND settings are different from the last execution.</para>
      </summary>
      <param name="str">String to generate.</param>
      <param name="settings">Settings.</param>
    </member>
    <member name="M:UnityEngine.TextGenerator.PopulateWithErrors(System.String,UnityEngine.TextGenerationSettings,UnityEngine.GameObject)">
      <summary>
        <para>Will generate the vertices and other data for the given string with the given settings.</para>
        <para>Will only regenerate if the string AND settings are different from the last execution.</para>
      </summary>
      <param name="str">String to generate.</param>
      <param name="settings">Generation settings.</param>
      <param name="context">The object used as context of the error log message, if necessary.</param>
      <returns>True if the generation is a success, false otherwise.</returns>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.alignByGeometry">
      <summary>
        <para>Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics.</para>
        <para>This can result in better fitting left and right alignment, but may result in incorrect positioning when attempting to overlay multiple fonts (such as a specialized outline font) on top of each other.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.color">
      <summary>The base color for the text generation.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.font">
      <summary>Font to use for generation.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.fontSize">
      <summary>Font size.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.fontStyle">
      <summary>Font style.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.generateOutOfBounds">
      <summary>Continue to generate characters even if the text runs out of bounds.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.generationExtents">
      <summary>Extents that the generator will attempt to fit the text in.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.horizontalOverflow">
      <summary>What happens to text when it reaches the horizontal generation bounds.</summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.lineSpacing">
      <summary>
        <para>The line spacing multiplier.</para>
        <para>This is multiplied with the line spacing defined in the font.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.pivot">
      <summary>Generated vertices are offset by the pivot.</summary>
    </member>
    <member name="F:UnityEngine.HorizontalWrapMode.Wrap">
      <summary>Text will word-wrap when reaching the horizontal boundary.</summary>
    </member>
    <member name="F:UnityEngine.HorizontalWrapMode.Overflow">
      <summary>Text can exceed the horizontal boundary.</summary>
    </member>
  </members>
</doc>