<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.8.0.0 -->
  <assembly>
    <name>UnityEngine.ImageConversionModule</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.ImageConversion">
      <summary>Class with utility methods and extension methods to deal with converting image data from or to PNG and JPEG formats.</summary>
    </member>
    <member name="M:UnityEngine.ImageConversion.EncodeToEXR(UnityEngine.Texture2D)">
      <summary>
        <para>Encodes this texture into the EXR format.</para>
        <para>This function returns a byte array which is the EXR file data. Write this data to disk to get the data in the EXR file format. It is best to use this function for HDR texture formats (either 16-bit or 32-bit floats). The default output format is 16-bit float EXR and the texture passed must have the Is Readable flat set in the import settings. The encoded EXR data will always contain an alpha channel.</para>
      </summary>
      <param name="tex">The texture to convert.</param>
      <seealso cref="T:UnityEngine.Texture2D.EXRFlags">
      </seealso>
      <seealso cref="M:UnityEngine.ImageConversion.EncodeToJPG(UnityEngine.Texture2D,System.Int32)">
      </seealso>
      <seealso cref="M:UnityEngine.ImageConversion.EncodeToPNG(UnityEngine.Texture2D)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ImageConversion.EncodeToJPG(UnityEngine.Texture2D,System.Int32)">
      <summary>
        <para>Encodes this texture into JPG format.</para>
        <para>The returned byte array is the JPG "file". You can write them to disk to get the JPG file, send them over the network, etc. This function works only on uncompressed, non-HDR texture formats. The texture also has to have Is Readable flag set in the import settings. The encoded JPG data will have no alpha channel.</para>
      </summary>
      <param name="tex">Text texture to convert.</param>
      <param name="quality">JPG quality to encode with, 1..100 (default 75).</param>
      <seealso cref="M:UnityEngine.ImageConversion.EncodeToPNG(UnityEngine.Texture2D)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ImageConversion.EncodeToJPG(UnityEngine.Texture2D)">
      <summary>
        <para>Encodes this texture into JPG format.</para>
        <para>The returned byte array is the JPG "file". You can write them to disk to get the JPG file, send them over the network, etc. This function works only on uncompressed, non-HDR texture formats. The texture also has to have Is Readable flag set in the import settings. The encoded JPG data will have no alpha channel.</para>
      </summary>
      <param name="tex">Text texture to convert.</param>
      <seealso cref="M:UnityEngine.ImageConversion.EncodeToPNG(UnityEngine.Texture2D)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ImageConversion.EncodeToPNG(UnityEngine.Texture2D)">
      <summary>
        <para>Encodes this texture into PNG format.</para>
        <para>The returned byte array is the PNG "file". You can write them to disk to get the PNG file, send them over the network, etc. This function works only on uncompressed, non-HDR texture formats. The texture also has to have Is Readable flag set in the import settings. The encoded PNG data will contain alpha channel for <c>RGBA32</c>, <c>ARGB32</c> textures, and no alpha channel for <c>RGB24</c> textures. PNG data will not contain gamma correction or color profile information.</para>
      </summary>
      <param name="tex">The texture to convert.</param>
      <seealso cref="M:UnityEngine.Texture2D.ReadPixels(UnityEngine.Rect,System.Int32,System.Int32,System.Boolean)">
      </seealso>
      <seealso cref="T:UnityEngine.WaitForEndOfFrame">
      </seealso>
      <seealso cref="M:UnityEngine.ImageConversion.LoadImage(UnityEngine.Texture2D,System.Byte[],System.Boolean)">
      </seealso>
      <seealso cref="M:UnityEngine.ImageConversion.EncodeToJPG(UnityEngine.Texture2D,System.Int32)">
      </seealso>
    </member>
    <member name="M:UnityEngine.ImageConversion.LoadImage(UnityEngine.Texture2D,System.Byte[],System.Boolean)">
      <summary>
        <para>Loads PNG/JPG image byte array into a texture.</para>
        <para>This function replaces texture contents with new image data. After LoadImage, texture size and format might change. JPG files are loaded into <see cref="UnityEngine.TextureFormat.RGB24"></see> format, PNG files are loaded into <see cref="UnityEngine.TextureFormat.RGBA32"></see> format. If texture format before calling LoadImage is <see cref="UnityEngine.TextureFormat.DXT1"></see> or <see cref="UnityEngine.TextureFormat.DXT5"></see>, then the loaded image will be DXT-compressed (into DXT1 for JPG images and DXT5 for PNG images). If the platform is not able to perform runtime compression then false will be returned. Texture will be uploaded to the GPU automatically; there's no need to call <see cref="UnityEngine.Texture2D.Apply"></see>.</para>
      </summary>
      <param name="tex">The texture to load the image into.</param>
      <param name="data">The byte array containing the image data to load.</param>
      <param name="markNonReadable">Set to false by default, pass true to optionally mark the texture as non-readable.</param>
      <returns>Returns true if the data can be loaded, false otherwise.</returns>
      <seealso cref="M:UnityEngine.ImageConversion.EncodeToPNG(UnityEngine.Texture2D)">
      </seealso>
      <seealso cref="M:UnityEngine.ImageConversion.EncodeToJPG(UnityEngine.Texture2D,System.Int32)">
      </seealso>
      <seealso cref="M:UnityEngine.Texture2D.LoadRawTextureData(System.Byte[])">
      </seealso>
    </member>
    <member name="M:UnityEngine.ImageConversion.LoadImage(UnityEngine.Texture2D,System.Byte[])">
      <summary>
        <para>Loads PNG/JPG image byte array into a texture.</para>
        <para>This function replaces texture contents with new image data. After LoadImage, texture size and format might change. JPG files are loaded into <see cref="UnityEngine.TextureFormat.RGB24"></see> format, PNG files are loaded into <see cref="UnityEngine.TextureFormat.RGBA32"></see> format. If texture format before calling LoadImage is <see cref="UnityEngine.TextureFormat.DXT1"></see> or <see cref="UnityEngine.TextureFormat.DXT5"></see>, then the loaded image will be DXT-compressed (into DXT1 for JPG images and DXT5 for PNG images). If the platform is not able to perform runtime compression then false will be returned. Texture will be uploaded to the GPU automatically; there's no need to call <see cref="UnityEngine.Texture2D.Apply"></see>.</para>
      </summary>
      <param name="tex">The texture to load the image into.</param>
      <param name="data">The byte array containing the image data to load.</param>
      <returns>Returns true if the data can be loaded, false otherwise.</returns>
      <seealso cref="M:UnityEngine.ImageConversion.EncodeToPNG(UnityEngine.Texture2D)">
      </seealso>
      <seealso cref="M:UnityEngine.ImageConversion.EncodeToJPG(UnityEngine.Texture2D,System.Int32)">
      </seealso>
      <seealso cref="M:UnityEngine.Texture2D.LoadRawTextureData(System.Byte[])">
      </seealso>
    </member>
  </members>
</doc>